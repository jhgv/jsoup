/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:44:56 GMT 2018
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.internal.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilder((StringBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      boolean boolean2 = linkedList0.add((Integer) null);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(linkedList0.contains(0));
      
      boolean boolean3 = linkedList0.add((Integer) null);
      assertTrue(boolean3);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(linkedList0.contains(0));
      
      Integer integer0 = new Integer(8205);
      assertEquals(8205, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Integer integer1 = new Integer(8205);
      assertEquals(8205, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean4 = linkedList0.add(integer1);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(integer0));
      
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean5 = linkedList0.removeIf(predicate3);
      assertTrue(boolean5);
      assertEquals(2, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(linkedList0.contains(integer0));
      
      boolean boolean6 = linkedList0.add((Integer) null);
      assertTrue(boolean6);
      assertEquals(3, linkedList0.size());
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(linkedList0.contains(integer0));
      
      boolean boolean7 = linkedList0.add(integer0);
      assertTrue(boolean7);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(integer0));
      
      boolean boolean8 = StringUtil.isInvisibleChar(8205);
      assertTrue(boolean8);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(391);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isWhitespace(12);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isInvisibleChar(21);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string0 = StringUtil.padding(8203);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = "";
      stringArray0[2] = string0;
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean4 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean4);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      String string1 = StringUtil.resolve(stringArray0[2], stringArray0[0]);
      assertEquals("", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(391);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isWhitespace(391);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isActuallyWhitespace(21);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtil.isInvisibleChar(8206);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean4 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean4);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "                ";
      boolean boolean0 = StringUtil.isBlank("                ");
      assertTrue(boolean0);
      
      int int0 = 47;
      boolean boolean1 = StringUtil.isActuallyWhitespace(47);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      String string1 = "N<";
      URL uRL1 = StringUtil.resolve(uRL0, "N<");
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string2 = StringUtil.resolve("                ", "N<");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string3 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean2 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringBuilder stringBuilder1 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      StringBuilder stringBuilder2 = stringBuilder1.append("HW");
      assertEquals("HW", stringBuilder1.toString());
      assertEquals("HW", stringBuilder2.toString());
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StringUtil.appendNormalisedWhitespace(stringBuilder1, "                ", false);
      assertEquals("HW ", stringBuilder1.toString());
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn("").when(iterator0).next();
      String string4 = StringUtil.join(iterator0, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "1)[\" _k7.";
      boolean boolean3 = StringUtil.isNumeric(string5);
      assertFalse(boolean3);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string6 = "oh/";
      URL uRL2 = StringUtil.resolve(uRL1, string6);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getQuery());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL0));
      
      URL uRL3 = StringUtil.resolve(uRL2, string3);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getQuery());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals((-1), uRL3.getPort());
      assertEquals((-1), uRL3.getDefaultPort());
      assertNull(uRL3.getUserInfo());
      assertNull(uRL3.getRef());
      assertEquals("ftp", uRL3.getProtocol());
      assertNull(uRL3.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL3, uRL1);
      assertNotSame(uRL3, uRL2);
      assertNotSame(uRL3, uRL0);
      assertNotSame(uRL1, uRL3);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL3);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL3.equals((Object)uRL1));
      assertFalse(uRL3.equals((Object)uRL0));
      assertTrue(uRL3.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      
      String string7 = StringUtil.resolve(string1, string0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      URL uRL4 = StringUtil.resolve(uRL2, string2);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getQuery());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/N<", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL4.getRef());
      assertEquals((-1), uRL4.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toExternalForm());
      assertNull(uRL4.getUserInfo());
      assertNull(uRL4.getQuery());
      assertEquals((-1), uRL4.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getAuthority());
      assertEquals("ftp", uRL4.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toString());
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL0, uRL4);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL4);
      assertNotSame(uRL1, uRL3);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL4);
      assertNotSame(uRL4, uRL3);
      assertNotSame(uRL4, uRL0);
      assertNotSame(uRL4, uRL2);
      assertNotSame(uRL4, uRL1);
      assertNotNull(uRL4);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL3));
      assertFalse(uRL2.equals((Object)uRL1));
      assertTrue(uRL2.equals((Object)uRL3));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL3));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertTrue(uRL4.equals((Object)uRL2));
      assertFalse(uRL4.equals((Object)uRL0));
      assertTrue(uRL4.equals((Object)uRL3));
      assertFalse(uRL4.equals((Object)uRL1));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string3));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = StringUtil.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = '<';
      charArray0[3] = 'u';
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "'0%Re^\"%MPHx00(", false);
      assertEquals("'0%Re^\"%MPHx00(", stringBuilder0.toString());
      
      boolean boolean3 = StringUtil.isBlank("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "", false);
      assertEquals("'0%Re^\"%MPHx00(", stringBuilder0.toString());
      
      boolean boolean4 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean4);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean5 = linkedList0.add("");
      assertTrue(boolean5);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains("'0%Re^\"%MPHx00("));
      
      boolean boolean6 = linkedList0.add("");
      assertTrue(boolean6);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains("'0%Re^\"%MPHx00("));
      
      boolean boolean7 = linkedList0.add("WMQOs5ZOj");
      assertTrue(boolean7);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains("'0%Re^\"%MPHx00("));
      
      Iterator<String> iterator1 = linkedList0.iterator();
      assertEquals(3, linkedList0.size());
      assertNotNull(iterator1);
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains("'0%Re^\"%MPHx00("));
      
      String string1 = StringUtil.join(iterator1, "");
      assertEquals(3, linkedList0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains(string1));
      
      String string2 = StringUtil.join(iterator1, "");
      assertEquals("", string2);
      assertEquals(3, linkedList0.size());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(160);
      assertFalse(boolean0);
      
      String string0 = "&";
      boolean boolean1 = StringUtil.isBlank("&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtil.padding(160);
      assertEquals("                                                                                                                                                                ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtil.isWhitespace((-1631));
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                                                                                                                                                                ");
      assertEquals("                                                                                                                                                                ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (-1631));
      assertEquals("                                                                                                                                                                -1631.0", stringBuilder0.toString());
      assertEquals("                                                                                                                                                                -1631.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder1, "&", false);
      assertEquals("                                                                                                                                                                -1631.0&", stringBuilder0.toString());
      assertEquals("                                                                                                                                                                -1631.0&", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string2 = "wdm&BK^(+>%.X8,";
      // Undeclared exception!
      try { 
        StringUtil.join(iterator0, "wdm&BK^(+>%.X8,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("          ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtil.isWhitespace((-3850));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "45xl";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = "          ";
      stringArray0[5] = " ";
      String string1 = StringUtil.join(stringArray0, " ");
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtil.join(stringArray0, " ");
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtil.normaliseWhitespace("w_(Mus)>/Q?)f#[zX");
      assertEquals("w_(Mus)>/Q?)f#[zX", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtil.in("@yptO8", stringArray0);
      assertFalse(boolean2);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, "/", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 32;
      String string0 = StringUtil.padding(32);
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtil.isWhitespace(32);
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "                                ");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string1 = "cO";
      URL uRL2 = StringUtil.resolve(uRL1, "cO");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/cO", uRL2.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/cO", uRL2.toString());
      assertNull(uRL2.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getUserInfo());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotNull(uRL2);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(32);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[9];
      String string2 = "q|[K.lF<^3y";
      stringArray0[0] = "q|[K.lF<^3y";
      stringArray0[1] = "cO";
      stringArray0[2] = "                                ";
      stringArray0[3] = "cO";
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "q|[K.lF<^3y", 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 32, end 32, s.length() 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("CzLd}fed.K5zx{)Cb");
      assertEquals("CzLd}fed.K5zx{)Cb", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CzLd}fed.K5zx{)Cb";
      stringArray0[1] = "CzLd}fed.K5zx{)Cb";
      stringArray0[2] = "CzLd}fed.K5zx{)Cb";
      stringArray0[3] = "CzLd}fed.K5zx{)Cb";
      stringArray0[4] = "CzLd}fed.K5zx{)Cb";
      stringArray0[5] = "CzLd}fed.K5zx{)Cb";
      String string1 = StringUtil.join(stringArray0, "CzLd}fed.K5zx{)Cb");
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtil.in("java.lang.String@0000000001CzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)CbCzLd}fed.K5zx{)Cb", stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = StringUtil.in("CzLd}fed.K5zx{)Cb", stringArray0);
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtil.padding(466);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "CzLd}fed.K5zx{)Cb");
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string3 = StringUtil.padding(466);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "CzLd}fed.K5zx{)Cb";
      stringArray1[1] = "CzLd}fed.K5zx{)Cb";
      stringArray1[2] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      stringArray1[3] = "CzLd}fed.K5zx{)Cb";
      stringArray1[4] = "CzLd}fed.K5zx{)Cb";
      stringArray1[5] = "      ";
      stringArray1[6] = "CzLd}fed.K5zx{)Cb";
      stringArray1[7] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      stringArray1[8] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      boolean boolean2 = StringUtil.in("", stringArray1);
      assertFalse(boolean2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtil.isBlank("CzLd}fed.K5zx{)Cb");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2157), (CharSequence) "CzLd}fed.K5zx{)Cb");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2157
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      String string0 = StringUtil.padding(1489);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = linkedList0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add(string0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = "         ";
      stringArray0[4] = string0;
      stringArray0[5] = "         ";
      stringArray0[6] = "         ";
      stringArray0[7] = string0;
      String string1 = StringUtil.join(stringArray0, string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) listIterator0, "         ");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'g';
      charArray0[3] = 'u';
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtil.isBlank("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "", false);
      assertEquals("", stringBuilder0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      boolean boolean4 = linkedList0.add("WMQOs5ZOj");
      assertTrue(boolean4);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      
      Iterator<String> iterator1 = linkedList0.iterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator1);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      
      String string1 = StringUtil.join(iterator1, "");
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      
      String string2 = StringUtil.join(iterator1, "");
      assertEquals("", string2);
      assertEquals(1, linkedList0.size());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "?");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      boolean boolean0 = StringUtil.isActuallyWhitespace((-1));
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "KlH";
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      stringArray0[3] = "?";
      stringArray0[4] = "?";
      stringArray0[5] = "wYJ'8`D<V";
      stringArray0[6] = "KlH";
      boolean boolean1 = StringUtil.in("KlH", stringArray0);
      assertTrue(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isWhitespace((-1));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtil.isActuallyWhitespace(0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtil.in("/", stringArray0);
      assertFalse(boolean4);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C30`[2`U9;N?U";
      boolean boolean0 = StringUtil.inSorted("C30`[2`U9;N?U", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.replace(0, 2094, "");
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder2, "6i7bsJh%2V,C'52 ", true);
      assertEquals("6i7bsJh%2V,C'52 ", stringBuilder0.toString());
      assertEquals("6i7bsJh%2V,C'52 ", stringBuilder1.toString());
      assertEquals("6i7bsJh%2V,C'52 ", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C30`[2`U9;N?U";
      boolean boolean0 = StringUtil.isNumeric("C30`[2`U9;N?U");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = new StringBuilder("C30`[2`U9;N?U");
      assertEquals("C30`[2`U9;N?U", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      StringBuilder stringBuilder2 = stringBuilder1.replace(0, 2094, "");
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StringUtil.appendNormalisedWhitespace(stringBuilder2, "6i7bsJh%2V,C'52 ", true);
      assertEquals("6i7bsJh%2V,C'52 ", stringBuilder1.toString());
      assertEquals("6i7bsJh%2V,C'52 ", stringBuilder2.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("                ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(47);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string0 = StringUtil.resolve("                ", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean2 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      StringBuilder stringBuilder1 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      StringBuilder stringBuilder2 = stringBuilder1.append("HW");
      assertEquals("HW", stringBuilder1.toString());
      assertEquals("HW", stringBuilder2.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StringUtil.appendNormalisedWhitespace(stringBuilder1, "                ", false);
      assertEquals("HW ", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string2 = StringUtil.join(iterator0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtil.isNumeric("1)[\" _k7.");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      URL uRL2 = StringUtil.resolve(uRL1, "oh/");
      assertEquals("ftp", uRL2.getProtocol());
      assertNull(uRL2.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotNull(uRL2);
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      URL uRL3 = StringUtil.resolve(uRL2, "");
      assertEquals("ftp", uRL2.getProtocol());
      assertNull(uRL2.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getHost());
      assertNull(uRL3.getRef());
      assertEquals((-1), uRL3.getDefaultPort());
      assertEquals("ftp", uRL3.getProtocol());
      assertNull(uRL3.getUserInfo());
      assertNull(uRL3.getQuery());
      assertEquals((-1), uRL3.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL3, uRL0);
      assertNotSame(uRL3, uRL2);
      assertNotSame(uRL3, uRL1);
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL3);
      assertNotNull(uRL3);
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL3.equals((Object)uRL0));
      assertFalse(uRL3.equals((Object)uRL1));
      assertTrue(uRL3.equals((Object)uRL2));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string3 = StringUtil.resolve("", "                ");
      assertEquals("", string3);
      assertNotNull(string3);
      
      URL uRL4 = StringUtil.resolve(uRL2, "");
      assertEquals("ftp", uRL2.getProtocol());
      assertNull(uRL2.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL4.getProtocol());
      assertNull(uRL4.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getHost());
      assertNull(uRL4.getRef());
      assertEquals((-1), uRL4.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getAuthority());
      assertEquals((-1), uRL4.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toExternalForm());
      assertNull(uRL4.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL4);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL4);
      assertNotSame(uRL4, uRL0);
      assertNotSame(uRL4, uRL1);
      assertNotSame(uRL4, uRL2);
      assertNotSame(uRL4, uRL3);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL3);
      assertNotSame(uRL1, uRL4);
      assertNotNull(uRL4);
      assertFalse(uRL2.equals((Object)uRL0));
      assertTrue(uRL2.equals((Object)uRL3));
      assertFalse(uRL2.equals((Object)uRL1));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL3));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL4.equals((Object)uRL0));
      assertFalse(uRL4.equals((Object)uRL1));
      assertTrue(uRL4.equals((Object)uRL3));
      assertTrue(uRL4.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL3));
      assertTrue(uRL1.equals((Object)uRL0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(1);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isBlank("      ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "      ";
      boolean boolean2 = StringUtil.in("", stringArray0);
      assertTrue(boolean2);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtil.isBlank("      ");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("LqE+qWxM", string0);
      assertNotNull(string0);
      
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string1 = StringUtil.join(iterator0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", string2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (Object) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean4 = StringUtil.isWhitespace(1);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      String string3 = StringUtil.normaliseWhitespace("b,42eq");
      assertEquals("nullb,42eq", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", string4);
      assertEquals("", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      StringBuilder stringBuilder2 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder2.toString());
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      boolean boolean5 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      
      String string5 = StringUtil.padding(0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtil.resolve("ZT]B=t[lN_.zs5a`*", "\"\fbMD");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtil.join((Collection) linkedList0, "");
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtil.normaliseWhitespace("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      StringBuilder stringBuilder1 = stringBuilder0.append("LqE+qWxM");
      assertEquals("LqE+qWxM", stringBuilder0.toString());
      assertEquals("LqE+qWxM", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      stringArray0[0] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isActuallyWhitespace(0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkedList<StringBuilder> linkedList1 = new LinkedList<StringBuilder>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(stringBuilder0));
      
      Iterator<StringBuilder> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains(stringBuilder0));
      
      String string3 = StringUtil.join(iterator0, "");
      assertEquals("", string3);
      assertEquals(0, linkedList1.size());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(linkedList1.contains(stringBuilder0));
      
      String string4 = StringUtil.join(stringArray0, "LqE+qWxM");
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "E?8V>aAx2";
      String string1 = StringUtil.join(stringArray0, "E?8V>aAx2");
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(0, (CharSequence) "E?8V>aAx2", 10, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 10, end 0, s.length() 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(391);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isWhitespace(14);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isInvisibleChar(21);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      boolean boolean4 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean4);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(391);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isInvisibleChar(21);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = new String[5];
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "o%-,2#b.f[(G$9BQ9";
      String string1 = StringUtil.resolve("o%-,2#b.f[(G$9BQ9", "o%-,2#b.f[(G$9BQ9");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilder((StringBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      String string0 = StringUtil.join((Collection) linkedList0, "N");
      assertEquals(1, linkedList0.size());
      assertNotNull(string0);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("N"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "P2Usel~3ma/-{>g+";
      boolean boolean0 = linkedList0.add("P2Usel~3ma/-{>g+");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("P2Usel~3ma/-{>g+"));
      
      int int0 = 0;
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(linkedList0.contains("P2Usel~3ma/-{>g+"));
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("P2Usel~3ma/-{>g+"));
      
      String string1 = "F";
      boolean boolean1 = linkedList0.add("P2Usel~3ma/-{>g+");
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("P2Usel~3ma/-{>g+"));
      
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) listIterator0, "F");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        StringUtil.in((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "IC+E/^n35fH>xM4");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/IC+E/IC+E/^n35fH>xM4", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/IC+E/IC+E/^n35fH>xM4", uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "IC+E/^n35fH>xM4";
      stringArray0[1] = "IC+E/^n35fH>xM4";
      stringArray0[2] = "";
      stringArray0[3] = "IC+E/^n35fH>xM4";
      stringArray0[4] = "IC+E/^n35fH>xM4";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "0IG_4P";
      String string1 = StringUtil.normaliseWhitespace("0IG_4P");
      assertEquals("0IG_4P", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = (-1528);
      // Undeclared exception!
      try { 
        StringUtil.padding((-1528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
      
      int int0 = 2320;
      boolean boolean1 = StringUtil.isWhitespace(2320);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isActuallyWhitespace(2320);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtil.isWhitespace((-2850));
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      String string0 = "Q]V";
      stringArray0[1] = "Q]V";
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        StringUtil.inSorted((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtil.padding(4334);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtil.padding(4334);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      boolean boolean0 = StringUtil.in((String) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isWhitespace(4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean2 = StringUtil.in("", stringArray0);
      assertTrue(boolean2);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = StringUtil.padding(4);
      assertEquals("    ", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        StringUtil.padding((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "YvZjC8Z,d1s*$;'Ey)z";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "YaH+W>R7UX 9[#J";
      String string1 = StringUtil.join(stringArray0, "fSNa=f");
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtil.normaliseWhitespace("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      StringBuilder stringBuilder1 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      assertEquals("", stringBuilder1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuilder2.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StringUtil.appendNormalisedWhitespace(stringBuilder2, " ", false);
      assertEquals(" ", stringBuilder1.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(" ", stringBuilder2.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 21;
      boolean boolean0 = StringUtil.isWhitespace(21);
      assertFalse(boolean0);
      
      String string0 = StringUtil.padding(21);
      assertEquals("                     ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtil.isInvisibleChar(21);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtil.padding(14);
      assertEquals("              ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "              ";
      stringArray0[1] = "                     ";
      stringArray0[2] = "nkB;=MJ?(Z-L/";
      boolean boolean2 = StringUtil.inSorted("nkB;=MJ?(Z-L/", stringArray0);
      assertTrue(boolean2);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        StringUtil.join((Collection) null, "k#{Y`Wv(qHxMn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = StringUtil.join(stringArray0, "");
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "z[%0n_Gr";
      String string1 = StringUtil.resolve("z[%0n_Gr", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        StringUtil.join(stringArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtil.resolve((URL) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace((-3201));
      assertFalse(boolean0);
      
      String string0 = "";
      String string1 = StringUtil.normaliseWhitespace("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtil.isNumeric("+%XtTG<-");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isWhitespace((-3201));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = "  ";
      try { 
        StringUtil.resolve((URL) null, "  ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol:   
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(1302);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isBlank("                 ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "U6-+_XSOr/d^c5W\"5\"";
      boolean boolean0 = StringUtil.in("U6-+_XSOr/d^c5W\"5\"", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace((-1502));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h'b/Yk=@wo# ";
      stringArray0[1] = "h'b/Yk=@wo# ";
      boolean boolean0 = StringUtil.inSorted("h'b/Yk=@wo# ", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtil.join(stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
      
      String string0 = "L 4$G_B6h^c";
      try { 
        MockURL.URL((URL) null, "L 4$G_B6h^c");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: L 4$G_B6h^c
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("                ");
      assertFalse(boolean0);
      
      String string0 = StringUtil.padding(1390);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtil.isInvisibleChar(1250);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtil.normaliseWhitespace("                ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(1250));
      
      String string2 = StringUtil.join((Collection) linkedList0, "5wih|sC");
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(linkedList0.contains("5wih|sC"));
      
      boolean boolean2 = StringUtil.isInvisibleChar((-2176));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5wih|sC");
      assertEquals("5wih|sC", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string3 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("5wih|sC", string3);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      StringBuilder stringBuilder1 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("  ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, " ");
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string1 = StringUtil.normaliseWhitespace("+_@X2");
      assertEquals("+_@X2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("  "));
      
      // Undeclared exception!
      try { 
        linkedList0.remove((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtil.join((Iterator) listIterator0, (String) null);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, " fLG')ZUi`<K2MC", true);
      assertEquals("fLG')ZUi`<K2MC", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("j[9");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(3796);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtil.resolve("j[9", "yA1YST\"a5$=J0");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringUtil.padding(1866);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string1 = StringUtil.join(stringArray0, "");
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringUtil.padding(16);
      assertEquals("                ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtil.resolve("/kvU22G$Go#;V]pxm6m", "      ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtil.join((Collection) linkedList0, "     ");
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar((-1020));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace((-1020));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtil.inSorted("                 ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("[$;(Bk',<L");
      assertEquals("[$;(Bk',<L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(301);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtil.resolve((String) null, "c*kj_5)");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank(".ML!{c7[T{27");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".ML!{c7[T{27", uRLStreamHandler0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      URL uRL2 = StringUtil.resolve(uRL1, ".ML!{c7[T{27");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/.ML!{c7[T{27", uRL2.toString());
      assertNull(uRL2.getQuery());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/.ML!{c7[T{27", uRL2.toExternalForm());
      assertNull(uRL2.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotNull(uRL2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-705);
      // Undeclared exception!
      try { 
        StringUtil.padding((-705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "X!7Gm#";
      stringArray0[1] = "             ";
      stringArray0[2] = "             ";
      stringArray0[3] = "Must be false";
      stringArray0[4] = "             ";
      stringArray0[5] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      stringArray0[6] = "Array must not contain any null objects";
      stringArray0[7] = "+p?a";
      stringArray0[8] = "Array must not contain any null objects";
      String string0 = StringUtil.join(stringArray0, "org.jsoup.internal.StringUtil");
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "X!7Gm#");
      assertEquals("X!7Gm#", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-557), (-557));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -557
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("?");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isBlank("h0z&Y2:\tuI");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtil.isWhitespace(1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete(3590, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<String> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string0 = StringUtil.join((Iterator) listIterator0, (String) null);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, " fLG')ZUi`<K2MC", true);
      assertEquals("fLG')ZUi`<K2MC", stringBuilder0.toString());
      
      boolean boolean0 = StringUtil.isInvisibleChar(1418);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(11);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<String> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtil.join((Iterator) listIterator0, (String) null);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, " fLG')ZUi`<K2MC", true);
      assertEquals("fLG')ZUi`<K2MC", stringBuilder0.toString());
      
      boolean boolean0 = StringUtil.isInvisibleChar(1418);
      assertFalse(boolean0);
      
      String string1 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("fLG')ZUi`<K2MC", string1);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtil.isWhitespace(2549);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = StringUtil.isWhitespace((-2350));
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-2350)));
      
      Integer integer0 = new Integer(3217);
      assertEquals(3217, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.add((Object) integer0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedList0.contains((-2350)));
      assertTrue(linkedList0.contains(3217));
      
      String string0 = StringUtil.join((Collection) linkedList0, "@yptO8");
      assertEquals(1, linkedList0.size());
      assertNotNull(string0);
      assertFalse(linkedList0.contains((-2350)));
      assertTrue(linkedList0.contains(3217));
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "?");
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("", uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = StringUtil.in("Must be false", stringArray0);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = 5218;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3260, (CharSequence) "java.lang.Integer@0000000001", 5141, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 3260
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isBlank((String) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.add((Integer) null);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = linkedList0.add((Integer) null);
      assertTrue(boolean3);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Integer integer0 = new Integer(8205);
      assertEquals(8205, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Integer integer1 = new Integer(8205);
      assertEquals(8205, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean4 = StringUtil.isNumeric((String) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean5 = linkedList0.removeIf(predicate3);
      assertFalse(boolean5);
      assertEquals(2, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(linkedList0.contains(8205));
      
      boolean boolean6 = linkedList0.add((Integer) null);
      assertTrue(boolean6);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(linkedList0.contains(8205));
      
      boolean boolean7 = linkedList0.add(integer0);
      assertTrue(boolean7);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(linkedList0.contains(8205));
      
      boolean boolean8 = StringUtil.isInvisibleChar(8205);
      assertTrue(boolean8);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean7);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("CzLd}fed.K5zx{)Cb");
      assertEquals("CzLd}fed.K5zx{)Cb", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CzLd}fed.K5zx{)Cb";
      stringArray0[1] = "CzLd}fed.K5zx{)Cb";
      stringArray0[2] = "CzLd}fed.K5zx{)Cb";
      stringArray0[3] = "CzLd}fed.K5zx{)Cb";
      stringArray0[4] = "CzLd}fed.K5zx{)Cb";
      stringArray0[5] = "CzLd}fed.K5zx{)Cb";
      String string1 = StringUtil.join(stringArray0, "CzLd}fed.K5zx{)Cb");
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtil.in("", stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = StringUtil.in("CzLd}fed.K5zx{)Cb", stringArray0);
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtil.padding(466);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "");
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string3 = StringUtil.padding(466);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "CzLd}fed.K5zx{)Cb";
      stringArray1[2] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "      ";
      stringArray1[6] = "";
      stringArray1[7] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      stringArray1[8] = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ";
      boolean boolean2 = StringUtil.in("", stringArray1);
      assertTrue(boolean2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtil.isBlank("CzLd}fed.K5zx{)Cb");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2157), (CharSequence) "CzLd}fed.K5zx{)Cb");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2157
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtil.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = StringUtil.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = '<';
      charArray0[3] = 'u';
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "'0%Re^\"%MPHx00(", false);
      assertEquals("'0%Re^\"%MPHx00(", stringBuilder0.toString());
      
      boolean boolean3 = StringUtil.isBlank("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "", false);
      assertEquals("'0%Re^\"%MPHx00(", stringBuilder0.toString());
      
      boolean boolean4 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean4);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      boolean boolean5 = linkedList0.add("WMQOs5ZOj");
      assertTrue(boolean5);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      assertFalse(linkedList0.contains(""));
      
      Iterator<String> iterator1 = linkedList0.iterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator1);
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtil.join(iterator1, "");
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtil.join(iterator1, "");
      assertEquals("", string2);
      assertEquals(1, linkedList0.size());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(linkedList0.contains("WMQOs5ZOj"));
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("4~vc}.2=");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4~vc}.2=";
      stringArray0[2] = "4~vc}.2=";
      stringArray0[3] = "4~vc}.2=";
      stringArray0[4] = "4~vc}.2=";
      stringArray0[5] = "4~vc}.2=";
      stringArray0[6] = "4~vc}.2=";
      stringArray0[7] = "4~vc}.2=";
      stringArray0[8] = "4~vc}.2=";
      String string0 = StringUtil.join(stringArray0, "                   ");
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtil.isWhitespace(10);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtil.padding(0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("                ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtil.isActuallyWhitespace(47);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      
      String string0 = StringUtil.resolve("                ", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean2 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringBuilder stringBuilder1 = StringUtil.borrowBuilder();
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      StringBuilder stringBuilder2 = stringBuilder1.append("HW");
      assertEquals("HW", stringBuilder1.toString());
      assertEquals("HW", stringBuilder2.toString());
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StringUtil.appendNormalisedWhitespace(stringBuilder1, "                ", false);
      assertEquals("HW ", stringBuilder1.toString());
      assertSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      
      boolean boolean3 = StringUtil.isNumeric("1)[\" _k7.");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      URL uRL2 = StringUtil.resolve(uRL1, "oh/");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotNull(uRL2);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      
      URL uRL3 = StringUtil.resolve(uRL2, "");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL3.getDefaultPort());
      assertNull(uRL3.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toExternalForm());
      assertEquals((-1), uRL3.getPort());
      assertNull(uRL3.getUserInfo());
      assertEquals("ftp", uRL3.getProtocol());
      assertNull(uRL3.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL3.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL3.getHost());
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL3);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL3, uRL0);
      assertNotSame(uRL3, uRL1);
      assertNotSame(uRL3, uRL2);
      assertNotNull(uRL3);
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL3.equals((Object)uRL0));
      assertTrue(uRL3.equals((Object)uRL2));
      assertFalse(uRL3.equals((Object)uRL1));
      
      String string2 = StringUtil.resolve("", "                ");
      assertEquals("", string2);
      assertNotNull(string2);
      
      URL uRL4 = StringUtil.resolve(uRL2, "");
      assertEquals((-1), uRL4.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getAuthority());
      assertNull(uRL4.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL4.toExternalForm());
      assertEquals("ftp", uRL4.getProtocol());
      assertNull(uRL4.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL4.getHost());
      assertEquals((-1), uRL4.getPort());
      assertNull(uRL4.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("ftp", uRL2.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/oh/oh/", uRL2.toString());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNotSame(uRL4, uRL3);
      assertNotSame(uRL4, uRL0);
      assertNotSame(uRL4, uRL1);
      assertNotSame(uRL4, uRL2);
      assertNotSame(uRL0, uRL3);
      assertNotSame(uRL0, uRL4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL3);
      assertNotSame(uRL1, uRL4);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL3);
      assertNotSame(uRL2, uRL4);
      assertNotNull(uRL4);
      assertTrue(uRL4.equals((Object)uRL2));
      assertFalse(uRL4.equals((Object)uRL0));
      assertFalse(uRL4.equals((Object)uRL1));
      assertTrue(uRL4.equals((Object)uRL3));
      assertFalse(uRL0.equals((Object)uRL3));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL1.equals((Object)uRL3));
      assertFalse(uRL2.equals((Object)uRL1));
      assertTrue(uRL2.equals((Object)uRL3));
      assertFalse(uRL2.equals((Object)uRL0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringUtil.isInvisibleChar(391);
      StringUtil.isWhitespace(391);
      StringUtil.isActuallyWhitespace(21);
      StringUtil.isInvisibleChar(8206);
      String[] stringArray0 = new String[9];
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtil.join(iterator0, "$x:1)gY%AjKfR7)#.*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("hE\"7${Orh/}o-=x!r");
      int int0 = (-1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = 'P';
      charArray0[4] = 'Z';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1), charArray0, 47, 1787);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "org.jsoup.internal.StringUtil";
      stringArray0[1] = "R";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "gub;k?,=yNYmTBDZ";
      StringUtil.join(stringArray0, "org.jsoup.internal.StringUtil");
      int int0 = 1661;
      StringUtil.isActuallyWhitespace(1661);
      StringUtil stringUtil0 = new StringUtil();
      StringUtil.padding(1661);
      String string1 = null;
      // Undeclared exception!
      try { 
        StringUtil.in("~", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
