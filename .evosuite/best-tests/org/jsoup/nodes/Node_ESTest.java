/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:44:58 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w<(", "w<(");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode("w<(");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "w<(", attributes0);
      document0.doSetBaseUri("zo:EW@");
      document0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("sRh");
      Document document1 = document0.normalise();
      Document document2 = (Document)document1.html("gDIddol0|Tt|");
      document2.doSetBaseUri("gDIddol0|Tt|");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      StringWriter stringWriter0 = new StringWriter(0);
      Pattern.compile("", 0);
      Document document3 = Document.createShell("");
      Document document4 = document3.clone();
      document4.absUrl("sRh");
      document2.hasParent();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      Tag tag0 = document1.tag();
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      comment0.clone();
      comment0.toString();
      document0.title();
      DocumentType documentType0 = new DocumentType("", "", "R", (String) null, "span");
      // Undeclared exception!
      try { 
        documentType0.after("EndTag");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comment comment0 = new Comment("MuWFEY,:");
      comment0.hasSameValue("MuWFEY,:");
      comment0.toString();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      DataNode dataNode0 = new DataNode("MuWFEY,:", "MuWFEY,:");
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        comment0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      Node node0 = element0.clearAttributes();
      element0.after(node0);
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      String string0 = DocumentType.PUBLIC_KEY;
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      Tag tag0 = document2.tag();
      Attributes attributes0 = document2.attributes();
      FormElement formElement0 = new FormElement(tag0, " cwqXq", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      Document document3 = document1.normalise();
      // Undeclared exception!
      try { 
        formElement1.removeChild(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-187276303));
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("abs:jto{,i#)kc%j", "abs:jto{,i#)kc%j");
      parseSettings0.normalizeTag("]W)\"M0V$/R+H");
      parseSettings0.normalizeTag("K6U");
      Element element0 = document0.prependElement("abs:jto{,i#)kc%j");
      element0.tag();
      element0.root();
      Parser.xmlParser();
      Parser.parseFragment("org.jsoup.nodes.Node$1", element0, "abs:jto{,i#)kc%j");
      parseSettings0.normalizeAttribute("+");
      Pattern pattern0 = Pattern.compile("]W)\"M0V$/R+H", (-187276303));
      Pattern.matches("rg.jsoup.nodes.Nod", "rg.jsoup.nodes.Nod");
      element0.getElementsMatchingOwnText(pattern0);
      document0.toString();
      element0.childNodeSize();
      element0.after((Node) document0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      document0.html();
      Tag tag0 = document1.tag();
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      // Undeclared exception!
      try { 
        comment0.indent((Appendable) null, (-3239), document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      String string0 = "";
      document0.childNodeSize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$OuterHtmlVisitor", false);
      xmlDeclaration0.nodeName();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Node$OuterHtmlVisitor");
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        document0.after("B&m/HC':,M:;aVSo;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      element0.clearAttributes();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "name");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      Tag tag0 = document2.tag();
      Attributes attributes0 = document2.attributes();
      FormElement formElement0 = new FormElement(tag0, " cwqXq", attributes0);
      Comment comment0 = new Comment(" cwqXq", "riNs");
      comment0.parentNode = (Node) document1;
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.toString();
      FormElement formElement1 = formElement0.addElement(document0);
      Document document3 = document2.clone();
      document2.updateMetaCharsetElement();
      // Undeclared exception!
      try { 
        formElement1.removeChild(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      element0.clearAttributes();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      String string0 = DocumentType.SYSTEM_KEY;
      document0.hasSameValue(textNode0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      document0.clone();
      document0.dataNodes();
      // Undeclared exception!
      try { 
        textNode0.setParentNode((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "riNsvq VXOOV]b");
      document0.ownText();
      document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.hasSameValue(document1);
      Element element0 = document1.tagName("riNsvq VXOOV]b");
      element0.hasAttr("riNsvq VXOOV]b");
      // Undeclared exception!
      try { 
        element0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      Tag tag0 = document1.tag();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$IsNthChild", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      document1.tagName("HEAD");
      // Undeclared exception!
      try { 
        comment0.addChildren(15, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      document0.parent();
      element0.replaceWith(textNode0);
      document0.children();
      // Undeclared exception!
      try { 
        element0.wrap("JtO{,I#)kC%J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragmentRelaxed("attributeNameCharsSorted", "attributeNameCharsSorted");
      document0.absUrl("attributeNameCharsSorted");
      TextNode.stripLeadingWhitespace("org.jsoup.nodes.Node");
      document0.toggleClass("abs:=#~:");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '0';
      charArray0[2] = 'B';
      charArray0[3] = 'L';
      charArray0[4] = '*';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-12), charArray0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextNode textNode0 = new TextNode("hR3");
      Document document0 = Document.createShell("hR3");
      Element element0 = document0.head();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      document0.hasSameValue(textNode0);
      document0.dataNodes();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      element0.addChildren(nodeArray0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      document0.getElementsByIndexGreaterThan((-445));
      int int0 = (-1885);
      Document.OutputSettings document_OutputSettings0 = null;
      String string0 = "*pz4";
      // Undeclared exception!
      try { 
        Pattern.compile("JtO{,I#)kC%J");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // JtO{,I#)kC%J
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      document1.getElementById("f");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("#data", "v");
      Document document1 = document0.clone();
      document0.cssSelector();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(970);
      Document document2 = document1.parser(parser1);
      document2.parentNode = (Node) document1;
      // Undeclared exception!
      document2.parentNode.root();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      element0.clearAttributes();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      Tag tag0 = document2.tag();
      Attributes attributes0 = document2.attributes();
      FormElement formElement0 = new FormElement(tag0, " cwqXq", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      Document document3 = document1.normalise();
      // Undeclared exception!
      try { 
        formElement1.removeChild(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentType documentType0 = new DocumentType(";)@", ";)@", ";)@");
      Node node0 = documentType0.clearAttributes();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.childNodes();
      node0.setBaseUri("#declaration");
      documentType0.nodeName();
      Document document0 = Parser.parseBodyFragmentRelaxed(";)@", "#declaration");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.empty();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.previousElementSibling();
      element0.html("abs:data-");
      int int0 = (-452);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-452));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CDataNode cDataNode0 = new CDataNode("7(thV,Zh");
      Document document0 = new Document("7(thV,Zh");
      document0.doSetBaseUri("7(thV,Zh");
      document0.outerHtml();
      Document document1 = document0.normalise();
      document1.wholeText();
      document1.val();
      // Undeclared exception!
      try { 
        document0.before("7(thV,Zh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("]xX`n");
      Element element0 = document0.val("]xX`n");
      document0.setParentNode(element0);
      document0.children();
      String string0 = "u\\u\\h:[iV'r:=pfWlhC";
      Document document1 = (Document)document0.removeClass(string0);
      document1.nodelistChanged();
      document1.title();
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("v=N4]wQ", "");
      Document document1 = document0.clone();
      document0.getElementsByAttributeStarting("abs:");
      Element element0 = document1.appendElement("(5us");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.traverse(nodeVisitor0);
      element0.data();
      element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("v=N4]wQ", "");
      Document document1 = document0.clone();
      document0.getElementsByAttributeStarting("abs:");
      Element element0 = document1.appendElement("(5us");
      Document document2 = Parser.parseBodyFragment("abs:", "v=N4]wQ");
      element0.before((Node) document2);
      element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "f#";
      CDataNode cDataNode0 = new CDataNode("f#");
      String string1 = "6$@oVPixB;9ER6f1";
      // Undeclared exception!
      try { 
        cDataNode0.wrap("6$@oVPixB;9ER6f1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "EZSD- *ub6mu";
      Document document0 = Document.createShell("EZSD- *ub6mu");
      Attributes attributes0 = document0.attributes();
      Document document1 = (Document)document0.appendText("org.jsoup.nodes.Nod$1");
      Tag tag0 = Tag.valueOf("on");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormElement formElement0 = new FormElement(tag0, "EZSD- *ub6mu", attributes0);
      attributes0.removeIgnoreCase("on");
      formElement0.addElement(document1);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("on", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      // Undeclared exception!
      try { 
        document1.indent(outputStreamWriter0, (-1125171339), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$1";
      Document document0 = new Document("org.jsoup.nodes.Node$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document document1 = document0.normalise();
      Element element0 = document1.removeClass("org.jsoup.nodes.Node$1");
      element0.prependChild(document0);
      element0.elementSiblingIndex();
      // Undeclared exception!
      document1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DataNode dataNode0 = new DataNode((String) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(1500);
      dataNode0.html(stringWriter0);
      dataNode0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("?", "$VALUES", "$VALUES");
      DocumentType documentType1 = new DocumentType("?", "?", "?");
      Node[] nodeArray0 = new Node[6];
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-1466));
      Document document0 = parser1.parseInput("PUBLIC", "");
      document0.previousElementSibling();
      nodeArray0[2] = (Node) null;
      nodeArray0[3] = (Node) documentType1;
      nodeArray0[4] = (Node) documentType1;
      nodeArray0[5] = (Node) documentType1;
      // Undeclared exception!
      try { 
        documentType1.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      document0.children();
      document0.tagName();
      element0.tagName(")]G+:nlXp\"LU=){Z");
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#root");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      document1.parentNode();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      Tag tag0 = document1.tag();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("org.jsoup.select.Evaluator$IsNthChild", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      comment0.childNodesCopy();
      comment0.toString();
      document1.setParentNode(formElement0);
      document0.title();
      DocumentType documentType0 = new DocumentType("", "", "R", (String) null, "span");
      document0.outputSettings();
      documentType0.setPubSysKey("");
      // Undeclared exception!
      try { 
        formElement0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$1";
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node$1", "GJ(<S");
      TextNode textNode1 = textNode0.text("GJ(<S");
      textNode0.coreValue();
      textNode0.toString();
      textNode1.setBaseUri("ej}Q< iA(k>Fsx");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter();
      textNode1.text("GJ(<S");
      StringWriter stringWriter1 = stringWriter0.append(' ');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "GJ(<S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      textNode0.outerHtmlTail(mockPrintWriter0, (-108), document_OutputSettings0);
      Tag.valueOf("GJ(&lt;S");
      document_OutputSettings0.encoder();
      // Undeclared exception!
      try { 
        Charset.forName("]5Ns\"ll1Io~KobNZwl$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]5Ns\"ll1Io~KobNZwl$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$OuterHtmlVisitor", false);
      Node node0 = xmlDeclaration0.shallowClone();
      xmlDeclaration0.childNodesAsArray();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.jsoup.nodes.Node$OuterHtmlVisitor");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      node0.equals(bufferedWriter0);
      TextNode textNode0 = new TextNode("org.jsoup.nodes.Node");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      textNode0.outerHtmlHead(charArrayWriter0, 0, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("EZSD- *ub6mu", "EZSD- *ub6mu");
      Attributes attributes0 = document0.attributes();
      attributes0.put("org.jsoup.parser.CharacterReader", true);
      Element element0 = document0.appendText("org.jsoup.nodes.Node$1");
      Tag tag0 = Tag.valueOf("on");
      FormElement formElement0 = new FormElement(tag0, "EZSD- *ub6mu", attributes0);
      attributes0.removeIgnoreCase("on");
      formElement0.addElement(element0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      formElement0.clone();
      Node node0 = element0.filter(nodeFilter0);
      node0.childNodes();
      MockFileWriter mockFileWriter0 = new MockFileWriter("iQ*Yyf_hr");
      formElement0.html(mockFileWriter0);
      element0.getElementsByAttributeValueContaining("abs:1*w", "EZSD- *ub6mu");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.htmlParser();
      Parser.unescapeEntities("org.jsoup.parser.Tag", true);
      Document document0 = parser0.parseInput("Unexpected token [%s] when in state [%s]", "Unexpected token [%s] when in state [%s]");
      String string0 = "";
      Parser.parseXmlFragment("", "org.jsoup.parser.Tag");
      Document document1 = document0.parser(parser0);
      Document document2 = document1.normalise();
      Document document3 = (Document)document2.text("Unexpected token [%s] when in state [%s]");
      document3.clearAttributes();
      document1.previousElementSiblings();
      document0.outputSettings();
      Document document4 = (Document)document3.attr("Unexpected token [%s] when in state [%s]", "org.jsoup.parser.Tag");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document4.traverse(nodeVisitor0);
      document2.dataNodes();
      document3.shallowClone();
      document3.classNames();
      document2.textNodes();
      DocumentType documentType0 = new DocumentType("'&Vb*%ei6 xu#+0XJ8m", "F2Pb[;", "");
      StringBuilder stringBuilder0 = new StringBuilder("SYSTEM");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-442), (float) (-442));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -442
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextNode.normaliseWhitespace("Unexpected token type: ");
      String string0 = "q/?[";
      Document document0 = Parser.parseBodyFragmentRelaxed("q/?[", "q/?[");
      Document document1 = (Document)document0.removeClass("pr}0vq44/TQ;az2<");
      document1.getElementsContainingText("Unexpected token type: ");
      DataNode dataNode0 = new DataNode("Unexpected token type: ");
      dataNode0.doClone(document1);
      dataNode0.toString();
      // Undeclared exception!
      try { 
        document0.selectFirst("Unexpected token type: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'type:': unexpected token at ':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "IhW~Pc$3!";
      DataNode dataNode0 = new DataNode("IhW~Pc$3!");
      TextNode textNode0 = TextNode.createFromEncoded("IhW~Pc$3!", "");
      // Undeclared exception!
      try { 
        textNode0.before((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("{U-g", "{U-g");
      Parser parser0 = Parser.htmlParser();
      int int0 = 0;
      Parser parser1 = parser0.setTrackErrors(0);
      Document document1 = document0.parser(parser1);
      Document document2 = document1.clone();
      document0.empty();
      document2.childNodes();
      Parser.htmlParser();
      Element element0 = document2.tagName("{U-g");
      element0.prependChild(document1);
      document1.outerHtml();
      CDataNode cDataNode0 = new CDataNode("");
      MockFile mockFile0 = new MockFile(".SxP_F*R|j*;8");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "IhW~Pc$3!";
      DataNode dataNode0 = new DataNode("IhW~Pc$3!");
      TextNode textNode0 = TextNode.createFromEncoded("IhW~Pc$3!", "");
      // Undeclared exception!
      try { 
        textNode0.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = true;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      xmlDeclaration0.parentNode = (Node) document0;
      String string0 = "org.jsoup.nodes.Node$1";
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      xmlDeclaration0.childNodes();
      // Undeclared exception!
      try { 
        xmlDeclaration0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.XmlDeclaration", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      String string0 = "abs:";
      parser0.setTrackErrors((-4645));
      Document document1 = parser0.parseInput("abs:", "abs:");
      document1.previousElementSiblings();
      Element element0 = document1.appendElement("abs:");
      element0.remove();
      document1.tagName();
      parser0.parseFragmentInput("extended", document0, "");
      element0.parents();
      document1.hasText();
      // Undeclared exception!
      try { 
        document1.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#text", "#text");
      document0.prependElement("#text");
      document0.classNames();
      document0.removeClass("Q");
      Tag tag0 = document0.tag();
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "zb%", attributes0);
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "C]oH/&4U5q]t8pH";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("9/", "C]oH/&4U5q]t8pH", true);
      xmlDeclaration0.childNodesAsArray();
      xmlDeclaration0.childNodes();
      Tag tag0 = Tag.valueOf("C]oH/&4U5q]t8pH");
      CDataNode cDataNode0 = new CDataNode("-FwDkt&0zS8k9$");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      cDataNode0.coreValue("C]oH/&4U5q]t8pH");
      Attributes attributes2 = attributes1.put("C]oH/&4U5q]t8pH", false);
      attributes2.hasKey("C]oH/&4U5q]t8pH");
      attributes1.removeIgnoreCase("C]oH/&4U5q]t8pH");
      FormElement formElement0 = new FormElement(tag0, "abs:", attributes2);
      formElement0.children();
      Document document0 = Parser.parse("", "abs:");
      document0.head();
      // Undeclared exception!
      try { 
        cDataNode0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("(K=g8g/R8:8T/e");
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '1';
      charArray0[2] = 'c';
      charArray0[3] = 'U';
      charArray0[4] = 'B';
      charArray0[5] = 'C';
      charArray0[6] = 'c';
      charArray0[7] = 'E';
      charArray0[8] = '@';
      stringReader0.read(charArray0);
      String string0 = "";
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comment comment0 = new Comment("MuWFEY,:");
      comment0.hasSameValue("MuWFEY,:");
      comment0.toString();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      int int0 = 0;
      // Undeclared exception!
      try { 
        comment0.after("\n<!--MuWFEY,:-->");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextNode textNode0 = new TextNode(".");
      Document document0 = Parser.parseBodyFragment(".", ".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document document2 = (Document)document1.prependChild(textNode0);
      document_OutputSettings2.charset(charset0);
      document2.reparentChild(textNode0);
      document2.val();
      document0.normalise();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(".", false);
      xmlDeclaration0.getWholeDeclaration();
      document1.getElementsContainingOwnText("");
      document1.tag();
      Comment comment0 = new Comment("", "");
      comment0.reparentChild(document2);
      Appendable appendable0 = null;
      comment0.outerHtmlTail((Appendable) null, 0, document_OutputSettings1);
      document1.hasSameValue(textNode0);
      String string0 = null;
      String string1 = "org.jsoup.nodes.Node";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, "org.jsoup.nodes.Node");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      Tag tag0 = document1.tag();
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      comment0.toString();
      document1.setParentNode(formElement0);
      document0.title();
      DocumentType documentType0 = new DocumentType("", "", "R", (String) null, "span");
      documentType0.setPubSysKey("");
      // Undeclared exception!
      try { 
        formElement0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("oyYoEU_ES.;/R");
      document0.baseUri();
      document0.getElementsByIndexLessThan(1956);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.location();
      document0.children();
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.toString();
      // Undeclared exception!
      try { 
        comment0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "$VALUES";
      DocumentType documentType0 = new DocumentType("", "$VALUES", "$VALUES");
      DocumentType documentType1 = new DocumentType("", "", "");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) documentType0;
      nodeArray0[1] = (Node) documentType1;
      Parser parser0 = Parser.xmlParser();
      int int0 = (-1466);
      Parser parser1 = parser0.setTrackErrors((-1466));
      Document document0 = parser1.parseInput("PUBLIC", "");
      document0.previousElementSibling();
      nodeArray0[2] = (Node) null;
      nodeArray0[3] = (Node) documentType1;
      nodeArray0[4] = (Node) documentType1;
      nodeArray0[5] = (Node) documentType1;
      // Undeclared exception!
      try { 
        documentType1.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Document document1 = (Document)document0.attr("", "");
      Comment comment0 = new Comment("", "");
      // Undeclared exception!
      try { 
        comment0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("systemId");
      Tag tag0 = Tag.valueOf("systemId", parseSettings0);
      Tag.valueOf("$S5XUw,}Wo,;rOpG", parseSettings0);
      Element element0 = new Element(tag0, "$S5XUw,}Wo,;rOpG");
      tag0.getName();
      element0.doSetBaseUri("systemId");
      Tag.valueOf("Q0J`K>lE/c1$EHo&");
      parseSettings0.normalizeTag("$S5XUw,}Wo,;rOpG");
      element0.nextSibling();
      element0.children();
      element0.clearAttributes();
      element0.parents();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = element0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        node0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DataNode dataNode0 = new DataNode((String) null, (String) null);
      dataNode0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("VrX dt:zfIQ5");
      cDataNode0.nodelistChanged();
      cDataNode0.text("VrX dt:zfIQ5");
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "VrX dt:zfIQ5");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("blXf*Idm", "blXf*Idm");
      List<Node> list0 = document0.ensureChildNodes();
      document0.childNodes = list0;
      document0.title("rJdeTxrCB");
      document0.parser();
      document0.parent();
      document0.text("blXf*Idm");
      CDataNode cDataNode0 = new CDataNode("7*Ab");
      String string0 = (String)cDataNode0.value;
      document0.hasSameValue("7*Ab");
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = (Document)document0.text("");
      document1.equals("");
      int int0 = (-577);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      Tag tag0 = null;
      String string0 = "x";
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "value";
      DocumentType documentType0 = new DocumentType("em", "GXy|M_", "value", "");
      StringWriter stringWriter0 = new StringWriter();
      String string1 = "X$/]iOS_DO|c~";
      stringWriter0.write("X$/]iOS_DO|c~", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      documentType0.siblingNodes();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      document_OutputSettings1.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.clone();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlTail(stringWriter0, 0, document_OutputSettings4);
      Document document0 = Parser.parse("d$6\"-eZ%L+(!^", "PUBLIC");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "ILWza";
      Document document0 = Document.createShell("ILWza");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.getElementsContainingOwnText("org.jsoup.nodes.Node$1");
      Document document1 = (Document)document0.doClone(element0);
      // Undeclared exception!
      try { 
        document1.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      Comment comment0 = new Comment("");
      Element element0 = document0.prependChild(comment0);
      Element element1 = element0.prependText("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element1.getElementsMatchingOwnText("");
      document_OutputSettings0.prettyPrint(false);
      Node node0 = document0.clearAttributes();
      node0.siblingIndex = 174;
      document_OutputSettings0.indentAmount(1587);
      document0.outputSettings(document_OutputSettings0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        comment0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node";
      Document document0 = new Document("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = "abs:";
      Document document0 = parser1.parseInput("abs:", "abs:");
      String string1 = "";
      document0.cssSelector();
      Element element0 = document0.prepend("#root");
      // Undeclared exception!
      try { 
        document0.replaceWith(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("@f");
      TextNode textNode0 = cDataNode0.text("@f");
      textNode0.nextSibling();
      Comment comment0 = new Comment("org.jsoup.select.Evaluator$CssNthEvaluator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@f");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(173);
      comment0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      element0.getElementsByIndexEquals(0);
      document0.getElementsByIndexGreaterThan(0);
      element0.children();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.addChildren(0, nodeArray0);
      DataNode dataNode0 = new DataNode("", "");
      Element element1 = document0.prependText("org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        dataNode0.replaceChild(element0, element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      textNode0.setBaseUri("");
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      String string0 = null;
      document0.setParentNode(textNode0);
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.replaceChild(textNode0, textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = "l0:`#EqKIsoq]vb";
      Document document0 = parser1.parseInput("l0:`#EqKIsoq]vb", "l0:`#EqKIsoq]vb");
      Element element0 = document0.head();
      element0.nextElementSibling();
      // Undeclared exception!
      try { 
        element0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      Element element0 = document0.head();
      Comment comment0 = new Comment(">D(Sqb;*k+/]Hf@c", ">D(Sqb;*k+/]Hf@c");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) comment0;
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) comment0;
      // Undeclared exception!
      try { 
        comment0.addChildren((-2741), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      element0.tagName(")]G+:nlXp\"LU=){Z");
      document0.hasSameValue(textNode0);
      document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Comment comment0 = new Comment("");
      // Undeclared exception!
      try { 
        comment0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      parser0.parseFragmentInput("", document0, "");
      Element element0 = document1.prependElement("rwpY;*{:{'k+?Q");
      element0.getElementsMatchingText("");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      DocumentType documentType0 = new DocumentType("", "", "tt8vuENb!i", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'P';
      charArray0[2] = '6';
      charArray0[3] = 'U';
      mockPrintStream0.print(charArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      documentType0.outerHtmlTail(outputStreamWriter0, 0, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document document1 = document0.parser((Parser) null);
      Document document2 = document1.normalise();
      Element element0 = document2.appendTo(document0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document1.quirksMode(document_QuirksMode0);
      element0.previousSibling();
      element0.classNames();
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueStarting("", ",?J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextNode.createFromEncoded("", "");
      Document document0 = Document.createShell("");
      String string0 = null;
      document0.childNodesCopy();
      document0.previousSibling();
      document0.addClass("fallback");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ym", "Ym");
      Element element0 = document0.prependText("Ym");
      element0.cssSelector();
      Element element1 = element0.prependElement("Ym");
      element1.appendChild(element0);
      element1.after((Node) element0);
      element0.prependChild(element1);
      document0.empty();
      CDataNode cDataNode0 = new CDataNode("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("64J/Jdxv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(".24=v}Q6H6JFR", "<+W<X:eWEwm8:_Mg?+", ".24=v}Q6H6JFR", "", "<+W<X:eWEwm8:_Mg?+");
      String string0 = "";
      Comment comment0 = new Comment(".24=v}Q6H6JFR", "");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "$!n|p-kA16@a,";
      Document document0 = Parser.parse("$!n|p-kA16@a,", "$!n|p-kA16@a,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document1.before("$!n|p-kA16@a,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("rM6B_})sUJQej QMu", "rM6B_})sUJQej QMu");
      document0.title();
      document0.textNodes();
      document0.getElementsByAttribute("j>h");
      document0.outerHtml();
      Node node0 = document0.clone();
      node0.childNodes();
      Document document1 = Document.createShell("");
      node0.nodeName();
      // Undeclared exception!
      try { 
        document1.wrap("<html>\n <head></head>\n <body>\n  rM6B_})sUJQej QMu\n </body>\n</html>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg7`|Q]/cL/X", "Lg7`|Q]/cL/X");
      Document document1 = document0.clone();
      String string0 = "f#";
      document1.prependElement("f#");
      document1.childNodes();
      document0.hasText();
      // Undeclared exception!
      try { 
        document1.wrap("Lg7`|Q]/cL/X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#text");
      CDataNode cDataNode0 = new CDataNode("#text");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#text", attributes0);
      formElement0.childNodes();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "j(s%gN((U}<83P-{";
      Document document0 = Parser.parseBodyFragment("*%9J-#bV7.D", "j(s%gN((U}<83P-{");
      String string1 = "";
      document0.val("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.prepareEncoder();
      document_OutputSettings0.outline(true);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document1.toString();
      Element element0 = document3.empty();
      element0.getElementsByAttributeValueMatching("*%9J-#bV7.D", (Pattern) null);
      Element element1 = document3.appendText("&WZ`0rh{*::/FB2#iG");
      Document document4 = (Document)document1.root();
      Node[] nodeArray0 = new Node[5];
      Document document5 = new Document("&WZ`0rh{*::/FB2#iG");
      nodeArray0[0] = (Node) document5;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document4;
      // Undeclared exception!
      try { 
        document4.addChildren(1283, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.normalise();
      document1.toString();
      document1.toString();
      document1.setSiblingIndex(353);
      document1.updateMetaCharsetElement();
      document0.nodeName();
      document0.childNodesAsArray();
      document0.addClass("#document");
      Tag tag0 = document0.tag();
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(document0);
      // Undeclared exception!
      try { 
        formElement1.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "#text";
      Document document0 = Parser.parseBodyFragmentRelaxed("w(iM)z(DT@Q'e", "#text");
      Node node0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "w(iM)z(DT@Q'e");
      document0.outerHtml((Appendable) stringWriter1);
      String string1 = "";
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "d~ew\\kW@>Vz:@'.\\W";
      Document document0 = parser0.parseInput("d~ewkW@>Vz:@'.W", "d~ewkW@>Vz:@'.W");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document1.classNames(set0);
      Charset.defaultCharset();
      document0.getElementById("d~ewkW@>Vz:@'.W");
      int int0 = (-9);
      Parser.unescapeEntities("", true);
      // Undeclared exception!
      try { 
        element0.childNode((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yo>", "Yo>");
      Document document1 = document0.normalise();
      document0.cssSelector();
      Document document2 = (Document)document1.toggleClass("");
      document2.hasAttributes();
      document1.attr("Yo>");
      String string0 = "async";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("async", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "A0I2C`>VKDb(\"tq;0l";
      Comment comment0 = new Comment("A0I2C`>VKDb(\"tq;0l", "A0I2C`>VKDb(\"tq;0l");
      comment0.outerHtml();
      comment0.toString();
      Document document0 = Document.createShell("\n<!--A0I2C`>VKDb(\"tq;0l-->");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("p", "p");
      Document document1 = document0.parser(parser0);
      document1.attr("!d<@a_\"6J");
      document1.clearAttributes();
      document1.getElementsMatchingText("p");
      document0.getElementsByAttributeValueStarting("1*W", "0hvFu,r-SV^N>nor7_");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "");
      documentType0.siblingIndex();
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "org.jsoup.helper.W3CDom";
      Comment comment0 = new Comment("3VT[Wf7+", "org.jsoup.helper.W3CDom");
      // Undeclared exception!
      try { 
        comment0.childNode(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      String string0 = "";
      // Undeclared exception!
      try { 
        dataNode0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node$OuterHtmlVisitor", "button");
      Element element0 = document0.removeClass("button");
      element0.siblingElements();
      element0.attributes();
      document0.getElementsByIndexGreaterThan((-3633));
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.is((Evaluator) evaluator_TagEndsWith0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comment comment0 = new Comment("'(%(", "'(%(");
      comment0.attributes();
      comment0.siblingIndex = 438;
      comment0.isXmlDeclaration();
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(")KzTKU;)Yl(A", "option[selected]", "option[selected]");
      documentType0.attr("org.jsoup.nodes.Node$OuterHtmlVisitor");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("9iM=)E<:pMxUh8M@S0", "");
      document0.setSiblingIndex(0);
      Element element0 = document0.append("hnh(b$9b^`.ip'<");
      element0.prependElement("9iM=)E<:pMxUh8M@S0");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q&U^g{", "Q&U^g{");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.after("Q&U^g{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("(_jQ2]ng-dB.w3V]");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.title();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.nodeName();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.head();
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Comment comment0 = new Comment("{y", "{y");
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "cwqX";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cwqX");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cwqX");
      String string1 = "-KUW";
      Document document0 = Parser.parseBodyFragment("-KUW", "-KUW");
      // Undeclared exception!
      try { 
        document0.before("cwqX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document0 = Parser.parseBodyFragment("CharacterReferenceInData", "2']_k^:M!( 8HAPz=lt");
      document0.getAllElements();
      int int0 = (-3431);
      Pattern pattern0 = Pattern.compile("CharacterReferenceInData", (-3431));
      Pattern.compile("CharacterReferenceInData");
      document0.getElementsMatchingOwnText(pattern0);
      Element element0 = document0.head();
      element0.before((Node) document0);
      Comment comment0 = new Comment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-3431));
      int int1 = 177;
      // Undeclared exception!
      try { 
        stringBuilder1.deleteCharAt(177);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 177
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("-?(U&`");
      document0.removeAttr("org.");
      Element element0 = document0.append("-?(U&`");
      // Undeclared exception!
      try { 
        element0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-187276303));
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("abs:jto{,i#)kc%j", "abs:jto{,i#)kc%j");
      parseSettings0.normalizeTag("]W)\"M0V$/R+H");
      parseSettings0.normalizeTag("K6U");
      Element element0 = document0.prependElement("abs:jto{,i#)kc%j");
      element0.tag();
      element0.root();
      Parser.xmlParser();
      Parser.parseFragment("org.jsoup.nodes.Node$1", element0, "abs:jto{,i#)kc%j");
      parseSettings0.normalizeAttribute("+");
      Pattern pattern0 = Pattern.compile("]W)\"M0V$/R+H", (-187276303));
      element0.getElementsMatchingOwnText(pattern0);
      document0.toString();
      element0.childNodeSize();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("#data", "v");
      Document document1 = document0.clone();
      document0.cssSelector();
      Parser parser0 = Parser.htmlParser();
      Pattern pattern0 = Pattern.compile("%a(.J", 726);
      document1.getElementsByAttributeValueMatching("v", pattern0);
      Parser parser1 = parser0.setTrackErrors(964);
      Document document2 = document1.parser(parser1);
      // Undeclared exception!
      try { 
        document2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = document0.clone();
      document0.toggleClass("org.jsoup.select.Evaluator$IsNthChild");
      Tag tag0 = document1.tag();
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.data();
      Comment comment0 = new Comment("", "");
      comment0.toString();
      DocumentType documentType0 = new DocumentType("", "", "R", (String) null, "span");
      // Undeclared exception!
      try { 
        documentType0.after("EndTag");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextNode textNode0 = new TextNode("@");
      Document document0 = Document.createShell("@");
      Element element0 = document0.head();
      element0.clearAttributes();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      String string0 = DocumentType.PUBLIC_KEY;
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      Tag tag0 = document2.tag();
      Attributes attributes0 = document2.attributes();
      FormElement formElement0 = new FormElement(tag0, " cwqXq", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      Document document3 = document1.normalise();
      // Undeclared exception!
      try { 
        formElement1.removeChild(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextNode textNode0 = new TextNode("f");
      Document document0 = Document.createShell("f");
      Element element0 = document0.head();
      element0.clearAttributes();
      document0.children();
      element0.wrap("JtO{,I#)kC%J");
      document0.tagName();
      document0.hasSameValue(textNode0);
      Document document1 = document0.clone();
      document0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      StringBuilder stringBuilder0 = new StringBuilder("=\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "name");
      textNode0.outerHtmlTail(stringBuilder0, (-1885), (Document.OutputSettings) null);
      Tag tag0 = document2.tag();
      Attributes attributes0 = document2.attributes();
      FormElement formElement0 = new FormElement(tag0, " cwqXq", attributes0);
      Comment comment0 = new Comment(" cwqXq", "YWL");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.toString();
      FormElement formElement1 = formElement0.addElement(document0);
      Document document3 = document1.normalise();
      // Undeclared exception!
      try { 
        formElement1.removeChild(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      char[] charArray0 = new char[0];
      TextNode textNode0 = new TextNode("B^`|C!SEf1#LU4{jou1", "_R0S?5I{%pL&");
      textNode0.absUrl("abs:v");
      DocumentType documentType0 = new DocumentType("data-", "", "^$>Id%M3@:+!aR");
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("9");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comment comment0 = new Comment("F(gDIddol0|#Tt|5");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      String string0 = null;
      document0.setParentNode(textNode0);
      document0.childNodesCopy();
      document0.previousSibling();
      document0.addClass("fallback");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
