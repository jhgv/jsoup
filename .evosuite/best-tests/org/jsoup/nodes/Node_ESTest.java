/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 11:58:37 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("ydl#`|QE'Pth");
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.nodes.Node");
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.addClass("org.jsoup.nodes.Node");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ydl#`|QE'Pth", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      Set<String> set0 = element0.classNames();
      assertSame(element0, element1);
      assertFalse(set0.contains("org.jsoup.nodes.Node"));
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      String string0 = document0.outerHtml();
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertNotNull(string0);
      
      document0.hashCode();
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      assertEquals("org.jsoup.nodes.Node", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("", comment0.baseUri());
      assertNotNull(comment0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append(4335.652591);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("4335.652591", stringBuilder0.toString());
      assertEquals("4335.652591", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder1.insert(0, "YQVkwOK|^?H");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("YQVkwOK|^?H4335.652591", stringBuilder0.toString());
      assertEquals("YQVkwOK|^?H4335.652591", stringBuilder1.toString());
      assertEquals("YQVkwOK|^?H4335.652591", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, 0L);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertEquals("0YQVkwOK|^?H4335.652591", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H4335.652591", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H4335.652591", stringBuilder3.toString());
      assertEquals("0YQVkwOK|^?H4335.652591", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      
      StringBuilder stringBuilder5 = stringBuilder4.append(0.0F);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder0);
      assertEquals("0YQVkwOK|^?H4335.6525910.0", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0", stringBuilder3.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0", stringBuilder4.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0", stringBuilder5.toString());
      assertNotNull(stringBuilder5);
      
      comment0.outerHtml(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("", comment0.baseUri());
      assertEquals("0YQVkwOK|^?H4335.6525910.0\n<!---->", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0\n<!---->", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0\n<!---->", stringBuilder3.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0\n<!---->", stringBuilder4.toString());
      assertEquals("0YQVkwOK|^?H4335.6525910.0\n<!---->", stringBuilder5.toString());
      
      boolean boolean0 = comment0.equals("");
      assertFalse(boolean0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("", comment0.baseUri());
      
      String string0 = comment0.toString();
      assertEquals("\n<!---->", string0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("", comment0.baseUri());
      assertNotNull(string0);
      
      Node node0 = comment0.attr("YQVkwOK|^?H", "org.jsoup.select.Evaluator$AttributeStarting");
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("", comment0.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertNotNull(node0);
      
      TextNode textNode0 = new TextNode("\n<!---->", ":2m=COs$PD$n");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(":2m=COs$PD$n", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(":2m=COs$PD$n", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      
      Document document0 = Document.createShell("D");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("D", document0.location());
      assertEquals("D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.child(0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("D", document0.location());
      assertEquals("D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("D", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("D", document0.location());
      assertEquals("D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("D", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(3, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.before("org.jsoup.select.Evaluator$IndexEvaluator");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertNotNull(document3);
      
      Document document4 = (Document)document0.doClone(document3);
      assertTrue(document4.equals((Object)document1));
      assertTrue(document4.equals((Object)document0));
      assertTrue(document4.equals((Object)document3));
      assertTrue(document4.equals((Object)document2));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertEquals(4, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("?");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("?", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodesCopy();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("?", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document2 = Document.createShell("");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.attr("?", "");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.appendText("");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("?", document4.location());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("?", document4.baseUri());
      assertNotNull(document4);
      
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = document0.quirksMode();
      assertEquals(Document.QuirksMode.noQuirks, document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertNotNull(string0);
      
      String string1 = document0.tagName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("?");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodesCopy();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Document document2 = (Document)document1.text("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("?", document2.location());
      assertEquals("?", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.attr("?", "");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("?", document2.location());
      assertEquals("?", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document3.location());
      assertEquals("?", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertTrue(document4.equals((Object)document2));
      assertTrue(document4.equals((Object)document1));
      assertTrue(document4.equals((Object)document3));
      assertTrue(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("?", document2.location());
      assertEquals("?", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("?", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      String string0 = document4.outerHtml();
      assertTrue(document0.equals((Object)document4));
      assertTrue(document1.equals((Object)document4));
      assertTrue(document2.equals((Object)document4));
      assertTrue(document4.equals((Object)document2));
      assertTrue(document4.equals((Object)document1));
      assertTrue(document4.equals((Object)document3));
      assertTrue(document4.equals((Object)document0));
      assertEquals("<html>\n <head></head>\n <body>\n </body>\n</html>", string0);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("?", document2.location());
      assertEquals("?", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("?", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(string0);
      
      Document document5 = (Document)document1.appendText("");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("?", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("?", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      
      Elements elements0 = document3.getElementsByIndexGreaterThan(146);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("?", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("?", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("?", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals("?", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = TextNode.normaliseWhitespace("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("ydl#`|QE'Pth");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.nodes.Node");
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Set<String> set0 = element0.classNames();
      assertFalse(set0.contains("ydl#`|QE'Pth"));
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", string0);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      document0.hashCode();
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[7];
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ydl#`|QE'Pth", document1.baseUri());
      assertEquals("ydl#`|QE'Pth", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.removeChild(element0);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      Document document2 = Document.createShell("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>");
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      element0.addChildren(nodeArray0);
      assertTrue(document0.equals((Object)document2));
      assertEquals(7, nodeArray0.length);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(3, element0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      
      document2.hashCode();
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      
      Document document3 = (Document)document2.empty();
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      assertNotNull(document3);
      
      Attributes attributes0 = nodeArray0[6].attributes();
      assertEquals(7, nodeArray0.length);
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("B:3So(ZCX,J");
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("B:3So(ZCX,J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("B:3So(ZCX,J", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = document2.clone();
      assertTrue(document3.equals((Object)document1));
      assertTrue(document3.equals((Object)document2));
      assertTrue(document3.equals((Object)document0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("B:3So(ZCX,J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("B:3So(ZCX,J", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("B:3So(ZCX,J", document3.baseUri());
      assertEquals("B:3So(ZCX,J", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.attr("a9<|YsqHl.~+O?", "a9<|YsqHl.~+O?");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("B:3So(ZCX,J", document4.baseUri());
      assertEquals("B:3So(ZCX,J", document4.location());
      assertNotNull(document4);
      
      Document document5 = (Document)document3.removeClass("B:3So(ZCX,J");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("B:3So(ZCX,J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("B:3So(ZCX,J", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("B:3So(ZCX,J", document3.baseUri());
      assertEquals("B:3So(ZCX,J", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("B:3So(ZCX,J", document5.baseUri());
      assertEquals("B:3So(ZCX,J", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(document5);
      
      String string0 = document5.tagName();
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertEquals("#root", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("B:3So(ZCX,J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("B:3So(ZCX,J", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("B:3So(ZCX,J", document3.baseUri());
      assertEquals("B:3So(ZCX,J", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("B:3So(ZCX,J", document5.baseUri());
      assertEquals("B:3So(ZCX,J", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(string0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("B:3So(ZCX,J", "7~(Wg7^v", true);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("7~(Wg7^v", xmlDeclaration0.baseUri());
      assertNotNull(xmlDeclaration0);
      
      StringBuilder stringBuilder0 = new StringBuilder(1);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((String) null);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      xmlDeclaration0.outerHtmlTail(stringBuilder1, 3, document_OutputSettings0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("7~(Wg7^v", xmlDeclaration0.baseUri());
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      
      XmlDeclaration xmlDeclaration1 = (XmlDeclaration)xmlDeclaration0.removeAttr("#root");
      assertSame(xmlDeclaration0, xmlDeclaration1);
      assertSame(xmlDeclaration1, xmlDeclaration0);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("7~(Wg7^v", xmlDeclaration0.baseUri());
      assertEquals("7~(Wg7^v", xmlDeclaration1.baseUri());
      assertEquals("#declaration", xmlDeclaration1.nodeName());
      assertEquals(0, xmlDeclaration1.childNodeSize());
      assertEquals(0, xmlDeclaration1.siblingIndex());
      assertNotNull(xmlDeclaration1);
      
      Node node0 = document2.previousSibling();
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertEquals("B:3So(ZCX,J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("B:3So(ZCX,J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("B:3So(ZCX,J", document1.location());
      assertEquals("B:3So(ZCX,J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("B:3So(ZCX,J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("B:3So(ZCX,J", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      TextNode textNode0 = TextNode.createFromEncoded("", "jP]w~_d%TgOJpT%,<");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      
      textNode0.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, textNode0.parentNode.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes1);
      
      textNode0.attributes = attributes1;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      Node node0 = textNode0.wrap("jP]w~_d%TgOJpT%,<");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(116);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "zus(";
      Document document0 = new Document("zus(");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zus(", document0.baseUri());
      assertEquals("zus(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("zus(");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("zus(", document0.baseUri());
      assertEquals("zus(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zus(", document1.location());
      assertEquals("zus(", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("zus(", document0.baseUri());
      assertEquals("zus(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zus(", document1.location());
      assertEquals("zus(", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zus(", document2.location());
      assertEquals("zus(", document2.baseUri());
      assertNotNull(document2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      List<Node> list0 = document2.childNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("zus(", document0.baseUri());
      assertEquals("zus(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zus(", document1.location());
      assertEquals("zus(", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zus(", document2.location());
      assertEquals("zus(", document2.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Pattern pattern0 = null;
      // Undeclared exception!
      try { 
        document0.replaceWith(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("#document");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Element element0 = document2.head();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("#document", element0.baseUri());
      assertNotNull(element0);
      
      Document document3 = element0.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("#document", element0.baseUri());
      assertEquals("#document", document3.baseUri());
      assertEquals("#document", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      int int0 = (-2687);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      document3.charset(charset0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.location());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document1.baseUri());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("#document", element0.baseUri());
      assertEquals("#document", document3.baseUri());
      assertEquals("#document", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<DocumentType>((-2687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2687
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.before("org.jsoup.select.Evaluator$IndexEvaluator");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.Node$OuterHtmlVisitor"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document4 = (Document)document3.classNames((Set<String>) linkedHashSet0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.Node$OuterHtmlVisitor"));
      assertEquals("", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.baseUri());
      assertEquals(4, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertNotNull(document4);
      
      String string0 = document0.attr("4/wL/dJr=g'");
      assertEquals("", string0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeValueStarting("", ":uIR/9ihm8P&[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.QuirksMode document_QuirksMode0 = document0.quirksMode();
      assertEquals(Document.QuirksMode.noQuirks, document_QuirksMode0);
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      String string1 = document0.tagName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", string1);
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "audio", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertNotNull(xmlDeclaration0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        xmlDeclaration0.addChildren(128, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2525));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      Document document1 = document0.outputSettings(document_OutputSettings3);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      boolean boolean0 = document2.hasClass("0X/DG$");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      
      DocumentType documentType0 = new DocumentType("", "", "0X/DG$", "0X/DG$");
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("0X/DG$", documentType0.baseUri());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertNotNull(documentType0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = document0.siblingIndex();
      assertEquals(0, int0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-1885), (-1885));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1885
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "r=um?_m]";
      Document document0 = new Document("r=um?_m]");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r=um?_m]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("r=um?_m]", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      document1.setSiblingIndex(8);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(8, document0.siblingIndex());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(8, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r=um?_m]", document1.location());
      assertEquals("r=um?_m]", document1.baseUri());
      assertFalse(document1.isBlock());
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document0));
      assertTrue(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(8, document0.siblingIndex());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(8, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r=um?_m]", document1.location());
      assertEquals("r=um?_m]", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("r=um?_m]", document2.baseUri());
      assertEquals("r=um?_m]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Comment comment0 = new Comment("", "");
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("", comment0.baseUri());
      assertNotNull(comment0);
      
      Node node0 = comment0.removeAttr("r=um?_m]");
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("", comment0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      
      Elements elements1 = document2.getElementsByIndexGreaterThan(0);
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertTrue(document2.equals((Object)document0));
      assertTrue(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(8, document0.siblingIndex());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(8, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r=um?_m]", document1.location());
      assertEquals("r=um?_m]", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("r=um?_m]", document2.baseUri());
      assertEquals("r=um?_m]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      
      document0.setSiblingIndex((-1));
      assertTrue(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("r=um?_m]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r=um?_m]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document2.removeChild(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("|");
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertNotNull(document2);
      
      Element element0 = document2.appendElement(";.5");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.baseUri();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("|", string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|", element0.baseUri());
      assertNotNull(string0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.outline(true);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Charset charset0 = document2.charset();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.charset(charset0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      
      Elements elements0 = document2.getElementsByIndexGreaterThan(0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = (Document)document2.insertChildren(0, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertEquals(3, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("|", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("|", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertNotNull(document_OutputSettings5);
      
      Set<String> set0 = element0.classNames();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertFalse(set0.contains(string0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertEquals("|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("|", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|", element0.baseUri());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Elements elements1 = document0.getAllElements();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertNotNull(elements1);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document1.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("?");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodesCopy();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Document document2 = (Document)document1.text("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.attr("?", "");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("?", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("?", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("?", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.appendText("");
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertEquals("?", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("?", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      
      Elements elements0 = document3.getElementsByIndexGreaterThan(146);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("?", document2.baseUri());
      assertEquals("?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("?", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("?", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node";
      Document document0 = new Document("org.jsoup.nodes.Node");
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", document1.location());
      assertEquals("org.jsoup.nodes.Node", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.tagName("org.jsoup.nodes.Node");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", document1.location());
      assertEquals("org.jsoup.nodes.Node", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Node", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Node", document2.location());
      assertNotNull(document2);
      
      String string1 = "";
      Document document3 = (Document)document2.addClass("");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", document1.location());
      assertEquals("org.jsoup.nodes.Node", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Node", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Node", document2.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.nodes.Node", document3.location());
      assertEquals("org.jsoup.nodes.Node", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertNotNull(document3);
      
      Element element0 = document2.previousElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node", document1.location());
      assertEquals("org.jsoup.nodes.Node", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Node", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Node", document2.location());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("v}xW\"`i>TMr;x\"6j|f1");
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Element element0 = document1.head();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.attr("");
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string0);
      
      String string1 = element0.cssSelector();
      assertFalse(string1.equals((Object)string0));
      assertEquals("html > head", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string1);
      
      document1.title("v}xW\"`i>TMr;x\"6j|f1");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      
      Node node0 = element0.previousSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.baseUri());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertNull(node0);
      
      Elements elements0 = document0.getElementsByIndexEquals((-2565));
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v}xW\"`i>TMr;x\"6j|f1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("s,)R&/T;o}Ql~Q6c8");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.baseUri());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.baseUri());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = "org.jsoup.nodes.Node$1";
      Document document2 = Document.createShell("org.jsoup.nodes.Node$1");
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      document0.reparentChild(document1);
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.baseUri());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document1.baseUri());
      
      boolean boolean0 = document0.equals(document2);
      assertTrue(document0.equals((Object)document2));
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertTrue(boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.baseUri());
      assertEquals("s,)R&/T;o}Ql~Q6c8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      // Undeclared exception!
      try { 
        document1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "C~4?m=IJQz";
      TextNode textNode0 = new TextNode("C~4?m=IJQz", "C~4?m=IJQz");
      assertEquals("C~4?m=IJQz", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("C~4?m=IJQz", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      textNode0.childNodes = list0;
      assertEquals("C~4?m=IJQz", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, textNode0.childNodes.size());
      assertTrue(textNode0.childNodes.isEmpty());
      
      Document document0 = textNode0.ownerDocument();
      assertEquals("C~4?m=IJQz", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) null;
      nodeArray0[1] = (Node) null;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertNotNull(document1);
      
      String string1 = document1.html();
      assertFalse(string1.equals((Object)string0));
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertNotNull(string1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      Document document4 = document3.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document4.addChildren((-792), nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("noresize");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("noresize", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("noresize");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("noresize", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("noresize", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("noresize", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(31);
      assertSame(document0, document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("noresize", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      document1.hashCode();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("noresize", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("noresize", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("noresize", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      
      Elements elements1 = document0.getElementsByAttributeValue("noresize", "noresize");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("noresize", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "jBCz5l1U7^3h";
      String string1 = "#text";
      TextNode textNode0 = new TextNode("jBCz5l1U7^3h", "#text");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("?");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      
      String string2 = "ql2bm=Upr(%G";
      TextNode textNode2 = textNode1.text("ql2bm=Upr(%G");
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        textNode1.before((Node) textNode2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(")|h'");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(")|h'", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(")|h'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(")|h'", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(")|h'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals(")|h'", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(")|h'", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string0 = document2.outerHtml();
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(")|h'", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(")|h'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals(")|h'", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(")|h'", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      
      String string1 = document1.nodeName();
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", string1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(")|h'", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(")|h'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string1);
      
      Elements elements0 = document0.getElementsByClass("&33 X*<B@w0-4'$$(b9");
      assertTrue(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")|h'", document0.baseUri());
      assertEquals(")|h'", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("v#ws", "\"8p%U]<n2w[ J\t&");
      assertEquals("\"8p%U]<n2w[ J\t&", dataNode0.baseUri());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      String string0 = dataNode0.outerHtml();
      assertEquals("v#ws", string0);
      assertEquals("\"8p%U]<n2w[ J\t&", dataNode0.baseUri());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        DataNode.createFromEncoded("\"8p%U]<n2w[ J\t&", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("*2zvZmg|");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      TextNode textNode0 = TextNode.createFromEncoded("*2zvZmg|", "N=~xzehozdhUsw");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("N=~xzehozdhUsw", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = document0.baseUri();
      assertEquals("", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("_hC:'/X$Db,x[+/B\"", "N=~xzehozdhUsw");
      assertEquals("N=~xzehozdhUsw", dataNode0.baseUri());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      long long0 = (-1L);
      StringBuilder stringBuilder2 = stringBuilder1.append((-1L));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("0.0-1", stringBuilder0.toString());
      assertEquals("0.0-1", stringBuilder1.toString());
      assertEquals("0.0-1", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = ';';
      charArray0[2] = 'g';
      charArray0[3] = 'x';
      charArray0[4] = 'g';
      charArray0[5] = '(';
      charArray0[6] = '%';
      charArray0[7] = '[';
      int int0 = 12;
      // Undeclared exception!
      try { 
        stringBuilder2.append(charArray0, 12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.Evaluator$AttributeWithValueEnding", "org.jsoup.select.Evaluator$AttributeWithValueEnding");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueEnding", dataNode0.baseUri());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      String string0 = "(VEryL";
      Node[] nodeArray0 = dataNode0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueEnding", dataNode0.baseUri());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(nodeArray0);
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "(VEryL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals("", string0);
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertNotNull(string0);
      
      Document document1 = (Document)document0.toggleClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TextNode textNode0 = new TextNode("15 ;2][1aE/*p", "abs:");
      assertEquals("abs:", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("abs:", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("abs:", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      TextNode textNode0 = new TextNode("", "jP]w~_d%TgOJpT%,<");
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.wrap("jP]w~_d%TgOJpT%,<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      assertEquals(0, comment0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("", comment0.baseUri());
      assertNotNull(comment0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, "YQVkwOK|^?H");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("YQVkwOK|^?H", stringBuilder0.toString());
      assertEquals("YQVkwOK|^?H", stringBuilder1.toString());
      assertEquals("YQVkwOK|^?H", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (long) 0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals("0YQVkwOK|^?H", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H", stringBuilder2.toString());
      assertEquals("0YQVkwOK|^?H", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder3.append(0.0F);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertEquals("0YQVkwOK|^?H0.0", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H0.0", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H0.0", stringBuilder2.toString());
      assertEquals("0YQVkwOK|^?H0.0", stringBuilder3.toString());
      assertEquals("0YQVkwOK|^?H0.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      
      comment0.outerHtml(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertEquals(0, comment0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("", comment0.baseUri());
      assertEquals("0YQVkwOK|^?H0.0\n<!---->", stringBuilder0.toString());
      assertEquals("0YQVkwOK|^?H0.0\n<!---->", stringBuilder1.toString());
      assertEquals("0YQVkwOK|^?H0.0\n<!---->", stringBuilder2.toString());
      assertEquals("0YQVkwOK|^?H0.0\n<!---->", stringBuilder3.toString());
      assertEquals("0YQVkwOK|^?H0.0\n<!---->", stringBuilder4.toString());
      
      boolean boolean0 = comment0.equals("");
      assertFalse(boolean0);
      assertEquals(0, comment0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("", comment0.baseUri());
      
      String string0 = comment0.toString();
      assertEquals("\n<!---->", string0);
      assertEquals(0, comment0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("", comment0.baseUri());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.before("org.jsoup.select.Evaluator$IndexEvaluator");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      String string0 = "dgh1U3Zmi~tHp5wt./Q";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "-w3\\Lx>895,,[B";
      Document document0 = new Document("-w3Lx>895,,[B");
      assertEquals("-w3Lx>895,,[B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("-w3Lx>895,,[B", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("-w3Lx>895,,[B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("-w3Lx>895,,[B", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("-w3Lx>895,,[B", document1.baseUri());
      assertEquals("-w3Lx>895,,[B", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = null;
      Document document2 = (Document)document0.removeAttr("G");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("-w3Lx>895,,[B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("-w3Lx>895,,[B", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("-w3Lx>895,,[B", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("-w3Lx>895,,[B", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string1 = "#text";
      document2.baseUri = "#text";
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#text", document0.baseUri());
      assertEquals("-w3Lx>895,,[B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#text", document2.baseUri());
      assertEquals("-w3Lx>895,,[B", document2.location());
      assertFalse(document2.isBlock());
      
      Document document3 = (Document)document1.addClass("G");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#text", document0.baseUri());
      assertEquals("-w3Lx>895,,[B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#text", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("-w3Lx>895,,[B", document1.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#text", document3.baseUri());
      assertEquals("-w3Lx>895,,[B", document3.location());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document1.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Tag tag0 = document1.tag();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      
      Elements elements0 = formElement1.children();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node node0 = formElement1.parentNode();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        formElement1.before(" > ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "f-l6NgNuuTs+7<t@";
      TextNode textNode0 = TextNode.createFromEncoded("f-l6NgNuuTs+7<t@", "f-l6NgNuuTs+7<t@");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("f-l6NgNuuTs+7<t@", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Node node0 = null;
      // Undeclared exception!
      try { 
        textNode0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("tbody");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("tbody", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tbody", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("tbody");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tbody", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tbody", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tbody", document1.baseUri());
      assertEquals("tbody", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tbody", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tbody", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tbody", document1.baseUri());
      assertEquals("tbody", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Document document2 = (Document)document1.attr("tbody", "QjAddJz>A^7*c");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tbody", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tbody", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tbody", document1.baseUri());
      assertEquals("tbody", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tbody", document2.baseUri());
      assertEquals("tbody", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Elements elements0 = document1.parents();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tbody", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tbody", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tbody", document1.baseUri());
      assertEquals("tbody", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("tg]");
      assertEquals("tg]", document0.location());
      assertEquals("tg]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Node node0 = document0.parent();
      assertEquals("tg]", document0.location());
      assertEquals("tg]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(node0);
      
      Elements elements0 = document0.getAllElements();
      assertEquals("tg]", document0.location());
      assertEquals("tg]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#)[*&c!BUH}9", "#)[*&c!BUH}9", true);
      assertEquals("#)[*&c!BUH}9", xmlDeclaration0.baseUri());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertNotNull(xmlDeclaration0);
      
      StringBuilder stringBuilder0 = new StringBuilder("tg]");
      assertEquals("tg]", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("tg]", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("tg]", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      int int1 = (-2344);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "#)[*&c!BUH}9", 0, (-2344));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prependText("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = document2.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      
      Document document4 = document3.clone();
      assertTrue(document4.equals((Object)document2));
      assertTrue(document4.equals((Object)document3));
      assertTrue(document4.equals((Object)document1));
      assertTrue(document4.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document4.replaceChild(document0, document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "*Ns>Q,3=Vd)R:P4C&";
      TextNode textNode0 = new TextNode("*Ns>Q,3=Vd)R:P4C&", "*Ns>Q,3=Vd)R:P4C&");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("*Ns>Q,3=Vd)R:P4C&", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("IJt=~OjF6$~u#dE1(W");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("*Ns>Q,3=Vd)R:P4C&", textNode0.baseUri());
      assertEquals("*Ns>Q,3=Vd)R:P4C&", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      textNode1.text = "*Ns>Q,3=Vd)R:P4C&";
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("*Ns>Q,3=Vd)R:P4C&", textNode0.baseUri());
      assertEquals("*Ns>Q,3=Vd)R:P4C&", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      
      int int0 = 40;
      // Undeclared exception!
      try { 
        textNode1.replaceChild(textNode0, textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "ym[uFT}";
      Document document0 = Document.createShell("ym[uFT}");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ym[uFT}", document0.location());
      assertEquals("ym[uFT}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ym[uFT}", document0.location());
      assertEquals("ym[uFT}", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ym[uFT}", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("ym[uFT}", document1.baseUri());
      assertNotNull(document1);
      
      Element element0 = document1.parent();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ym[uFT}", document0.location());
      assertEquals("ym[uFT}", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ym[uFT}", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("ym[uFT}", document1.baseUri());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "lt";
      DocumentType documentType0 = new DocumentType("lt", "lt", "lt", "lt");
      assertEquals("lt", documentType0.baseUri());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertNotNull(documentType0);
      
      Document document0 = documentType0.ownerDocument();
      assertEquals("lt", documentType0.baseUri());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertNull(document0);
      
      // Undeclared exception!
      try { 
        documentType0.replaceWith((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document0));
      assertTrue(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      document1.outerHtmlHead(stringBuilder0, 31, document_OutputSettings0);
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<#root>", stringBuilder0.toString());
      
      String string0 = "";
      Document document3 = (Document)document2.attr("", "");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertNotNull(document3);
      
      Document document4 = document3.ownerDocument();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.childNodeSize());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      boolean boolean0 = document4.updateMetaCharsetElement();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.childNodeSize());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      
      Document document5 = document1.clone();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertTrue(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertTrue(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.childNodeSize());
      assertNotNull(document5);
      
      Comment comment0 = new Comment("%FPIIm=SVG`", "");
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      comment0.outerHtmlHead(stringBuilder0, 31, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("<#root>\n                               <!--%FPIIm=SVG`-->", stringBuilder0.toString());
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        document1.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("J:1HI#l:");
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J:1HI#l:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J:1HI#l:", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Element element0 = document0.prependElement("J:1HI#l:");
      assertSame(document0, document1);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("J:1HI#l:", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document1.attributes = null;
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J:1HI#l:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J:1HI#l:", document1.location());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J:1HI#l:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J:1HI#l:", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("J:1HI#l:", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("J:1HI#l:", document2.location());
      assertNotNull(document2);
      
      Document document3 = document2.clone();
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertTrue(document3.equals((Object)document0));
      assertTrue(document3.equals((Object)document1));
      assertTrue(document3.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J:1HI#l:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J:1HI#l:", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("J:1HI#l:", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("J:1HI#l:", document2.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("J:1HI#l:", document3.baseUri());
      assertEquals("J:1HI#l:", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.text("(N");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J:1HI#l:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J:1HI#l:", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("J:1HI#l:", document4.baseUri());
      assertEquals("J:1HI#l:", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      int int0 = element0.siblingIndex();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertEquals("J:1HI#l:", document0.baseUri());
      assertEquals("J:1HI#l:", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("J:1HI#l:", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Document document0 = new Document(".\"RI'|Wr,0b9:g");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".\"RI'|Wr,0b9:g", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\"RI'|Wr,0b9:g", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      DocumentType documentType0 = new DocumentType("upc~J'{Whx", "upc~J'{Whx", "", "upc~J'{Whx");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("upc~J'{Whx", documentType0.baseUri());
      assertNotNull(documentType0);
      
      Document document0 = Document.createShell("upc~J'{Whx");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("upc~J'{Whx", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("upc~J'{Whx", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      // Undeclared exception!
      try { 
        documentType0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Attributes attributes0 = document1.attributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertNotNull(attributes0);
      
      Document document2 = (Document)document1.appendText("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "ucf.~";
      String string1 = "";
      TextNode textNode0 = new TextNode("ucf.~", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      String string2 = TextNode.stripLeadingWhitespace("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Node node0 = textNode1.clone();
      assertTrue(node0.equals((Object)textNode0));
      assertTrue(node0.equals((Object)textNode1));
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(node0, textNode1);
      assertNotSame(node0, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      String string3 = "O3'Pz< 4D";
      TextNode textNode2 = (TextNode)textNode1.attr("O3'Pz< 4D", "O3'Pz< 4D");
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(textNode2.equals((Object)node0));
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode1, node0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      
      boolean boolean0 = textNode0.hasAttr("ucf.~");
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(boolean0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      textNode0.outerHtml((StringBuilder) null);
      assertFalse(textNode0.equals((Object)node0));
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      textNode2.setParentNode(textNode1);
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(textNode2.equals((Object)node0));
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode1, node0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      
      // Undeclared exception!
      try { 
        textNode2.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextNode textNode0 = new TextNode("textarea", "textarea");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("textarea", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("textarea");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("textarea", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("textarea", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.splitText(3);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("textarea", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("textarea", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("textarea", textNode2.baseUri());
      assertNotNull(textNode2);
      
      String string0 = textNode2.attr("textarea");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("", string0);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("textarea", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("textarea", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("textarea", textNode2.baseUri());
      assertNotNull(string0);
      
      Document document0 = Document.createShell("");
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.siblingIndex = 3;
      assertEquals("", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.toggleClass(")YJ;&]^rL@=R`_e|8'd");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(3, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Element element0 = document0.head();
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Set<String> set0 = element0.classNames();
      assertSame(document0, document1);
      assertFalse(set0.contains(string0));
      assertEquals("", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals(1, nodeArray0.length);
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertNotNull(nodeArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "audio", false);
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      String string0 = xmlDeclaration0.toString();
      assertEquals("<?>", string0);
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(string0);
      
      int int0 = 0;
      Node node0 = xmlDeclaration0.clone();
      assertTrue(node0.equals((Object)xmlDeclaration0));
      assertNotSame(xmlDeclaration0, node0);
      assertNotSame(node0, xmlDeclaration0);
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#declaration", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("audio", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      node0.parentNode = (Node) xmlDeclaration0;
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#declaration", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("audio", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.parentNode.siblingIndex());
      assertEquals("audio", node0.parentNode.baseUri());
      assertEquals(0, node0.parentNode.childNodeSize());
      
      // Undeclared exception!
      try { 
        node0.parentNode.after("<?>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("EcrNi@6", "EcrNi@6");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      String string0 = dataNode0.toString();
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(string0);
      
      Document.OutputSettings document_OutputSettings0 = dataNode0.getOutputSettings();
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document0 = new Document("EcrNi@6");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = document0.quirksMode();
      assertEquals(Document.QuirksMode.noQuirks, document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.appendElement("cc;Fx,H;_");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string1 = document0.className();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("EcrNi@6", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$1");
      assertEquals("org.jsoup.nodes.Node$1", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("org.jsoup.nodes.Node$1", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("org.jsoup.nodes.Node$1", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Node$1", document2.baseUri());
      assertEquals("org.jsoup.nodes.Node$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertNotNull(document2);
      
      Element element0 = document2.appendElement("2g3TT~2y");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("org.jsoup.nodes.Node$1", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Node$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Node$1", document2.baseUri());
      assertEquals("org.jsoup.nodes.Node$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node$1", element0.baseUri());
      assertNotNull(element0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) element0;
      element0.addChildren(nodeArray0);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertTrue(document2.equals((Object)document0));
      assertEquals(4, nodeArray0.length);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("org.jsoup.nodes.Node$1", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Node$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Node$1", document2.baseUri());
      assertEquals("org.jsoup.nodes.Node$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node$1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode("b\"ZZ~Q7pW+9FCj8`", "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("<;Z'(Dh&z");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("<;Z'(Dh&z", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("<;Z'(Dh&z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("<;Z'(Dh&z", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("<;Z'(Dh&z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<;Z'(Dh&z", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<;Z'(Dh&z", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("<;Z'(Dh&z", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("<;Z'(Dh&z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<;Z'(Dh&z", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<;Z'(Dh&z", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("<;Z'(Dh&z", document2.location());
      assertEquals("<;Z'(Dh&z", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.text("");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("<;Z'(Dh&z", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("<;Z'(Dh&z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<;Z'(Dh&z", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<;Z'(Dh&z", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("<;Z'(Dh&z", document2.location());
      assertEquals("<;Z'(Dh&z", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("<;Z'(Dh&z", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<;Z'(Dh&z", document3.baseUri());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document3.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("meta[charset]");
      assertEquals("meta[charset]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("meta[charset]", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("meta[charset]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta[charset]", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("meta[charset]", document1.location());
      assertEquals("meta[charset]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains("meta[charset]"));
      assertEquals("meta[charset]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta[charset]", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("meta[charset]", document1.location());
      assertEquals("meta[charset]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.indentAmount(20);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(20, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(20, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(20, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      
      Charset charset0 = document_OutputSettings4.charset();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(20, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(20, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.charset(charset0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(20, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(20, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(20, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      assertNotNull(document_OutputSettings5);
      
      document1.outerHtmlTail(stringBuilder0, 20, document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertEquals("meta[charset]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta[charset]", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("meta[charset]", document1.location());
      assertEquals("meta[charset]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("\n                                                                                                                                                                                                                                                                                                                                                                                                                </#root>", stringBuilder0.toString());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(20, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(20, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(20, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      
      document1.updateMetaCharsetElement(false);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("meta[charset]", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta[charset]", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("meta[charset]", document1.location());
      assertEquals("meta[charset]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      DocumentType documentType0 = new DocumentType("", "meta[charset]", "?", "?");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("?", documentType0.baseUri());
      assertNotNull(documentType0);
      
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("?", documentType0.baseUri());
      assertNotNull(string0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("uiWs}Q~&>V=phP", "");
      assertEquals("", dataNode0.baseUri());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'L';
      charArray0[2] = '&';
      charArray0[3] = 'T';
      charArray0[4] = 'Y';
      charArray0[5] = ';';
      charArray0[6] = 'd';
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("\n]L&TY;d                                                                                                                                                                                                                                                                                                                                                                                                                </#root>", stringBuilder0.toString());
      assertEquals("\n]L&TY;d                                                                                                                                                                                                                                                                                                                                                                                                                </#root>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertArrayEquals(new char[] {']', 'L', '&', 'T', 'Y', ';', 'd'}, charArray0);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings1.escapeMode(entities_EscapeMode1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings4));
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(entities_EscapeMode1, entities_EscapeMode0);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      assertNotSame(document_OutputSettings6, document_OutputSettings4);
      assertSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals(20, document_OutputSettings6.indentAmount());
      assertFalse(document_OutputSettings6.outline());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertNotNull(document_OutputSettings6);
      
      dataNode0.outerHtmlHead(stringBuilder1, 1677, document_OutputSettings6);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings4));
      assertEquals(7, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(entities_EscapeMode1, entities_EscapeMode0);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      assertNotSame(document_OutputSettings6, document_OutputSettings4);
      assertSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings0);
      assertEquals("", dataNode0.baseUri());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("\n]L&TY;d                                                                                                                                                                                                                                                                                                                                                                                                                </#root>uiWs}Q~&>V=phP", stringBuilder0.toString());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(20, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(20, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("\n]L&TY;d                                                                                                                                                                                                                                                                                                                                                                                                                </#root>uiWs}Q~&>V=phP", stringBuilder1.toString());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals(20, document_OutputSettings6.indentAmount());
      assertFalse(document_OutputSettings6.outline());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertArrayEquals(new char[] {']', 'L', '&', 'T', 'Y', ';', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "q";
      Document document0 = Document.createShell("q");
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("jZ)DhyM68Nbtm7zF");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("q", document2.location());
      assertEquals("q", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("q", document2.location());
      assertEquals("q", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("q", document3.baseUri());
      assertEquals("q", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document3.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("quirks");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.indentAmount(4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document document2 = (Document)document0.appendText("quirks");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("quirks", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("quirks", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.outline(true);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      
      Document document3 = document1.outputSettings(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Document document4 = document3.normalise();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("quirks", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("quirks", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(document4);
      
      String string0 = document4.absUrl("quirks");
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertEquals("", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("quirks", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("quirks", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(string0);
      
      Document document5 = (Document)document2.removeAttr("ismap");
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("quirks", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("quirks", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals("quirks", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("quirks", document5.location());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertNotNull(document5);
      
      String string1 = document4.toString();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("<html>\n <head></head>\n <body>\n  quirks \n </body>\n</html>", string1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("quirks", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("quirks", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(string1);
      
      Element element0 = document4.head();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("quirks", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("quirks", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("quirks", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("quirks", element0.baseUri());
      assertNotNull(element0);
      
      Document document6 = (Document)document1.appendChild(document3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("quirks", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("quirks", document6.location());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("quirks", document6.baseUri());
      assertEquals(2, document6.childNodeSize());
      assertNotNull(document6);
      
      Element element1 = document2.previousElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("quirks", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("quirks", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("quirks", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(element1);
      
      Set<String> set0 = document4.classNames();
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document4, document1);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertFalse(set0.contains("quirks"));
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("quirks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("quirks", document0.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, document1.childNodeSize());
      assertEquals("quirks", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("quirks", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(4, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("quirks", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("quirks", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("quirks", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("quirks", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertNotNull(set0);
      
      TextNode textNode0 = new TextNode("l}CQu;", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string2 = "m";
      TextNode textNode1 = textNode0.text("m");
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings5 = textNode1.getOutputSettings();
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertNotNull(document_OutputSettings5);
      
      // Undeclared exception!
      try { 
        textNode1.splitText(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = new TextNode("_2~a^e4`9,5yX32", "_2~a^e4`9,5yX32");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("_2~a^e4`9,5yX32", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      textNode0.setBaseUri("");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(31);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("true", stringBuilder0.toString());
      
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      
      Tag tag0 = document1.tag();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "wv", attributes0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("wv", formElement0.baseUri());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("wv", formElement0.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("wv", formElement1.baseUri());
      assertNotNull(formElement1);
      
      boolean boolean1 = formElement1.hasText();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("wv", formElement0.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("wv", formElement1.baseUri());
      
      Node node0 = textNode0.removeAttr("^*`E:Z3Qs{");
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "|OTgsWkQ[YZ&4}";
      Comment comment0 = new Comment("|OTgsWkQ[YZ&4}", "|OTgsWkQ[YZ&4}");
      assertEquals("|OTgsWkQ[YZ&4}", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "#^{?(<$Zdb/)2vV";
      TextNode textNode0 = new TextNode("#^{?(<$Zdb/)2vV", "#^{?(<$Zdb/)2vV");
      assertEquals("#^{?(<$Zdb/)2vV", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      DataNode dataNode0 = new DataNode("", "");
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      Document document0 = Document.createShell("");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        dataNode0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DataNode dataNode0 = new DataNode("POST", "");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("", dataNode0.baseUri());
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document0 = Document.createShell("0oER0QFp/Fbg#ts9");
      assertEquals("0oER0QFp/Fbg#ts9", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("0oER0QFp/Fbg#ts9", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("0oER0QFp/Fbg#ts9", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document2.location());
      assertEquals("0oER0QFp/Fbg#ts9", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.html("");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("0oER0QFp/Fbg#ts9", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document2.location());
      assertEquals("0oER0QFp/Fbg#ts9", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.childNodeSize());
      assertEquals("0oER0QFp/Fbg#ts9", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("0oER0QFp/Fbg#ts9", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Document document4 = (Document)document3.prepend("");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertEquals("0oER0QFp/Fbg#ts9", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("0oER0QFp/Fbg#ts9", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("0oER0QFp/Fbg#ts9", document2.location());
      assertEquals("0oER0QFp/Fbg#ts9", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.childNodeSize());
      assertEquals("0oER0QFp/Fbg#ts9", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("0oER0QFp/Fbg#ts9", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("0oER0QFp/Fbg#ts9", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.childNodeSize());
      assertEquals("0oER0QFp/Fbg#ts9", document4.location());
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("`t:Wv}HV0JxD");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`t:Wv}HV0JxD", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`t:Wv}HV0JxD", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`t:Wv}HV0JxD", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`t:Wv}HV0JxD", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("`t:Wv}HV0JxD", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("`t:Wv}HV0JxD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string0 = document0.absUrl("[%s$=%s]");
      assertEquals("", string0);
      assertSame(document0, document1);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`t:Wv}HV0JxD", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`t:Wv}HV0JxD", document0.baseUri());
      assertNotNull(string0);
      
      String string1 = document0.location();
      assertFalse(string1.equals((Object)string0));
      assertEquals("`t:Wv}HV0JxD", string1);
      assertSame(document0, document1);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`t:Wv}HV0JxD", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`t:Wv}HV0JxD", document0.baseUri());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("~g<j=s\rD");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("~g<j=s\rD", document2.location());
      assertEquals("~g<j=s\rD", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("~g<j=s\rD"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(linkedHashSet0.contains("~g<j=s\rD"));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("~g<j=s\rD", document2.location());
      assertEquals("~g<j=s\rD", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("~g<j=s\rD", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("~g<j=s\rD", document3.baseUri());
      assertNotNull(document3);
      
      Document document4 = document3.ownerDocument();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(linkedHashSet0.contains("~g<j=s\rD"));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("~g<j=s\rD", document2.location());
      assertEquals("~g<j=s\rD", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("~g<j=s\rD", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("~g<j=s\rD", document3.baseUri());
      assertEquals("~g<j=s\rD", document4.location());
      assertEquals("~g<j=s\rD", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      Document document5 = (Document)document4.removeClass("dFo\"GCw%cxM%P");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertFalse(linkedHashSet0.contains("dFo\"GCw%cxM%P"));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("~g<j=s\rD", document2.location());
      assertEquals("~g<j=s\rD", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("~g<j=s\rD", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("~g<j=s\rD", document3.baseUri());
      assertEquals("~g<j=s\rD", document4.location());
      assertEquals("~g<j=s\rD", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("~g<j=s\rD", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("~g<j=s\rD", document5.location());
      assertNotNull(document5);
      
      Document document6 = (Document)document5.val("]-j[vgPQt");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertFalse(linkedHashSet0.contains("~g<j=s\rD"));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~g<j=s\rD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~g<j=s\rD", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("~g<j=s\rD", document1.location());
      assertEquals("~g<j=s\rD", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("~g<j=s\rD", document2.location());
      assertEquals("~g<j=s\rD", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("~g<j=s\rD", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("~g<j=s\rD", document3.baseUri());
      assertEquals("~g<j=s\rD", document4.location());
      assertEquals("~g<j=s\rD", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("~g<j=s\rD", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("~g<j=s\rD", document5.location());
      assertEquals("~g<j=s\rD", document6.location());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals("~g<j=s\rD", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertNotNull(document6);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Tag tag0 = Tag.valueOf("abs:");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("abs:", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "abs:", attributes0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("abs:", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.text("GPeK[");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("abs:", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("abs:", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      Elements elements0 = element0.parents();
      assertSame(element0, element1);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("abs:", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("abs:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.wrap("GPeK[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertNotNull(document1);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^puZ[~\"oG)k9P");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document0.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("fGn8{", "", "'", "org.jsoup.nodes.Node$1");
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", documentType0.baseUri());
      assertNotNull(documentType0);
      
      Document document0 = documentType0.ownerDocument();
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$1", documentType0.baseUri());
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      document1.reparentChild(document0);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document1.outerHtml();
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document1.attr("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("Q_]G8V{,PrqO");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q_]G8V{,PrqO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q_]G8V{,PrqO", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      List<Node> list0 = document0.siblingNodes();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q_]G8V{,PrqO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q_]G8V{,PrqO", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q_]G8V{,PrqO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q_]G8V{,PrqO", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Q_]G8V{,PrqO", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Q_]G8V{,PrqO", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.append("Q_]G8V{,PrqO");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q_]G8V{,PrqO", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q_]G8V{,PrqO", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Q_]G8V{,PrqO", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Q_]G8V{,PrqO", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Q_]G8V{,PrqO", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Q_]G8V{,PrqO", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("&B_kMAmE");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("&B_kMAmE", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("&B_kMAmE", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DataNode dataNode0 = new DataNode("declaration", "Y#<y# ugu");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("Y#<y# ugu", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.childNodeSize());
      assertNotNull(dataNode0);
      
      // Undeclared exception!
      try { 
        dataNode0.childNode(128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("c'Tycg@wOT U");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("c'Tycg@wOT U", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("c'Tycg@wOT U", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.before("c'Tycg@wOT U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 1455;
      // Undeclared exception!
      try { 
        textNode0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.location());
      assertNotNull(document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertTrue(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.toggleClass("org.jsoup.nodes.Node$1");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document1.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document3.baseUri());
      assertEquals("org.jsoup.nodes.Node$OuterHtmlVisitor", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document3.after("org.jsoup.nodes.Node$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextNode textNode0 = new TextNode("n,m'5IY3BhuT;?n", "n,m'5IY3BhuT;?n");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("n,m'5IY3BhuT;?n", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("n,m'5IY3BhuT;?n", textNode0.baseUri());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "audio", false);
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      String string0 = xmlDeclaration0.toString();
      assertEquals("<?>", string0);
      assertEquals(0, xmlDeclaration0.childNodeSize());
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(string0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) xmlDeclaration0;
      nodeArray0[4] = (Node) xmlDeclaration0;
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) xmlDeclaration0;
      nodeArray0[7] = (Node) xmlDeclaration0;
      xmlDeclaration0.addChildren(nodeArray0);
      assertEquals(8, nodeArray0.length);
      assertEquals("audio", xmlDeclaration0.baseUri());
      assertEquals(1, xmlDeclaration0.childNodeSize());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      // Undeclared exception!
      try { 
        xmlDeclaration0.parentNode.after("<?>");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "abs:method";
      DataNode dataNode0 = new DataNode("abs:method", "abs:method");
      assertEquals(0, dataNode0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("abs:method", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      Document document0 = Document.createShell("abs:method");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("abs:method", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("abs:method", document0.location());
      assertNotNull(document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "abs:";
      Document document0 = new Document("abs:");
      assertEquals("abs:", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("abs:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("abs:", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("abs:", document1.baseUri());
      assertEquals("abs:", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string1 = "?";
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("?");
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodesCopy();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Document document2 = (Document)document1.text("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("?", document2.baseUri());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.attr("?", "");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("?", document2.baseUri());
      assertEquals("?", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("?", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.appendText("");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("?", document1.baseUri());
      assertEquals("?", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("?", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("?", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("ydl#`|QE'Pth");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.nodes.Node");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Set<String> set0 = element0.classNames();
      assertFalse(set0.contains("ydl#`|QE'Pth"));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      
      document0.hashCode();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      
      Node[] nodeArray0 = new Node[7];
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ydl#`|QE'Pth", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ydl#`|QE'Pth", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      Document document2 = Document.createShell("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      assertNotNull(document2);
      
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document2.childNodes = null;
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      element0.addChildren(nodeArray0);
      assertFalse(document0.equals((Object)document2));
      assertEquals(7, nodeArray0.length);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ydl#`|QE'Pth", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(3, element0.childNodeSize());
      
      document2.hashCode();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<org.jsoup.nodes.node></org.jsoup.nodes.node>", document2.baseUri());
      
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertFalse(document0.equals((Object)document2));
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ydl#`|QE'Pth", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ydl#`|QE'Pth", document0.location());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0L);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertEquals("0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(0.0F);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("00.0", stringBuilder0.toString());
      assertEquals("00.0", stringBuilder1.toString());
      assertEquals("00.0", stringBuilder2.toString());
      assertEquals("00.0", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) "");
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertEquals("00.0", stringBuilder0.toString());
      assertEquals("00.0", stringBuilder1.toString());
      assertEquals("00.0", stringBuilder2.toString());
      assertEquals("00.0", stringBuilder3.toString());
      assertEquals("00.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      
      comment0.outerHtml(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("00.0\n<!---->", stringBuilder0.toString());
      assertEquals("00.0\n<!---->", stringBuilder1.toString());
      assertEquals("00.0\n<!---->", stringBuilder2.toString());
      assertEquals("00.0\n<!---->", stringBuilder3.toString());
      
      boolean boolean0 = comment0.equals("");
      assertFalse(boolean0);
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      String string0 = comment0.toString();
      assertEquals("\n<!---->", string0);
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(string0);
      
      Node node0 = comment0.nextSibling();
      assertEquals("", comment0.baseUri());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      String string0 = "org.jsoup.select.Evaluator$IndexEvaluator";
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.before("org.jsoup.select.Evaluator$IndexEvaluator");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(4, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(4, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      String string1 = "dgh1U3Zmi~tHp5wt./Q";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("", "jP]w~_d%TgOJpT%,<");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("jP]w~_d%TgOJpT%,<", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.wrap("jP]w~_d%TgOJpT%,<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.baseUri());
      assertEquals("org.jsoup.nodes.Document$OutputSettings$Syntax", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      TextNode textNode0 = TextNode.createFromEncoded("P", "jP]w~_d%TgOJpT*%,<");
      assertEquals("jP]w~_d%TgOJpT*%,<", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.wrap("jP]w~_d%TgOJpT*%,<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "audio", false);
      xmlDeclaration0.toString();
      XmlDeclaration xmlDeclaration1 = (XmlDeclaration)xmlDeclaration0.clone();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) xmlDeclaration1;
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) xmlDeclaration1;
      nodeArray0[3] = (Node) xmlDeclaration0;
      nodeArray0[4] = (Node) xmlDeclaration0;
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) xmlDeclaration0;
      nodeArray0[7] = (Node) xmlDeclaration1;
      xmlDeclaration1.addChildren(nodeArray0);
      xmlDeclaration1.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        xmlDeclaration1.parentNode.after("<?>");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
