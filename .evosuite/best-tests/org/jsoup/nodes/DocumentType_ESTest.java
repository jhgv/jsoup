/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 12:04:21 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("(]%[+Gb72", "", "li", "(]%[+Gb72");
      assertNotNull(documentType0);
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("(]%[+Gb72", documentType0.baseUri());
      
      StringBuilder stringBuilder0 = new StringBuilder("li");
      assertNotNull(stringBuilder0);
      assertEquals("li", stringBuilder0.toString());
      
      documentType0.outerHtmlTail(stringBuilder0, 0, (Document.OutputSettings) null);
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("(]%[+Gb72", documentType0.baseUri());
      assertEquals("li", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("body", "", "#8]%)(xJ", "body");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("body", documentType0.baseUri());
      assertEquals(0, documentType0.siblingIndex());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(stringBuilder0, 222, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.DocumentType", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = null;
      try {
        documentType0 = new DocumentType((String) null, "r$3|pt", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "&quot;", "");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("", documentType0.baseUri());
      
      String string0 = documentType0.nodeName();
      assertNotNull(string0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals("", documentType0.baseUri());
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("(Rtu", "<<ZeYhW#Us*2Eb'S(4", "org.jsoup.select.Evaluator$IndexLessThan", "(Rtu");
      assertNotNull(documentType0);
      assertEquals("(Rtu", documentType0.baseUri());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      StringBuilder stringBuilder0 = new StringBuilder(9);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      TextNode textNode0 = new TextNode("A", "org.jsoup.select.Evaluator$IndexLessThan");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexLessThan", textNode0.baseUri());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexLessThan", textNode0.baseUri());
      
      documentType0.attributes = attributes0;
      assertEquals("(Rtu", documentType0.baseUri());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexLessThan", textNode0.baseUri());
      
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals("(Rtu", documentType0.baseUri());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      documentType0.outerHtmlHead(stringBuilder0, 9, document_OutputSettings0);
      assertEquals("(Rtu", documentType0.baseUri());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("<!doctype>", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("a", "a", "a", "a");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("a", documentType0.baseUri());
      
      String string0 = documentType0.toString();
      assertNotNull(string0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.childNodeSize());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("a", documentType0.baseUri());
      assertEquals("<!DOCTYPE a PUBLIC \"a\" \"a\">", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Vb +8S&", "Vb +8S&", "Vb +8S&", "QI#pX=/C1qc)5-");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document document0 = new Document("Vb +8S&");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings0);
      assertEquals("<!DOCTYPE Vb +8S& PUBLIC \"Vb +8S&\" \"Vb +8S&\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "&quot;", "");
      String string0 = documentType0.outerHtml();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("<!DOCTYPE \"&quot;\">", string0);
  }
}
