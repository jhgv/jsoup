/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 12:05:17 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlDeclaration_ESTest extends XmlDeclaration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",4v5>q49", "WG_`,zqzpdY", false);
      xmlDeclaration0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.Evaluator$IndexEvaluator", "org.jsoup.select.Evaluator$IndexEvaluator", false);
      StringBuilder stringBuilder0 = new StringBuilder("<?org.jsoup.select.Evaluator$IndexEvaluator>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      xmlDeclaration0.outerHtmlHead(stringBuilder0, 580, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("R@", "R@", true);
      StringBuilder stringBuilder0 = new StringBuilder();
      xmlDeclaration0.outerHtmlTail(stringBuilder0, 0, (Document.OutputSettings) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      xmlDeclaration0.getWholeDeclaration();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("g1gR*.+S/AXIMrt", "", false);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) xmlDeclaration0;
      nodeArray0[4] = (Node) xmlDeclaration0;
      nodeArray0[5] = (Node) xmlDeclaration0;
      xmlDeclaration0.addChildren(0, nodeArray0);
      // Undeclared exception!
      xmlDeclaration0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        xmlDeclaration0.outerHtmlHead((StringBuilder) null, 1569, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.XmlDeclaration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = null;
      try {
        xmlDeclaration0 = new XmlDeclaration("_0ze+)m*", (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("version", "version", false);
      xmlDeclaration0.getWholeDeclaration();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("{<I", "(tFM", false);
      xmlDeclaration0.nodeName();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("xml", "xml", false);
      xmlDeclaration0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", true);
      xmlDeclaration0.outerHtml();
  }
}
