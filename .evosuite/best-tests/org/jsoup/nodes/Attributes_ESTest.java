/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:47:17 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "L1u{a^tqcm%%+a8%";
      Attributes attributes1 = attributes0.put("L1u{a^tqcm%%+a8%", "");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string1 = "system";
      Attributes attributes2 = attributes1.put("system", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("L1u{a^tqcm%%+a8%", "& ");
      assertNotNull(attribute0);
      assertEquals("L1u{a^tqcm%%+a8%", attribute0.getKey());
      assertEquals("& ", attribute0.getValue());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("L1u{a^tqcm%%+a8%", attribute0.getKey());
      assertEquals("& ", attribute0.getValue());
      assertEquals("& ", attribute1.getValue());
      assertEquals("L1u{a^tqcm%%+a8%", attribute1.getKey());
      
      String string2 = attribute1.html();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(string2);
      assertEquals("L1u{a^tqcm%%+a8%", attribute0.getKey());
      assertEquals("& ", attribute0.getValue());
      assertEquals("& ", attribute1.getValue());
      assertEquals("L1u{a^tqcm%%+a8%", attribute1.getKey());
      assertEquals("L1u{a^tqcm%%+a8%=\"&amp; \"", string2);
      
      attributes0.vals = null;
      assertEquals(2, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes2.put(attribute1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset$EntrySet", "LRJiEW*6");
      assertNotNull(attribute0);
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getKey());
      assertEquals("LRJiEW*6", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getKey());
      assertEquals("LRJiEW*6", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      String string0 = "_5<*DvF";
      String[] stringArray0 = new String[1];
      stringArray0[0] = ") BQA.N!$5I,pD &mO\"";
      attributes1.vals = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getKey());
      assertEquals("LRJiEW*6", attribute0.getValue());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes0.put("_5<*DvF", "_5<*DvF");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = attributes0.hasKey("/3Ve=");
      assertTrue(boolean1 == boolean0);
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean1);
      
      Attribute attribute0 = new Attribute("U", "qfg@5C6.UT;}!?d");
      assertNotNull(attribute0);
      assertEquals("U", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      
      Attributes attributes2 = attributes1.put(attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(2, attributes2.size());
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotNull(iterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      Attributes attributes3 = attributes2.put("org.jsoup.parser.CharacterReader", "qfg@5C6.UT;}!?d");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      
      Attributes attributes4 = attributes3.put("{SruF.P|", true);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals(4, attributes4.size());
      
      String string0 = attributes4.get("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertNotNull(string0);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals(4, attributes4.size());
      assertEquals("", string0);
      
      Spliterator<Attribute> spliterator0 = attributes3.spliterator();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotNull(spliterator0);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      
      attributes4.normalize();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals(4, attributes4.size());
      
      attributes0.remove("");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertEquals(4, attributes0.size());
      
      String string1 = Attributes.checkNotNull("org.jsoup.parser.CharacterReader");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.jsoup.parser.CharacterReader", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      attributes3.putIgnoreCase("org.jsoup.parser.CharacterReader", "Fx=[uY-|l_vn?K}J[");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      
      String string2 = attributes3.getIgnoreCase("U");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotNull(string2);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      
      attributes2.removeIgnoreCase("");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      
      int int0 = attributes1.indexOfKey("E.h1d6i}'?q`07B");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals((-1), int0);
      
      List<Attribute> list0 = attributes3.asList();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotNull(list0);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertEquals("U", attribute0.getKey());
      assertEquals("U", attribute1.getKey());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertFalse(list0.contains(attribute1));
      
      Attributes attributes5 = attributes3.put("Zd=D-(g![b&0L)R?b", true);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes0);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotNull(attributes5);
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals(5, attributes5.size());
      assertEquals("U", attribute1.getKey());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      
      attributes5.addAll(attributes2);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes0);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("U", attribute0.getKey());
      assertEquals(5, attributes5.size());
      assertEquals("U", attribute1.getKey());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("22_", "");
      assertNotNull(attribute0);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("noshade");
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "q#3w{";
      stringArray0[2] = "q#3w{";
      stringArray0[3] = "22_";
      stringArray0[4] = "22_";
      Writer writer0 = mockFileWriter0.append('5');
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.removeIgnoreCase("9MvU");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("q#3w{", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotNull(spliterator0);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes4 = attributes3.put("seamless", (String) null);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      attributes4.keys = stringArray0;
      assertEquals("22_", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      // Undeclared exception!
      try { 
        attributes4.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "Jgx}+dy,I'j.8";
      attributes0.remove("data-");
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Jgx}+dy,I'j.8", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = attributes1.getIgnoreCase("data-");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", string1);
      
      Attributes attributes3 = attributes2.clone();
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      attributes3.removeIgnoreCase("");
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      attributes0.addAll(attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(list0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      attributes1.keys = null;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(") bqa.n!$5i,pd &mo\"", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q#3w{");
      assertFalse(boolean0);
      
      Attributes attributes2 = attributes1.put("q#3w{", ") bqa.n!$5i,pd &mo\"");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = new Attribute(") bqa.n!$5i,pd &mo\"", ") bqa.n!$5i,pd &mo\"");
      assertNotNull(attribute0);
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getValue());
      
      String string0 = attribute0.toString();
      assertTrue(attribute0.equals((Object)attribute1));
      assertNotSame(attribute0, attribute1);
      assertNotNull(string0);
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"=\") bqa.n!$5i,pd &amp;mo&quot;\"", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Integer>> comparator1 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      Attributes attributes4 = attributes2.put(") bqa.n!$5i,pd &mo\"", true);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      Attributes attributes5 = attributes4.clone();
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotNull(attributes5);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      
      int int0 = attributes5.indexOfKey(") bqa.n!$5i,pd &mo\"");
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      assertEquals(1, int0);
      
      attributes2.normalize();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Iterator<Attribute> iterator0 = attributes5.iterator();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotNull(iterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ") bqa.n!$5i,pd &mo\"";
      stringArray0[1] = ") bqa.n!$5i,pd &mo\"";
      stringArray0[2] = "q#3w{";
      stringArray0[3] = ") bqa.n!$5i,pd &mo\"";
      stringArray0[4] = "q#3w{";
      stringArray0[5] = ") bqa.n!$5i,pd &mo\"";
      stringArray0[6] = ") bqa.n!$5i,pd &mo\"=\") bqa.n!$5i,pd &amp;mo&quot;\"";
      attributes5.vals = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      
      boolean boolean1 = attributes3.equals(attributes5);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes5));
      assertTrue(boolean1 == boolean0);
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes5);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      assertFalse(boolean1);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertFalse(attributes0.equals((Object)attributes5));
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(spliterator0);
      assertEquals(2, attributes0.size());
      
      Attributes attributes6 = attributes4.put(") bqa.n!$5i,pd &mo\"", "!g(");
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes6.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes5));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes6);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes6, attributes1);
      assertSame(attributes6, attributes0);
      assertSame(attributes6, attributes2);
      assertSame(attributes6, attributes3);
      assertNotSame(attributes6, attributes5);
      assertSame(attributes6, attributes4);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes6);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes5);
      assertNotNull(attributes6);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes6.size());
      assertEquals(2, attributes4.size());
      
      Attributes attributes7 = attributes1.put(attribute1);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes7.equals((Object)attributes5));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes7);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes7, attributes2);
      assertSame(attributes7, attributes6);
      assertSame(attributes7, attributes0);
      assertSame(attributes7, attributes4);
      assertSame(attributes7, attributes3);
      assertNotSame(attributes7, attributes5);
      assertSame(attributes7, attributes1);
      assertNotNull(attributes7);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getValue());
      assertEquals(2, attributes7.size());
      
      Attributes attributes8 = attributes7.put("data-", false);
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes7.equals((Object)attributes5));
      assertFalse(attributes8.equals((Object)attributes5));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes8);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes7);
      assertSame(attributes1, attributes8);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes7, attributes2);
      assertSame(attributes7, attributes8);
      assertSame(attributes7, attributes6);
      assertSame(attributes7, attributes0);
      assertSame(attributes7, attributes4);
      assertSame(attributes7, attributes3);
      assertNotSame(attributes7, attributes5);
      assertSame(attributes7, attributes1);
      assertSame(attributes8, attributes7);
      assertSame(attributes8, attributes6);
      assertNotSame(attributes8, attributes5);
      assertSame(attributes8, attributes1);
      assertSame(attributes8, attributes2);
      assertSame(attributes8, attributes4);
      assertSame(attributes8, attributes0);
      assertSame(attributes8, attributes3);
      assertNotNull(attributes8);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getValue());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute0.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getKey());
      assertEquals(") bqa.n!$5i,pd &mo\"", attribute1.getValue());
      assertEquals(2, attributes7.size());
      assertEquals(2, attributes8.size());
      
      String string1 = attributes1.getIgnoreCase("ScriptDataEscapedDashDash");
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes8);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes7);
      assertSame(attributes1, attributes8);
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("", string1);
      
      Iterator<Attribute> iterator1 = attributes5.iterator();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes7));
      assertFalse(attributes5.equals((Object)attributes8));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes6));
      assertFalse(iterator1.equals((Object)iterator0));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes8);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes7);
      assertSame(attributes1, attributes8);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes7);
      assertSame(attributes2, attributes6);
      assertSame(attributes2, attributes8);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes6);
      assertSame(attributes4, attributes7);
      assertSame(attributes4, attributes8);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes7);
      assertNotSame(attributes5, attributes8);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes6);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
      
      Map<String, String> map0 = attributes5.dataset();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes7));
      assertFalse(attributes5.equals((Object)attributes8));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes6));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes8);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes7);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes7);
      assertSame(attributes1, attributes8);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes7);
      assertSame(attributes2, attributes6);
      assertSame(attributes2, attributes8);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes6);
      assertSame(attributes4, attributes7);
      assertSame(attributes4, attributes8);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes7);
      assertNotSame(attributes5, attributes8);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes6);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("5apir6hBGx~Aod+;", "");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = attributes1.html();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\"", string0);
      
      Attributes attributes2 = attributes0.put("!G(", "!G(");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      attributes0.addAll(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotNull(spliterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      attributes2.addAll(attributes0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      boolean boolean0 = attributes1.hasKey("e");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(boolean0);
      
      attributes2.putIgnoreCase("", "L5_yl{biBFO]l{rHd");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      
      attributes0.removeIgnoreCase("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(3, attributes0.size());
      
      String string1 = attributes0.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string1);
      assertEquals(3, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\"L5_yl{biBFO]l{rHd\"", string1);
      
      String string2 = attributes0.toString();
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string2);
      assertEquals(3, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\"L5_yl{biBFO]l{rHd\"", string2);
      
      attributes2.hashCode();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      
      int int0 = attributes1.size();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, int0);
      
      String string3 = attributes0.get(" 5apir6hBGx~Aod+;=\"\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string3);
      assertEquals(3, attributes0.size());
      assertEquals("", string3);
      
      String string4 = Attributes.dataPrefix;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("data-", string4);
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(attributes3);
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes0.size());
      
      boolean boolean1 = attributes3.hasKeyIgnoreCase("org.jsoup.SerializationException");
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes0.size());
      assertFalse(boolean1);
      
      boolean boolean2 = attributes3.hasKeyIgnoreCase("org.jsoup.SerializationException");
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes0.size());
      assertFalse(boolean2);
      
      Attributes attributes4 = attributes2.put("", " 5apir6hBGx~Aod+;=\"\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotNull(attributes4);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes2.size());
      
      boolean boolean3 = attributes3.equals(attributes4);
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes2.size());
      assertFalse(boolean3);
      
      String string5 = attributes1.html();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertNotNull(string5);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\" 5apir6hBGx~Aod+;=&quot;&quot;\"", string5);
      
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "j%sb}7V";
      Attribute attribute0 = Attribute.createFromEncoded("data-", "j%sb}7V");
      assertNotNull(attribute0);
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(1, attributes1.size());
      
      String string1 = attributes1.html();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(" data-=\"j%sb}7V\"", string1);
      
      Comparator<Map.Entry<String, Attributes>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Attributes attributes2 = attributes1.put("n<MCQ,<MI##;.", "C{4f=");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attribute attribute2 = Attribute.createFromEncoded("C{4f=", " data-=\"j%sb}7V\"");
      assertFalse(attribute2.equals((Object)attribute0));
      assertFalse(attribute2.equals((Object)attribute1));
      assertNotSame(attribute2, attribute0);
      assertNotSame(attribute2, attribute1);
      assertNotNull(attribute2);
      assertEquals("C{4f=", attribute2.getKey());
      assertEquals(" data-=\"j%sb}7V\"", attribute2.getValue());
      
      int int0 = attributes1.indexOfKey("data-");
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attribute0.equals((Object)attribute2));
      assertFalse(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertEquals(2, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(0, int0);
      
      String string2 = attributes2.toString();
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attribute0.equals((Object)attribute2));
      assertFalse(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(string2);
      assertEquals(2, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(" data-=\"j%sb}7V\" n<MCQ,<MI##;.=\"C{4f=\"", string2);
      
      Attributes attributes3 = attributes1.clone();
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attribute0.equals((Object)attribute2));
      assertFalse(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes3.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " data-=\"j%sb}7V\"";
      stringArray0[1] = "C{4f=";
      stringArray0[2] = "j%sb}7V";
      stringArray0[3] = " data-=\"j%sb}7V\" n<MCQ,<MI##;.=\"C{4f=\"";
      stringArray0[4] = "uV0t0SN~Kbe92/TYn:";
      stringArray0[5] = "data-";
      stringArray0[6] = "j%sb}7V";
      stringArray0[7] = " data-=\"j%sb}7V\" n<MCQ,<MI##;.=\"C{4f=\"";
      attributes2.keys = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals("j%sb}7V", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertEquals("j%sb}7V", attribute1.getValue());
      assertEquals("data-", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      // Undeclared exception!
      try { 
        attributes2.addAll(attributes1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = ") bqa.n!$5i,pd &mo\"";
      Attributes attributes1 = attributes0.put(") bqa.n!$5i,pd &mo\"", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put(") bqa.n!$5i,pd &mo\"", ") bqa.n!$5i,pd &mo\"");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Map<String, String> map0 = attributes3.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(map0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = attributes3.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(map1, map0);
      assertNotNull(map1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      String string1 = attributes2.html();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(" ) bqa.n!$5i,pd &mo\"=\") bqa.n!$5i,pd &amp;mo&quot;\"", string1);
      
      attributes3.remove(" ) bqa.n!$5i,pd &mo\"=\") bqa.n!$5i,pd &amp;mo&quot;\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ") bqa.n!$5i,pd &mo\"");
      assertNotNull(charBuffer0);
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(") bqa.n!$5i,pd &mo\"", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-51);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)33, (byte)114, (byte)96, (byte) (-23), (byte) (-74), (byte) (-51)}, byteArray0);
      assertFalse(boolean3);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        attributes1.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      int int0 = attributes0.indexOfKey("u5qygmc2d6!j");
      assertEquals(0, attributes0.size());
      assertEquals((-1), int0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      String string0 = "org.jsoup.nodes.Attributes$1";
      attributes1.vals = null;
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$1", false);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      // Undeclared exception!
      try { 
        attributes2.put("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("9ZF>L", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("9ZF>L", "V\"o3E)J");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      int int0 = attributes3.indexOfKey("V\"o3E)J");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals((-1), int0);
      
      String string0 = attributes0.get("9ZF>L");
      assertFalse(attributes0.equals((Object)attributes3));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals("V\"o3E)J", string0);
      
      Attributes attributes4 = new Attributes();
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotNull(attributes4);
      assertEquals(0, attributes4.size());
      
      Attributes attributes5 = attributes4.clone();
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      assertNotNull(attributes5);
      assertEquals(0, attributes4.size());
      assertEquals(0, attributes5.size());
      
      boolean boolean0 = attributes2.equals(attributes5);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, attributes4.size());
      assertEquals(0, attributes5.size());
      assertFalse(boolean0);
      
      boolean boolean1 = attributes0.hasKeyIgnoreCase("V\"o3E)J");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes3);
      assertEquals(1, attributes0.size());
      assertFalse(boolean1);
      
      boolean boolean2 = attributes5.hasKeyIgnoreCase("");
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertTrue(attributes4.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes2));
      assertTrue(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      assertEquals(0, attributes4.size());
      assertEquals(0, attributes5.size());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("5nBKzBeK%|Q|:xuBWED", "3^,rU]p_kqq3^`5h");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.attributes", true);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Attribute attribute0 = new Attribute("C{4f=", "org.jsoup.nodes.Attributes$Dataset$EntrySet", attributes3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotNull(attribute0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      
      Attributes attributes4 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      assertEquals(3, attributes4.size());
      
      Attributes attributes5 = attributes4.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes5);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes2);
      assertNotNull(attributes5);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes5.size());
      
      attributes4.addAll(attributes2);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes3));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes5);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      assertEquals(3, attributes4.size());
      
      Attributes attributes6 = attributes5.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes3));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes5);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes6);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes3);
      assertSame(attributes6, attributes1);
      assertSame(attributes6, attributes2);
      assertSame(attributes6, attributes5);
      assertSame(attributes6, attributes4);
      assertNotNull(attributes6);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes5.size());
      assertEquals(3, attributes6.size());
      
      attributes4.addAll(attributes5);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes6));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes5);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes6);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes6);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes2);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$EntrySet", attribute0.getValue());
      assertEquals("C{4f=", attribute0.getKey());
      assertEquals(3, attributes4.size());
      assertEquals(3, attributes5.size());
      
      char[] charArray0 = new char[0];
      int int0 = (-2028379510);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1727039609), (-2028379510));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("KKi~X'", "j_oqC*OSu8zNIC");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = "data-";
      boolean boolean0 = attributes1.hasKeyIgnoreCase("data-");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(iterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string1 = "5wCJzroRY*z";
      Attributes attributes2 = attributes0.put("5wCJzroRY*z", true);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes1.put("j_oqC*OSu8zNIC", "data-");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes3.size());
      
      Attribute attribute0 = new Attribute("j_oqC*OSu8zNIC", "5wCJzroRY*z", attributes0);
      assertNotNull(attribute0);
      assertEquals(3, attributes0.size());
      assertEquals("5wCJzroRY*z", attribute0.getValue());
      assertEquals("j_oqC*OSu8zNIC", attribute0.getKey());
      
      Attributes attributes4 = attributes3.put(attribute0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes3.size());
      assertEquals("5wCJzroRY*z", attribute0.getValue());
      assertEquals("j_oqC*OSu8zNIC", attribute0.getKey());
      assertEquals(3, attributes4.size());
      
      attributes0.putIgnoreCase("command", "y\"cg%ihn?ri>!");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertEquals(4, attributes0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "y\"cg%ihn?ri>!";
      stringArray0[1] = "data-";
      attributes3.keys = stringArray0;
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes3.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes4);
      assertNotNull(map0);
      assertEquals(4, attributes0.size());
      
      String string2 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      // Undeclared exception!
      try { 
        attributes3.asList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "8qn";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8qn");
      assertFalse(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      boolean boolean1 = false;
      Attributes attributes1 = new Attributes();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertEquals(0, attributes1.size());
      
      Attribute attribute0 = new Attribute("8qn", "id", attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attribute0);
      assertEquals(0, attributes1.size());
      assertEquals("8qn", attribute0.getKey());
      assertEquals("id", attribute0.getValue());
      
      Attributes attributes2 = attributes0.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("8qn", attribute0.getKey());
      assertEquals("id", attribute0.getValue());
      assertEquals(1, attributes2.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)126;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-99), (byte) (-101), (byte) (-57), (byte)4, (byte)7, (byte)126}, byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteArray0.length);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-99), (byte) (-101), (byte) (-57), (byte)4, (byte)7, (byte)126}, byteArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\u0004\u0007~", charBuffer0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(7, byteArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        attributes2.html((Appendable) charBuffer0, document_OutputSettings3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = attributes0.html();
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals("", string0);
      
      boolean boolean0 = attributes0.hasKey("!J]:qhvjPWp=.;");
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("22_", "22_");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Map<String, String> map0 = attributes2.dataset();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string1 = attributes2.toString();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(string1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(" 22_=\"22_\"", string1);
      
      attributes0.addAll(attributes2);
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Map<String, String> map1 = attributes2.dataset();
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(map1, map0);
      assertNotNull(map1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      Map<String, String> map2 = attributes2.dataset();
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(map2, map1);
      assertNotSame(map2, map0);
      assertNotNull(map2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      
      int int0 = attributes2.size();
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, int0);
      
      Attribute attribute0 = new Attribute("22_", "");
      assertNotNull(attribute0);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      
      Attributes attributes3 = attributes0.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(1, attributes3.size());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("noshade");
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!J]:qhvjPWp=.;";
      stringArray0[1] = "q#3w{";
      stringArray0[2] = "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&";
      stringArray0[3] = "22_";
      stringArray0[4] = "22_";
      attributes3.vals = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(1, attributes3.size());
      
      Writer writer0 = mockFileWriter0.append('5');
      assertSame(writer0, mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
      assertNotNull(writer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      attributes3.html((Appendable) mockFileWriter0, document_OutputSettings0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(mockFileWriter0, writer0);
      assertEquals(1, attributes0.size());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(1, attributes3.size());
      
      int int1 = attributes0.size();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(int1 == int0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, int1);
      
      Attributes attributes4 = attributes1.put("", false);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes4.size());
      
      int int2 = attributes1.size();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, int2);
      
      List<Attribute> list1 = attributes1.asList();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.contains(attribute0));
      
      boolean boolean1 = attributes1.hasKey("noshade");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(boolean1);
      
      Attributes attributes5 = attributes4.put("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "q#3w{");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes5);
      assertSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertSame(attributes5, attributes2);
      assertNotNull(attributes5);
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes5.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "z):~Y|Dx&CF");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes1.putIgnoreCase("", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", true);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      int int0 = attributes2.indexOfKey("");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(1, int0);
      
      int int1 = attributes2.indexOfKey("z):~Y|Dx&CF");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(int1 == int0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals((-1), int1);
      
      String string0 = attributes2.html();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(" org.jsoup.nodes.Attributes$Dataset$EntrySet =\"org.jsoup.nodes.Attributes$Dataset$EntrySet\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " org.jsoup.nodes.Attributes$Dataset$EntrySet =\"org.jsoup.nodes.Attributes$Dataset$EntrySet\"";
      stringArray0[1] = "";
      stringArray0[2] = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      attributes2.keys = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      attributes0.remove("z):~Y|Dx&CF");
      assertFalse(attributes0.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(2, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes1.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset$EntrySet", "z):~Y|Dx&CF");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      attributes0.putIgnoreCase("", "*cM/Vyus");
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "**|Q*x!zeK6TA";
      stringArray0[1] = "**|Q*x!zeK6TA";
      attributes1.vals = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("**|Q*x!zeK6TA", "**|Q*x!zeK6TA");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      attributes1.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset$EntrySet", "V;vd");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      
      int int0 = attributes2.indexOfKey("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(1, int0);
      
      String string0 = attributes0.getIgnoreCase("T)W<t");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals("", string0);
      
      boolean boolean0 = attributes1.hasKeyIgnoreCase("**e!UJ\"");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(boolean0);
      
      attributes2.removeIgnoreCase("**|Q*x!zeK6TA");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Attributes attributes4 = attributes3.put("**|Q*x!zeK6TA", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      String string0 = "class";
      Attributes attributes2 = attributes1.put("class", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put("class", "1LkJ#]8-wG5}V");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      attributes1.remove("1LkJ#]8-wG5}V");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes4 = attributes3.put("Unexpected count of entities loaded", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      // Undeclared exception!
      try { 
        attributes4.indexOfKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        attributes0.addAll((Attributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("jXJ", "jXJ");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("jXJ", "jXJ");
      assertNotNull(attribute0);
      assertEquals("jXJ", attribute0.getValue());
      assertEquals("jXJ", attribute0.getKey());
      
      attributes2.normalize();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      attributes2.addAll(attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jXJ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = attributes1.hasKey("audio");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(boolean2);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("jXJ", attribute0.getValue());
      assertEquals("jXJ", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      attributes3.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("jXJ", attribute0.getValue());
      assertEquals("jXJ", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes2.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertNotNull(attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      attributes4.putIgnoreCase("jXJ", "audio");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(attribute0));
      
      int int0 = attributes0.indexOfKey("org.jsoup.nodes.Attributes");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertEquals(0, attributes0.size());
      assertEquals((-1), int0);
      
      int int1 = attributes0.size();
      assertFalse(int1 == int0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, int1);
      
      attributes3.remove("jXJ");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("jXJ", attribute0.getValue());
      assertEquals("jXJ", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      int int2 = attributes3.size();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("jXJ", attribute0.getValue());
      assertEquals("jXJ", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(2, int2);
      
      boolean boolean3 = attributes2.hasKeyIgnoreCase("nUu%+<a9%jFbF`*%");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("mUy3Sfsvc1<", "mUy3Sfsvc1<");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = new Attribute("B s4)pYNv2<", "mUy3Sfsvc1<", attributes0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertNotNull(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "mUy3Sfsvc1<";
      stringArray0[1] = "mUy3Sfsvc1<";
      stringArray0[2] = "";
      stringArray0[3] = "mUy3Sfsvc1<";
      stringArray0[4] = "mUy3Sfsvc1<";
      stringArray0[5] = "mUy3Sfsvc1<";
      stringArray0[6] = "mUy3Sfsvc1<";
      stringArray0[7] = "mUy3Sfsvc1<";
      attributes2.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attribute attribute1 = new Attribute(".qf5", ",Hsi+]UYCO", attributes1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(".qf5", attribute1.getKey());
      assertEquals(",Hsi+]UYCO", attribute1.getValue());
      
      Attributes attributes4 = attributes0.put(attribute1);
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attributes4);
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(".qf5", attribute1.getKey());
      assertEquals(",Hsi+]UYCO", attribute1.getValue());
      
      Attributes attributes5 = attributes3.put("15", false);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotNull(attributes5);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes5.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      String string0 = attributes5.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes5.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(" mUy3Sfsvc1<=\"mUy3Sfsvc1<\" mUy3Sfsvc1<=\"mUy3Sfsvc1<\"", string0);
      
      Attributes attributes6 = attributes5.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes6.equals((Object)attributes0));
      assertFalse(attributes6.equals((Object)attributes3));
      assertFalse(attributes6.equals((Object)attributes5));
      assertFalse(attributes6.equals((Object)attributes4));
      assertFalse(attributes6.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes6);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes2, attributes6);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes6, attributes0);
      assertNotSame(attributes6, attributes3);
      assertNotSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes4);
      assertNotSame(attributes6, attributes2);
      assertNotSame(attributes6, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotNull(attributes6);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes5.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes6.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      boolean boolean0 = attributes5.hasKey("mUy3Sfsvc1<");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes5.equals((Object)attributes1));
      assertFalse(attributes5.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes6));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes1);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes6);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes2, attributes6);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes5.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertTrue(boolean0);
      
      String string1 = attributes3.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes6));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes2, attributes6);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes6);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("mUy3Sfsvc1<", attribute0.getValue());
      assertEquals("B s4)pYNv2<", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(" mUy3Sfsvc1<=\"mUy3Sfsvc1<\" mUy3Sfsvc1<=\"mUy3Sfsvc1<\"", string1);
      
      attributes4.remove(" mUy3Sfsvc1<=\"mUy3Sfsvc1<\" mUy3Sfsvc1<=\"mUy3Sfsvc1<\"");
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes6));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes6));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes6);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes5);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes6);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attribute1, attribute0);
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(".qf5", attribute1.getKey());
      assertEquals(",Hsi+]UYCO", attribute1.getValue());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "mUy3Sfsvc1<");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("mUy3Sfsvc1<", stringWriter0.toString());
      assertEquals("mUy3Sfsvc1<", stringWriter1.toString());
      
      // Undeclared exception!
      try { 
        attributes5.html((Appendable) stringWriter1, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", "org.jsoup.nodes.Attributes");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put("org.jsoup.nodes.Attributes", "M/5");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes2.put("org.jsoup.nodes.Attributes", true);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      StringWriter stringWriter0 = new StringWriter(1996);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('C');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("C", stringWriter0.toString());
      assertEquals("C", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("C", stringWriter0.toString());
      assertEquals("C", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("C", stringBuffer0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(1996);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1996, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1996, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1996, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1996, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      
      attributes1.html((Appendable) stringBuffer0, document_OutputSettings3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("C  org.jsoup.nodes.Attributes", stringWriter0.toString());
      assertEquals("C  org.jsoup.nodes.Attributes", stringWriter1.toString());
      assertEquals("C  org.jsoup.nodes.Attributes", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1996, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1996, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1996, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1996, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("$NSY}~g<qArdao ", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attribute attribute0 = new Attribute("$NSY}~g<qArdao ", "$NSY}~g<qArdao ");
      assertNotNull(attribute0);
      assertEquals("$NSY}~g<qArdao ", attribute0.getValue());
      assertEquals("$NSY}~g<qArdao", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put("$NSY}~g<qArdao ", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute1 = Attribute.createFromEncoded("kLl 5o", "");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("kLl 5o", attribute1.getKey());
      assertEquals("", attribute1.getValue());
      
      Attributes attributes3 = attributes1.put(attribute0);
      assertFalse(attribute0.equals((Object)attribute1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("$NSY}~g<qArdao ", attribute0.getValue());
      assertEquals("$NSY}~g<qArdao", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      boolean boolean0 = attributes3.hasKeyIgnoreCase("");
      assertFalse(attribute0.equals((Object)attribute1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("$NSY}~g<qArdao ", attribute0.getValue());
      assertEquals("$NSY}~g<qArdao", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertFalse(boolean0);
      
      String string0 = attributes3.html();
      assertFalse(attribute0.equals((Object)attribute1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("$NSY}~g<qArdao ", attribute0.getValue());
      assertEquals("$NSY}~g<qArdao", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(" $NSY}~g<qArdao  $NSY}~g<qArdao=\"$NSY}~g<qArdao \"", string0);
      
      Attributes attributes4 = attributes2.put("$NSY}~g<qArdao ", "");
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean0 = attributes0.hasKey("");
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
      
      int int0 = attributes1.indexOfKey("&amp;");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals((-1), int0);
      
      int int1 = attributes0.size();
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(int1 == int0);
      assertNotSame(attributes0, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, int1);
      
      Attribute attribute0 = new Attribute("&amp;", "&amp;");
      assertNotNull(attribute0);
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      
      boolean boolean1 = attributes0.hasKeyIgnoreCase("");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertEquals(0, attributes0.size());
      assertFalse(boolean1);
      
      attributes1.normalize();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes0.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put("c2sSVTGDj+X}NW", "xZ|Q.9t");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotNull(list0);
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(attribute0));
      
      String string0 = attributes2.toString();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(" &amp;=\"&amp;amp;\" c2sSVTGDj+X}NW=\"xZ|Q.9t\"", string0);
      
      String string1 = attributes2.get("&amp;");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals("&amp;", string1);
      
      String string2 = attributes1.html();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotNull(string2);
      assertEquals(2, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("", string2);
      
      Attributes attributes4 = attributes1.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(1, attributes4.size());
      
      boolean boolean2 = attributes4.equals((Object) null);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute0.getKey());
      assertEquals(1, attributes4.size());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("J('Z2lob.gF+M", "J('Z2lob.gF+M");
      assertNotNull(attribute0);
      assertEquals("J('Z2lob.gF+M", attribute0.getValue());
      assertEquals("J('Z2lob.gF+M", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("J('Z2lob.gF+M", attribute0.getValue());
      assertEquals("J('Z2lob.gF+M", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("J('Z2lob.gF+M", false);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals("J('Z2lob.gF+M", attribute0.getValue());
      assertEquals("J('Z2lob.gF+M", attribute0.getKey());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      boolean boolean0 = attributes2.equals(attributes0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals("J('Z2lob.gF+M", attribute0.getValue());
      assertEquals("J('Z2lob.gF+M", attribute0.getKey());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "=\"";
      Attributes attributes1 = attributes0.put("@**rKuy+\"HI~q", "=\"");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(iterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string1 = "WBT5$YlV,+^J~@";
      Attribute attribute0 = Attribute.createFromEncoded("WBT5$YlV,+^J~@", "WBT5$YlV,+^J~@");
      assertNotNull(attribute0);
      assertEquals("WBT5$YlV,+^J~@", attribute0.getValue());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getValue());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getKey());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getValue());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      attributes3.keys = stringArray0;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getValue());
      assertEquals("WBT5$YlV,+^J~@", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      String string2 = "8y>O=5\"]{xCG0[$";
      // Undeclared exception!
      try { 
        attributes3.remove("8y>O=5\"]{xCG0[$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "";
      boolean boolean0 = true;
      Attributes attributes1 = attributes0.put("", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      attributes0.putIgnoreCase("", "");
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute(",/ZKHB/LL%5e#T", ",/ZKHB/LL%5e#T", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("", ",/ZKHB/LL%5e#T");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes3.put(",/ZKHB/LL%5e#T", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      int int0 = attributes4.indexOfKey(",/ZKHB/LL%5e#T");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getValue());
      assertEquals(",/ZKHB/LL%5e#T", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = attributes0.toString();
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals("", string0);
      
      boolean boolean0 = attributes0.equals("");
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = attributes0.equals("");
      assertTrue(boolean1 == boolean0);
      assertEquals(0, attributes0.size());
      assertFalse(boolean1);
      
      int int0 = attributes0.size();
      assertEquals(0, attributes0.size());
      assertEquals(0, int0);
      
      int int1 = attributes0.indexOfKey("                  ");
      assertFalse(int1 == int0);
      assertEquals(0, attributes0.size());
      assertEquals((-1), int1);
      
      int int2 = attributes0.size();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, attributes0.size());
      assertEquals(0, int2);
      
      String string1 = Attributes.checkNotNull("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attribute attribute0 = new Attribute("*q\"HX%I? 0C", "*q\"HX%I? 0C");
      assertNotNull(attribute0);
      assertEquals("*q\"HX%I? 0C", attribute0.getValue());
      assertEquals("*q\"HX%I? 0C", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("*q\"HX%I? 0C", attribute0.getValue());
      assertEquals("*q\"HX%I? 0C", attribute0.getKey());
      assertEquals("*q\"HX%I? 0C", attribute1.getKey());
      assertEquals("*q\"HX%I? 0C", attribute1.getValue());
      
      boolean boolean0 = attributes1.equals(attribute1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("*q\"HX%I? 0C", attribute0.getValue());
      assertEquals("*q\"HX%I? 0C", attribute0.getKey());
      assertEquals("*q\"HX%I? 0C", attribute1.getKey());
      assertEquals("*q\"HX%I? 0C", attribute1.getValue());
      assertFalse(boolean0);
      
      attributes1.hashCode();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean1 = attributes0.equals(attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(boolean1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("=\"", "=\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // =\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("}iVPJt/']V~VWsg&D", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = new Attribute("o8?>TQ8jaD\"", "o8?>TQ8jaD\"", attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("o8?>TQ8jaD\"", attribute0.getValue());
      assertEquals("o8?>TQ8jaD\"", attribute0.getKey());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("o8?>TQ8jaD\"", attribute0.getValue());
      assertEquals("o8?>TQ8jaD\"", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes3.put("o8?>TQ8jaD\"", "n&q");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertNotNull(attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("o8?>TQ8jaD\"", attribute0.getValue());
      assertEquals("o8?>TQ8jaD\"", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      int int0 = attributes4.indexOfKey("o8?>TQ8jaD\"");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("o8?>TQ8jaD\"", attribute0.getValue());
      assertEquals("o8?>TQ8jaD\"", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "F\\yddr$k=WV!&";
      Attributes attributes1 = attributes0.put("Fyddr$k=WV!&", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      String string1 = "data-";
      Attributes attributes2 = attributes1.put("G+nsS=&cDH=+O ", "data-");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("G+nsS=&cDH=+O ", "fallback");
      assertNotNull(attribute0);
      assertEquals("fallback", attribute0.getValue());
      assertEquals("G+nsS=&cDH=+O", attribute0.getKey());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("fallback", attribute0.getValue());
      assertEquals("G+nsS=&cDH=+O", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      attributes3.vals = null;
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("fallback", attribute0.getValue());
      assertEquals("G+nsS=&cDH=+O", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      // Undeclared exception!
      try { 
        attributes2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = null;
      attributes0.vals = null;
      assertEquals(0, attributes0.size());
      
      String string0 = "L}<Ar=RLU\"fj";
      // Undeclared exception!
      try { 
        attributes0.put("Q|'AR&v:+ %Bn", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "";
      Attributes attributes1 = attributes0.put("", "");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      boolean boolean0 = attributes1.hasKey("");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("5apir6hBGx~Aod+;", "");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = attributes0.html();
      assertSame(attributes0, attributes1);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\"", string0);
      
      Attributes attributes2 = attributes0.put("!G(", "!G(");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      
      attributes0.addAll(attributes2);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotNull(spliterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      attributes2.addAll(attributes0);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      attributes0.removeIgnoreCase("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertTrue(attributes0.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertEquals(2, attributes0.size());
      
      attributes2.putIgnoreCase(") BQA.N!$5I,pD &mO\"", "iyB");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      
      String string1 = attributes0.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotNull(string1);
      assertEquals(3, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" ) BQA.N!$5I,pD &mO\"=\"iyB\"", string1);
      
      String string2 = attributes0.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotNull(string2);
      assertEquals(3, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" ) BQA.N!$5I,pD &mO\"=\"iyB\"", string2);
      
      attributes2.hashCode();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      
      int int0 = attributes1.size();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, int0);
      
      String string3 = attributes0.get(" 5apir6hBGx~Aod+;=\"\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotNull(string3);
      assertEquals(3, attributes0.size());
      assertEquals("", string3);
      
      String string4 = Attributes.checkNotNull("O=X Qie");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("O=X Qie", string4);
      
      Attributes attributes4 = attributes3.clone();
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes4);
      assertEquals(2, attributes4.size());
      assertEquals(3, attributes0.size());
      assertEquals(2, attributes3.size());
      
      boolean boolean0 = attributes4.hasKeyIgnoreCase("org.jsoup.SerializationException");
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertEquals(2, attributes4.size());
      assertEquals(3, attributes0.size());
      assertEquals(2, attributes3.size());
      assertFalse(boolean0);
      
      Attributes attributes5 = attributes2.put("", " 5apir6hBGx~Aod+;=\"\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes4);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes5);
      assertNotNull(attributes5);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes5.size());
      assertEquals(4, attributes2.size());
      
      boolean boolean1 = attributes4.equals(attributes5);
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertTrue(boolean1 == boolean0);
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes5));
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes4);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertSame(attributes5, attributes2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes5);
      assertEquals(2, attributes4.size());
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes5.size());
      assertEquals(4, attributes2.size());
      assertEquals(2, attributes3.size());
      assertFalse(boolean1);
      
      String string5 = attributes1.html();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotNull(string5);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" ) BQA.N!$5I,pD &mO\"=\"iyB\" =\" 5apir6hBGx~Aod+;=&quot;&quot;\"", string5);
      
      List<Attribute> list0 = attributes3.asList();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes5));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes5);
      assertNotNull(list0);
      assertEquals(4, attributes0.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        attributes2.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "default";
      Attributes attributes1 = attributes0.put("default", (String) null);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
      try { 
        attributes2.put((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("#utnGU15", "#utnGU15");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("#utnGU15", "org.jsoup.nodes.Attributes");
      assertNotNull(attribute0);
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("#utnGU15", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("#utnGU15", attribute0.getKey());
      assertEquals("#utnGU15", attribute1.getKey());
      assertEquals("org.jsoup.nodes.Attributes", attribute1.getValue());
      
      Attributes attributes3 = attributes2.put(attribute1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("#utnGU15", attribute0.getKey());
      assertEquals("#utnGU15", attribute1.getKey());
      assertEquals("org.jsoup.nodes.Attributes", attribute1.getValue());
      assertEquals(1, attributes3.size());
      
      boolean boolean0 = attributes3.equals((Object) null);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("#utnGU15", attribute0.getKey());
      assertEquals("#utnGU15", attribute1.getKey());
      assertEquals("org.jsoup.nodes.Attributes", attribute1.getValue());
      assertEquals(1, attributes3.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      List<Attribute> list0 = attributes0.asList();
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Attributes attributes1 = attributes0.put("", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      List<Attribute> list1 = attributes1.asList();
      assertTrue(list1.equals((Object)list0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string0 = attributes0.get("");
      assertSame(attributes0, attributes1);
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals("", string0);
      
      attributes1.putIgnoreCase("", "K");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertSame(attributes0, attributes1);
      assertNotNull(map0);
      assertEquals(1, attributes0.size());
      
      String string1 = attributes1.html();
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" =\"K\"", string1);
      
      attributes1.remove("");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean0 = attributes1.equals(list0);
      assertTrue(list0.equals((Object)list1));
      assertSame(attributes0, attributes1);
      assertNotSame(list0, list1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, attributes1.size());
      assertFalse(boolean0);
      
      Attributes attributes2 = attributes0.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertFalse(attributes0.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotNull(iterator0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes3 = attributes2.put("K", "");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = attributes2.equals(object0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertTrue(boolean1 == boolean0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes2.size());
      assertFalse(boolean1);
      
      attributes0.remove(" =\"K\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertEquals(0, attributes0.size());
      
      String string2 = "";
      Attributes attributes4 = attributes1.put("", "");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes1.size());
      
      attributes4.addAll(attributes3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      attributes0.remove("K");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertEquals(1, attributes0.size());
      
      boolean boolean2 = attributes4.hasKey("");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes1.size());
      assertTrue(boolean2);
      
      Iterator<Attribute> iterator1 = attributes0.iterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(iterator1.equals((Object)iterator0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      attributes1.addAll(attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      int int0 = attributes1.size();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, int0);
      
      int int1 = attributes1.hashCode();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(int1 == int0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      File file0 = MockFile.createTempFile("Onp", "org.jsoup.nodes.Attributes", (File) null);
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T/Onp0org.jsoup.nodes.Attributes", file0.toString());
      assertEquals("Onp0org.jsoup.nodes.Attributes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println(0);
      assertFalse(file0.isDirectory());
      assertEquals(2L, file0.length());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T/Onp0org.jsoup.nodes.Attributes", file0.toString());
      assertEquals("Onp0org.jsoup.nodes.Attributes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      PrintStream printStream0 = mockPrintStream0.append('e');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertFalse(file0.isDirectory());
      assertEquals(3L, file0.length());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T/Onp0org.jsoup.nodes.Attributes", file0.toString());
      assertEquals("Onp0org.jsoup.nodes.Attributes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      attributes1.html((Appendable) mockPrintStream1, document_OutputSettings0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(file0.isDirectory());
      assertEquals(3L, file0.length());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/var/folders/1d/nf2vf2fn7114fcl6yd7yh8f80000gn/T/Onp0org.jsoup.nodes.Attributes", file0.toString());
      assertEquals("Onp0org.jsoup.nodes.Attributes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        attributes1.hasKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      int int0 = attributes1.indexOfKey("");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals((-1), int0);
      
      Attributes attributes2 = attributes1.put("wKl", false);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotNull(spliterator0);
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = attributes2.hasKeyIgnoreCase("wKl");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertFalse(boolean0);
      
      attributes1.removeIgnoreCase("wKl");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes3 = attributes0.clone();
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes0));
      assertTrue(attributes3.equals((Object)attributes2));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes3.size());
      
      Attributes attributes4 = attributes2.put("wKl", (String) null);
      assertTrue(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotNull(attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("     ", "     ");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      String string0 = "=fR['Ex$0";
      String string1 = null;
      String string2 = "g_A";
      String string3 = attributes2.getIgnoreCase("eU#cP#");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(string3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("", string3);
      
      boolean boolean0 = attributes2.hasKeyIgnoreCase("g_A");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("=fR['Ex$0", (String) null);
      assertNotNull(attribute0);
      assertNull(attribute0.getValue());
      assertEquals("=fR['Ex$0", attribute0.getKey());
      
      Spliterator<Attribute> spliterator0 = attributes2.spliterator();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(spliterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNull(attribute0.getValue());
      assertEquals("=fR['Ex$0", attribute0.getKey());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes2.put("`iEGyCp:O~=JL yRS~", "     ");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes4.size());
      
      String string4 = attributes3.getIgnoreCase("     ");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotNull(string4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(3, attributes2.size());
      assertNull(attribute0.getValue());
      assertEquals("=fR['Ex$0", attribute0.getKey());
      assertEquals(3, attributes3.size());
      assertEquals("     ", string4);
      
      Iterator<Attribute> iterator0 = attributes3.iterator();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes4);
      assertNotNull(iterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(3, attributes2.size());
      assertNull(attribute0.getValue());
      assertEquals("=fR['Ex$0", attribute0.getKey());
      assertEquals(3, attributes3.size());
      
      int int0 = attributes1.size();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        attributes0.removeIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      assertNotNull(attribute0);
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getKey());
      
      Attributes attributes4 = attributes3.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getKey());
      assertEquals(1, attributes4.size());
      
      attributes4.putIgnoreCase("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes", attribute0.getKey());
      assertEquals(1, attributes4.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("      ", "( `9Wt^");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.putIgnoreCase((String) null, "org.jsoup.nodes.Attributes$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = attributes0.hasKey("");
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
      
      String string0 = attributes0.toString();
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals("", string0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("", "");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes1.clone();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes3.size());
      
      int int0 = attributes0.indexOfKey(",ZvR&5(\"C|!dHyvq/q");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      int int0 = attributes0.size();
      assertEquals(0, attributes0.size());
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = "\"+m7lQ^>O*)&g 0S";
      Attributes attributes1 = attributes0.put("\"+m7lQ^>O*)&g 0S", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("\"+m7lQ^>O*)&g 0S", "\"+m7lQ^>O*)&g 0S");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"+m7lQ^>O*)&g 0S";
      stringArray0[1] = "\"+m7lQ^>O*)&g 0S";
      stringArray0[2] = "ZO8Svf0YY1";
      stringArray0[3] = "\"+m7lQ^>O*)&g 0S";
      stringArray0[4] = "\"+m7lQ^>O*)&g 0S";
      attributes2.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Iterator<Attribute> iterator0 = attributes3.iterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(iterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      Attributes attributes4 = attributes3.put("\"+m7lQ^>O*)&g 0S", true);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("\"+m7lQ^>O*)&g 0S");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        attributes1.put((String) null, "\"+m7lQ^>O*)&g 0S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      String string0 = null;
      boolean boolean0 = false;
      String string1 = attributes0.html();
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertNotNull(string1);
      assertEquals(0, attributes0.size());
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        attributes0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("01oBd{z;oQ>XMNk", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attribute attribute0 = new Attribute("01oBd{z;oQ>XMNk", "&amp;", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals(0, attributes0.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      
      Attributes attributes2 = attributes1.put(attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(1, attributes2.size());
      
      Map<String, String> map0 = attributes1.dataset();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotNull(map0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      List<Attribute> list0 = attributes2.asList();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(list0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(1, attributes2.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(attribute0));
      
      Attributes attributes3 = attributes2.put("pm]kPr", "pm]kPr");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes2.addAll(attributes0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      
      String string0 = attributes3.getIgnoreCase("&amp;");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("", string0);
      
      List<Attribute> list1 = attributes3.asList();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(list1.equals((Object)list0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list1.contains(attribute0));
      
      String string1 = attribute0.toString();
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("01oBd{z;oQ>XMNk=\"&amp;amp;\"", string1);
      
      attributes3.removeIgnoreCase("&amp;");
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes2.clone();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("01oBd{z;oQ>XMNk", attribute0.getKey());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("&amp;", attribute1.getValue());
      assertEquals("01oBd{z;oQ>XMNk", attribute1.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes4.size());
      
      // Undeclared exception!
      try { 
        attributes2.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        attributes0.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("S1$SIp", "S1$SIp");
      assertNotNull(attribute0);
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put("S1$SIp", true);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      String string0 = attributes1.get("S1$SIp");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", string0);
      
      Attributes attributes4 = attributes3.put("S1$SIp", "");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      
      String string1 = attributes3.html();
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotNull(string1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(" S1$SIp=\"\"", string1);
      
      Attributes attributes5 = attributes4.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertNotNull(attributes5);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      
      List<Attribute> list0 = attributes1.asList();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(attribute0));
      
      List<Attribute> list1 = attributes4.asList();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(list1.contains(attribute0));
      
      String string2 = "&B";
      int int0 = attributes5.indexOfKey("&B");
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes5.equals((Object)attributes0));
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes3);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      assertEquals((-1), int0);
      
      int int1 = attributes4.size();
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(int1 == int0);
      assertNotSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes5);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes4, attributes5);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("S1$SIp", attribute0.getValue());
      assertEquals("S1$SIp", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        attributes5.put((String) null, "            ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = Attributes.checkNotNull("{*gq,=#u5#|4_");
      assertNotNull(string0);
      assertEquals("{*gq,=#u5#|4_", string0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("{*gq,=#u5#|4_", "{*gq,=#u5#|4_");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        attributes1.indexOfKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertSame(attributes0, attributes1);
      assertNotNull(spliterator0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jsoup.nodes.Attributes$Dataset";
      String string0 = "ukBXsV(&uxGn}&+Nu";
      stringArray0[1] = "ukBXsV(&uxGn}&+Nu";
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      attributes2.removeIgnoreCase("org.jsoup.nodes.Attributes$Dataset");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      boolean boolean0 = attributes2.hasKey("");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertFalse(boolean0);
      
      attributes0.remove("ukBXsV(&uxGn}&+Nu");
      assertFalse(attributes0.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes$Dataset", "");
      assertNotNull(attribute0);
      assertEquals("org.jsoup.nodes.Attributes$Dataset", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("org.jsoup.nodes.Attributes$Dataset", attribute0.getKey());
      assertEquals("", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Attributes$Dataset", attribute1.getKey());
      assertEquals("", attribute1.getValue());
      
      // Undeclared exception!
      try { 
        attributes2.put(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = attributes0.hasKey("");
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        attributes0.getIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("summary", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      String string0 = attributes1.get("org.jsoup.nodes.Attributes");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("", string0);
      
      Attribute attribute0 = Attribute.createFromEncoded("summary", "'uK");
      assertNotNull(attribute0);
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      
      Attribute attribute2 = attribute0.clone();
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute2.equals((Object)attribute0));
      assertTrue(attribute2.equals((Object)attribute1));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute2, attribute0);
      assertNotSame(attribute2, attribute1);
      assertNotNull(attribute2);
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute2.getKey());
      assertEquals("'uK", attribute2.getValue());
      
      Attributes attributes2 = attributes1.put(attribute1);
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(1, attributes2.size());
      
      boolean boolean0 = attributes1.hasKey("!G(");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
      
      Attributes attributes3 = attributes2.put("'uK", "/@P?-*");
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Attributes attributes4 = attributes3.clone();
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotNull(attributes4);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      attributes4.normalize();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, attributes4.size());
      
      int int0 = attributes3.size();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, int0);
      
      attributes0.addAll(attributes1);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      attributes2.normalize();
      assertTrue(attributes0.equals((Object)attributes4));
      assertTrue(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertTrue(attributes2.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      
      Attributes attributes5 = attributes1.clone();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes1));
      assertTrue(attributes5.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes0));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertNotSame(attributes5, attributes0);
      assertNotNull(attributes5);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes5.size());
      
      String string1 = attributes1.get("/@P?-*");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("", string1);
      
      Iterator<Attribute> iterator0 = attributes3.iterator();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertNotNull(iterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes3.putIgnoreCase("'uK", "U7(&>^![pjaa");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes0.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes5));
      assertFalse(attributes1.equals((Object)attributes4));
      assertTrue(attribute0.equals((Object)attribute2));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute2));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes4));
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes5);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute1, attribute2);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes5);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes4);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("'uK", attribute0.getValue());
      assertEquals("summary", attribute0.getKey());
      assertEquals("summary", attribute1.getKey());
      assertEquals("'uK", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("5apir6hBGx~Aod+;", "");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = attributes1.html();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\"", string0);
      
      Attributes attributes2 = attributes0.put("!G(", "!G(");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes0.clone();
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes3.size());
      
      attributes0.addAll(attributes2);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotNull(spliterator0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      attributes2.addAll(attributes0);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes2.size());
      
      attributes2.putIgnoreCase("", "L5_yl{biBFO]l{rHd");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes2.size());
      
      attributes0.removeIgnoreCase("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertFalse(attributes0.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(3, attributes0.size());
      
      attributes2.putIgnoreCase(") BQA.N!$5I,pD &mO\"", "iyB");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes2.size());
      
      String string1 = attributes0.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string1);
      assertEquals(4, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\"L5_yl{biBFO]l{rHd\" ) BQA.N!$5I,pD &mO\"=\"iyB\"", string1);
      
      String string2 = attributes0.toString();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string2);
      assertEquals(4, attributes0.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\"L5_yl{biBFO]l{rHd\" ) BQA.N!$5I,pD &mO\"=\"iyB\"", string2);
      
      attributes2.hashCode();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes2.size());
      
      int int0 = attributes1.size();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals(4, int0);
      
      String string3 = attributes0.get(" 5apir6hBGx~Aod+;=\"\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string3);
      assertEquals(4, attributes0.size());
      assertEquals("", string3);
      
      String string4 = Attributes.checkNotNull("O=X Qie");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("O=X Qie", string4);
      
      Attributes attributes4 = attributes3.clone();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes4);
      assertEquals(4, attributes0.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes3.size());
      
      boolean boolean0 = attributes4.hasKeyIgnoreCase("org.jsoup.SerializationException");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals(2, attributes4.size());
      assertEquals(2, attributes3.size());
      assertFalse(boolean0);
      
      Attributes attributes5 = attributes2.put("", " 5apir6hBGx~Aod+;=\"\"");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes5);
      assertNotNull(attributes5);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes5.size());
      assertEquals(4, attributes2.size());
      
      boolean boolean1 = attributes4.equals(attributes5);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes5));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes3));
      assertFalse(attributes5.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertTrue(boolean1 == boolean0);
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes4, attributes5);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertSame(attributes5, attributes2);
      assertSame(attributes5, attributes1);
      assertSame(attributes5, attributes0);
      assertNotSame(attributes5, attributes3);
      assertNotSame(attributes5, attributes4);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes5);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals(2, attributes4.size());
      assertEquals(4, attributes5.size());
      assertEquals(4, attributes2.size());
      assertEquals(2, attributes3.size());
      assertFalse(boolean1);
      
      String string5 = attributes1.html();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes5);
      assertNotSame(attributes1, attributes4);
      assertNotNull(string5);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals(" 5apir6hBGx~Aod+;=\"\" !G(=\"!G(\" =\" 5apir6hBGx~Aod+;=&quot;&quot;\" ) BQA.N!$5I,pD &mO\"=\"iyB\"", string5);
      
      List<Attribute> list0 = attributes3.asList();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes5));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes5);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes5);
      assertNotSame(attributes3, attributes1);
      assertNotNull(list0);
      assertEquals(4, attributes0.size());
      assertEquals(2, attributes3.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        attributes2.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("22_", "");
      assertNotNull(attribute0);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("noshade");
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "q#3w{";
      stringArray0[2] = "q#3w{";
      stringArray0[3] = "22_";
      stringArray0[4] = "22_";
      Writer writer0 = mockFileWriter0.append('5');
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      assertNotNull(writer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.put("q#3w{", false);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      attributes1.putIgnoreCase("`]RS@Q0psU", ";x?~HSw");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes2.html((Appendable) mockFileWriter0, document_OutputSettings0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertSame(mockFileWriter0, writer0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotNull(spliterator0);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      Attributes attributes4 = attributes3.put("seamless", (String) null);
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes4);
      assertEquals(3, attributes4.size());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      
      String string0 = attributes4.html();
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(string0);
      assertEquals(3, attributes4.size());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals(" 22_=\"\" `]RS@Q0psU=\";x?~HSw\" seamless", string0);
      
      Iterator<Attribute> iterator0 = attributes4.iterator();
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes4);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotNull(iterator0);
      assertEquals(3, attributes4.size());
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(3, attributes3.size());
      
      Iterator<Attribute> iterator1 = attributes2.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes3));
      assertNotSame(iterator1, iterator0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotNull(iterator1);
      assertEquals("", attribute0.getValue());
      assertEquals("22_", attribute0.getKey());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("/@P?-*", "/@P?-*");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attribute attribute0 = new Attribute("/@P?-*", "seamless");
      assertNotNull(attribute0);
      assertEquals("seamless", attribute0.getValue());
      assertEquals("/@P?-*", attribute0.getKey());
      
      Attribute attribute1 = Attribute.createFromEncoded("CC469SYRwZ8SN\"mJ&=", "/@P?-*");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      
      Attributes attributes2 = attributes1.put(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      boolean boolean0 = attributes3.hasKey("CC469SYRwZ8SN\"mJ&=");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertTrue(boolean0);
      
      Map<String, String> map0 = attributes3.dataset();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(map0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = attributes1.getIgnoreCase("/@P?-*");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotNull(string0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("/@P?-*", string0);
      
      attributes1.addAll(attributes3);
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(attributes2.equals((Object)attributes3));
      assertTrue(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes1));
      assertTrue(attributes3.equals((Object)attributes0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      attributes1.putIgnoreCase("WHC}n{%(AK8s", "/@P?-*");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      
      attributes1.removeIgnoreCase("CC469SYRwZ8SN\"mJ&=");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      
      int int0 = attributes3.indexOfKey("/@P?-*");
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("/@P?-*", "/@P?-*");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attribute attribute0 = new Attribute("M;", "seamless");
      assertNotNull(attribute0);
      assertEquals("M;", attribute0.getKey());
      assertEquals("seamless", attribute0.getValue());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("M;", attribute0.getKey());
      assertEquals("seamless", attribute0.getValue());
      assertEquals(2, attributes2.size());
      
      Attribute attribute1 = Attribute.createFromEncoded("CC469SYRwZ8SN\"mJ&=", "/@P?-*");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      
      Attributes attributes3 = attributes1.put(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      
      Attributes attributes4 = attributes3.clone();
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes4.size());
      
      boolean boolean0 = attributes4.hasKey("CC469SYRwZ8SN\"mJ&=");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes4.size());
      assertTrue(boolean0);
      
      Map<String, String> map0 = attributes4.dataset();
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertNotNull(map0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes4.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string0 = attributes1.getIgnoreCase("/@P?-*");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotNull(string0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("/@P?-*", string0);
      
      attributes1.addAll(attributes4);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes4.size());
      
      attributes1.putIgnoreCase("WHC}n{%(AK8s", "/@P?-*");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      
      attributes1.removeIgnoreCase("CC469SYRwZ8SN\"mJ&=");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      
      int int0 = attributes4.indexOfKey("M;");
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("CC469SYRwZ8SN\"mJ&=", attribute1.getKey());
      assertEquals("/@P?-*", attribute1.getValue());
      assertEquals(3, attributes3.size());
      assertEquals(3, attributes4.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("", "=\"");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes1.put("", false);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      
      Attribute attribute0 = new Attribute("=\"", "=\"", attributes3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertEquals("=\"", attribute0.getKey());
      assertEquals("=\"", attribute0.getValue());
      
      Attributes attributes4 = attributes3.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes3.size());
      assertEquals("=\"", attribute0.getKey());
      assertEquals("=\"", attribute0.getValue());
      assertEquals(1, attributes4.size());
      
      Attributes attributes5 = attributes4.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes5.equals((Object)attributes2));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes5, attributes3);
      assertSame(attributes5, attributes4);
      assertSame(attributes5, attributes0);
      assertSame(attributes5, attributes1);
      assertNotSame(attributes5, attributes2);
      assertNotNull(attributes5);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes3.size());
      assertEquals("=\"", attribute0.getKey());
      assertEquals("=\"", attribute0.getValue());
      assertEquals(1, attributes4.size());
      assertEquals(1, attributes5.size());
      
      String string0 = attribute0.setValue("m<(1|wM9:>94NVR?6[");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes1);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes3.size());
      assertEquals("m<(1|wM9:>94NVR?6[", attribute0.getValue());
      assertEquals("=\"", attribute0.getKey());
      assertEquals("=\"", string0);
      
      String string1 = attributes0.getIgnoreCase("=\"");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals("m<(1|wM9:>94NVR?6[", string1);
      
      Attributes attributes6 = attributes4.put("=\"", false);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertFalse(attributes6.equals((Object)attributes2));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes6);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes6);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertSame(attributes6, attributes4);
      assertSame(attributes6, attributes5);
      assertNotSame(attributes6, attributes2);
      assertSame(attributes6, attributes1);
      assertSame(attributes6, attributes3);
      assertSame(attributes6, attributes0);
      assertNotNull(attributes6);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertEquals("m<(1|wM9:>94NVR?6[", attribute0.getValue());
      assertEquals("=\"", attribute0.getKey());
      assertEquals(0, attributes4.size());
      assertEquals(0, attributes6.size());
      
      attributes0.addAll(attributes4);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes4.equals((Object)attributes2));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes6);
      assertSame(attributes3, attributes1);
      assertSame(attributes4, attributes5);
      assertSame(attributes4, attributes6);
      assertSame(attributes4, attributes3);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertEquals("m<(1|wM9:>94NVR?6[", attribute0.getValue());
      assertEquals("=\"", attribute0.getKey());
      assertEquals(0, attributes4.size());
      
      attributes2.removeIgnoreCase("");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes5));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes6));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes5);
      assertNotSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes6);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes3.equals(object0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes2));
      assertSame(attributes0, attributes5);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes6);
      assertSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes6);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes5);
      assertSame(attributes1, attributes0);
      assertSame(attributes3, attributes4);
      assertSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(attributes3, attributes5);
      assertSame(attributes3, attributes6);
      assertSame(attributes3, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes3.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = attributes0.hasKeyIgnoreCase("adBDr#");
      assertFalse(boolean1 == boolean0);
      assertEquals(0, attributes0.size());
      assertFalse(boolean1);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, attributes0.size());
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, attributes0.size());
      
      String string0 = Attributes.checkNotNull("adBDr#");
      assertNotNull(string0);
      assertEquals("adBDr#", string0);
      
      Attributes attributes1 = attributes0.put("adBDr#", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      boolean boolean2 = attributes1.hasKeyIgnoreCase("adBDr#");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(boolean2);
      
      attributes1.putIgnoreCase("adBDr#", "Q{&BOMtU5<0&o~g)k{");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string1 = Attributes.dataPrefix;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("data-", string1);
      
      attributes1.putIgnoreCase("adBDr#", "adBDr#");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Iterator<Attribute> iterator1 = attributes0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertSame(attributes0, attributes1);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertEquals(1, attributes0.size());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = Attributes.checkNotNull("Q{&BOMtU5<0&o~g)k{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Q{&BOMtU5<0&o~g)k{", string2);
      
      attributes0.removeIgnoreCase("data-");
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      
      boolean boolean4 = attributes1.hasKeyIgnoreCase("adBDr#");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(boolean4);
      
      String string3 = attributes0.html();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(attributes0, attributes1);
      assertNotNull(string3);
      assertEquals(1, attributes0.size());
      assertEquals(" adBDr#=\"adBDr#\"", string3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, attributes0.size());
      
      attributes0.remove("CJ3#h~GnnW/124b");
      assertEquals(0, attributes0.size());
      
      attributes0.normalize();
      assertEquals(0, attributes0.size());
      
      Spliterator<Attribute> spliterator1 = attributes0.spliterator();
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      attributes1.addAll(attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      List<Attribute> list0 = attributes0.asList();
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertNotNull(list0);
      assertEquals(0, attributes0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.remove("m<(1|wM9:>94NVR?6[");
      assertEquals(0, attributes0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributes0.hasKey("0_^");
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String[] stringArray0 = new String[3];
      Attributes attributes1 = attributes0.put("q#3w{", "l2BSN$`.SA+;,8*}*W");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      stringArray0[0] = "mNH,ti";
      stringArray0[1] = "aeb";
      stringArray0[2] = "";
      attributes0.vals = stringArray0;
      assertEquals(1, attributes0.size());
      
      attributes0.putIgnoreCase("aeb", "aeb");
      assertSame(attributes0, attributes1);
      assertEquals(2, attributes0.size());
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("p*{");
      assertSame(attributes0, attributes1);
      assertEquals(2, attributes0.size());
      assertFalse(boolean0);
      
      Iterator<Attribute> iterator0 = attributes0.iterator();
      assertSame(attributes0, attributes1);
      assertNotNull(iterator0);
      assertEquals(2, attributes0.size());
      
      boolean boolean1 = attributes0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertSame(attributes0, attributes1);
      assertEquals(2, attributes0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      attributes0.remove("data-");
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Jgx}+dy,I'j.8", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes1.clone();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      String string0 = attributes1.getIgnoreCase("data-");
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("", string0);
      
      Attributes attributes3 = attributes2.clone();
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      attributes0.addAll(attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes3));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      List<Attribute> list0 = attributes2.asList();
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotNull(list0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      List<Attribute> list1 = attributes0.asList();
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(1, attributes0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      Attributes attributes4 = attributes2.put("Jgx}+dy,I'j.8", "Jgx}+dy,I'j.8");
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes4, attributes2);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes0);
      assertNotNull(attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      
      attributes0.normalize();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertEquals(1, attributes0.size());
      
      Iterator<Attribute> iterator0 = attributes2.iterator();
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes4);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes4);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes4);
      assertNotSame(attributes2, attributes1);
      assertNotNull(iterator0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "Jgx}+dy,I'j.8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      
      attributes0.html();
      Attributes attributes1 = attributes0.clone();
      attributes0.toString();
      attributes0.removeIgnoreCase("");
      attributes1.hasKey("");
      attributes1.remove("");
      attributes0.normalize();
      attributes1.normalize();
      attributes1.toString();
      attributes1.equals(attributes0);
      attributes0.indexOfKey("");
      attributes0.getIgnoreCase("");
      attributes1.get("");
      attributes1.iterator();
      assertTrue(attributes1.equals((Object)attributes0));
      
      attributes1.putIgnoreCase("KKi~X'", "N;4Zu%Q#h-`7*");
      attributes1.putIgnoreCase("KKi~X'", "&=KO+m$r;=([L");
      attributes1.iterator();
      assertEquals(1, attributes1.size());
      
      attributes0.put("", false);
      assertFalse(attributes0.equals((Object)attributes1));
      
      boolean boolean0 = attributes1.hasKey("KKi~X'");
      assertEquals(1, attributes1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.indexOfKey("");
      attributes0.get("");
      Attributes attributes1 = attributes0.put("adBDr#", "");
      attributes0.indexOfKey("");
      attributes0.iterator();
      attributes0.indexOfKey("utf");
      attributes0.dataset();
      attributes0.toString();
      boolean boolean0 = true;
      Attributes attributes2 = attributes0.put("utf", true);
      attributes1.hasKeyIgnoreCase("utf");
      attributes2.dataset();
      attributes0.hashCode();
      attributes1.normalize();
      MockFile mockFile0 = new MockFile("");
      String string0 = "ZX*j,-T";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "ZX*j,-T");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
