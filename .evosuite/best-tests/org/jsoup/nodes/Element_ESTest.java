/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:26:44 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell(",XgFvS");
      Document document1 = document0.normalise();
      document1.hasClass("truespeed");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element0 = document1.appendTo(document0);
      document0.head();
      String string0 = "AttributeValue_singleQuoted";
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("Children collection to be inserted must not be null.");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings1.prepareEncoder();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.head();
      element0.reparentChild(document1);
      element0.nextElementSiblings();
      document0.getElementsByClass("<br>");
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "T_F} D]R+@{3vDR";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("T_F} D]R+@{3vDR", parseSettings0);
      Element element0 = new Element(tag0, "T_F} D]R+@{3vDR");
      Element element1 = element0.prependElement("T_F} D]R+@{3vDR");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 't_f}': unexpected token at '}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(959);
      Parser parser2 = Parser.htmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment(" <%s>", "#roo[t");
      Document document1 = document0.clone();
      Document document2 = document1.parser(parser1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Element element0 = document3.body();
      Document document4 = Parser.parseBodyFragmentRelaxed("class", " <%s>");
      ParseErrorList parseErrorList0 = parser2.getErrors();
      List<Node> list0 = Parser.parseFragment("!ou/G", element0, " <%s>", parseErrorList0);
      Document document5 = document0.parser(parser2);
      Element element1 = document4.body();
      element1.val();
      element1.cssSelector();
      Element element2 = document5.doClone(document3);
      element2.clearAttributes();
      document3.val("class");
      String string0 = Node.EmptyString;
      element2.dataNodes();
      element0.elementSiblingIndex();
      // Undeclared exception!
      try { 
        element2.insertChildren(959, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      String string0 = Node.EmptyString;
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      element1.prepend("Initial");
      element0.children();
      document0.getElementsByAttributeValueNot("Children collection to be inserted must not be null.", "Bbp !C//U!s]wHgc)");
      element1.after((Node) element2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      Element element5 = (Element)element4.clearAttributes();
      element5.text("OcY2WR@V@eF,NZP]?>_");
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element6 = element0.tagName("zq.]");
      Element element7 = element6.prependText("br");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element8 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element8.setBaseUri("GOJ?^Po?}");
      element8.getElementsByIndexLessThan(1);
      element3.setBaseUri("zq.]");
      element7.val();
      element7.text();
      element6.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(1);
      Document document0 = new Document("");
      element3.getElementsByIndexEquals(1);
      element3.getElementsByIndexGreaterThan(1010);
      element7.getElementById("[^-a-zA-Z0-9_:.]");
      element4.siblingElements();
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      String string0 = Node.EmptyString;
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      Element element3 = new Element("Bbp !C//U!s]wHgc)");
      element1.prepend("");
      element0.children();
      element2.attr("", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("zq.]", "zq.]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zq.]");
      Element element0 = document0.body();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)4;
      element0.removeAttr("html");
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      element0.id();
      element0.ownText();
      Pattern pattern0 = Pattern.compile("");
      pattern0.splitAsStream("zq.]");
      Pattern.compile("zq.]", (int) (byte) (-70));
      document0.getElementsByAttributeValueMatching("^+j`OTV.|72[9qhX", pattern0);
      document0.wholeText();
      document0.isBlock();
      Element element1 = element0.after((Node) document0);
      DataNode dataNode0 = DataNode.createFromEncoded("Insert position out of bounds.", "zC");
      DataNode dataNode1 = dataNode0.setWholeData("M*v7@F` %v*R|");
      element1.prependChild(dataNode1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document1.body();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document0.toggleClass("<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element0.previousElementSibling();
      document2.hasClass("<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment("b}fQGpZazu", "kgl+GUzmg1+ParNF");
      Element element0 = document0.head();
      document0.attr("InCaption");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Document document1 = (Document)document0.text("kgl+GUzmg1+ParNF");
      document1.ownText();
      document1.siblingElements();
      document1.nodelistChanged();
      document1.getElementsByAttributeStarting("kgl+GUzmg1+ParNF");
      Element element1 = element0.removeClass("kgl+GUzmg1+ParNF");
      element1.text();
      element1.wrap(".hZT<D)Fs;C>ib4");
      element0.wholeText();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell(",XgFvS");
      Document document1 = document0.normalise();
      document1.hasClass("truespeed");
      document1.appendTo(document0);
      Element element0 = document0.attr("truespeed", false);
      String string0 = "AttributeValue_singleQuoted";
      String string1 = null;
      // Undeclared exception!
      element0.after("h_");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document1.body();
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.title("iIems)e");
      document0.getAllElements();
      element0.getElementsByTag("iIems)e");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "iIems)e Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document0.toggleClass("<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Element element1 = element0.previousElementSibling();
      element1.append("Bbp !C//U!s]wHgc)");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      document0.className();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      Document document3 = (Document)document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document2.removeAttr("eT~");
      document0.hasClass("n>tAM");
      document1.val();
      document3.data();
      document3.attributes();
      document2.getElementsByAttributeValueEnding("org.jsoup.parser.Parser", "</");
      document3.appendText("m=4?_8~/>8dx_");
      element0.getElementsMatchingText("]H}It:g@,Cv3");
      document0.text();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell(",XgFvS");
      Document document1 = document0.normalise();
      document1.hasClass("truespeed");
      document1.appendTo(document0);
      // Undeclared exception!
      document0.before("R]`)aybDkn");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("SYk9#/-O", "SYk9#/-O");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Document document2 = document1.parser(parser1);
      // Undeclared exception!
      try { 
        document2.child((-1436010313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ":'$QH_\"QG#H;SEcGZ}R";
      Document document0 = new Document(":'$QH_\"QG#H;SEcGZ}R");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":'$QH_\"QG#H;SEcGZ}R");
      document0.className();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.siblingIndex = 9;
      document0.html();
      document0.removeAttr("");
      String string1 = "`l<uB<P3b";
      document0.getElementsContainingOwnText("`l<uB<P3b");
      document0.siblingNodes();
      Element element0 = document0.appendText("");
      document0.nextElementSiblings();
      document0.dataset();
      // Undeclared exception!
      try { 
        element0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader(" />");
      Document document0 = parser0.parseInput((Reader) stringReader0, " />");
      parser0.setTrackErrors(6);
      document0.attr("footer", false);
      String string0 = "[^-a-za-z@z-9_:l]";
      Document document1 = Parser.parseBodyFragmentRelaxed("[^-a-za-z@z-9_:l]", " />");
      Document document2 = (Document)document0.doClone(document1);
      document0.hasClass("BogusDoctype");
      document2.firstElementSibling();
      StringBuilder stringBuilder0 = new StringBuilder(6);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(6);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(6, (long) 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell(",XgFvS");
      Document document1 = document0.normalise();
      document1.reparentChild(document0);
      document1.hasClass("truespeed");
      document1.appendTo(document0);
      document1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document2.getAllElements();
      Document document3 = (Document)document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document1.classNames();
      document0.hasClass("n>tAM");
      document1.val();
      document3.data();
      document2.getElementsByAttributeValueEnding("org.jsoup.parser.Parser", "</");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("22BDA9H4fKfqg&A7", "22BDA9H4fKfqg&A7");
      Element element0 = document0.appendElement("22BDA9H4fKfqg&A7");
      element0.parents();
      element0.getElementsByIndexEquals(62);
      element0.setParentNode(document0);
      element0.parent();
      document0.getElementsByAttributeStarting("org.jsoup.nodes.Element");
      document0.val("#");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      // Undeclared exception!
      try { 
        element0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("itemscope");
      document0.text();
      Element element1 = document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      element1.childNodeSize();
      document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document0.hasClass("n>tAM");
      element0.parent();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'cR~qmnUI+EC.9");
      Document document0 = new Document("'cR~qmnUI+EC.9");
      Document document1 = Document.createShell("4k");
      Document document2 = (Document)document1.addClass("'cR~qmnUI+EC.9");
      document2.nodelistChanged();
      Document document3 = (Document)document1.prependText("'cR~qmnUI+EC.9");
      document0.reparentChild(document1);
      document0.toString();
      document0.getElementsByIndexGreaterThan(62);
      document0.dataNodes();
      document0.textNodes();
      document0.siblingElements();
      document0.siblingElements();
      document3.val("4k");
      document3.cssSelector();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      List<TextNode> list0 = new LinkedList<TextNode>();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      String string0 = Node.EmptyString;
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "");
      document2.childNodeSize();
      Element element2 = new Element("Bbp !C//U!s]wHgc)");
      document0.id();
      Document document3 = new Document("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element0.children();
      document2.attr("Initial", false);
      // Undeclared exception!
      try { 
        document1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("R2E9@Xv\")5d@}^[");
      element0.classNames();
      int int0 = (-1);
      element0.setSiblingIndex((-1));
      element0.toString();
      element0.textNodes();
      Element element1 = element0.toggleClass("textarea");
      element1.className();
      element1.wholeText();
      StringBuffer stringBuffer0 = new StringBuffer("]H}It:g@,Cv3");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("T/D]-T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // T/D]-T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("A)jT,}aF)K dR~<+");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.removeClass("A)jT,}aF)K dR~<+");
      element0.attr("BeforeAttributeName");
      Node[] nodeArray0 = new Node[0];
      Element element1 = element0.insertChildren(0, nodeArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.className();
      document0.getElementsByTag("#");
      element0.wholeText();
      element1.textNodes();
      document0.getElementsByIndexEquals(1090);
      // Undeclared exception!
      try { 
        element1.child(109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 109, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      document0.attr("org.jsoup.parser.Parser", "");
      element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Element element2 = element1.prepend("Initial");
      element0.children();
      // Undeclared exception!
      try { 
        element2.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Insert position out of bounds.");
      CDataNode cDataNode0 = new CDataNode("! ),^$};R9jwG(jjgh");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ojwP4bxpXu/", attributes1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = pseudoTextElement0.html(charArrayWriter0);
      pseudoTextElement0.baseUri();
      pseudoTextElement0.getElementsByAttributeValueMatching("ojwP4bxpXu/", "ojwP4bxpXu/");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      charArrayWriter0.writeTo(charArrayWriter1);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      document_OutputSettings3.outline(true);
      pseudoTextElement0.outerHtmlHead(charArrayWriter0, 0, document_OutputSettings3);
      pseudoTextElement0.wholeText();
      pseudoTextElement0.text();
      pseudoTextElement0.prependText("{Jz%zUID");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "brts.e*<}6F5$K");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.getElementsContainingOwnText("brts.e*<}6F5$K");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.createElement("org.jsoup.nodes.Element");
      element0.dataNodes();
      element0.data();
      element0.hasClass("brts.e*<}6F5$K");
      Element element1 = element0.html("org.jsoup.nodes.Element");
      element1.getElementsByIndexEquals(76);
      Element element2 = document1.attr("#cdata", "brts.e*<}6F5$K");
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element2.classNames(set0);
      String string0 = ")NIj\\>`y4-tBv@/";
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      document1.getElementsByAttribute("#cdata");
      // Undeclared exception!
      try { 
        element1.insertChildren((-311), (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("6nZ", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("Oq_)E");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "head");
      element0.attr("head", false);
      element0.id();
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("SDayR5+[V$%M/<");
      Parser parser0 = Parser.htmlParser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Parser parser1 = parser0.setTrackErrors(1);
      Document document1 = document0.parser(parser1);
      Element element0 = document1.head();
      element0.childNodesCopy();
      Element element1 = element0.appendText("N)Eh[a=[#6]g");
      element1.shallowClone();
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(1, (-1));
      element0.is((Evaluator) evaluator_IsNthLastOfType0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell("H-k)>g#N^c");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.normalise();
      document3.hasText();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element1.dataNodes();
      element2.appendChild(element0);
      document2.hasClass(" />");
      element1.addClass("br");
      document1.val(" />");
      document1.text(" />");
      Element element3 = document2.empty();
      element3.attributes();
      // Undeclared exception!
      try { 
        element1.before((Node) element2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = " ";
      Document document0 = parser0.parseInput(" ", " ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document1 = document0.parser(parser0);
      String string1 = "XQ0F93%l|-D*\"1";
      document1.getElementsByAttributeValueContaining("}I!", "XQ0F93%l|-D*\"1");
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      try { 
        document0.text("}I!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document1.body();
      element0.appendTo(document1);
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("iIems)e");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document0.toggleClass("<html>\n <head></head>\n</html>\n<body>\n Bbp !C//U!s]wHgc)\n</body>");
      element0.previousElementSibling();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("8", "8");
      Element element0 = document0.head();
      element0.getElementsByIndexGreaterThan(8222);
      document0.getElementsByTag("7<?cW'qC");
      element0.lastElementSibling();
      document0.wholeText();
      element0.val();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("br");
      element0.empty();
      Element element1 = element0.toggleClass("zq.]");
      Element element2 = element1.addClass("4K");
      element2.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element3 = element1.empty();
      element3.siblingNodes();
      element3.clearAttributes();
      element3.hasText();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element4 = element0.tagName("zq.]");
      Element element5 = element4.prependText("br");
      String string0 = "[^-a-zA-Z0-9_:.]";
      Element element6 = element1.tagName("[^-a-zA-Z0-9_:.]");
      element6.setBaseUri("GOJ?^Po?}");
      element6.getElementsByIndexLessThan(0);
      element2.setBaseUri("zq.]");
      element5.val();
      String string1 = Node.EmptyString;
      element4.getElementsByAttribute("zq.]");
      element1.getElementsByIndexLessThan(0);
      element4.addClass("");
      // Undeclared exception!
      try { 
        element4.select("u7g>p^[}%4Q*(cQ");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      parseSettings0.normalizeTag(")_?Tn.1$u>:b");
      Attribute attribute0 = new Attribute(")_?Tn.1$u>:b", "5z", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("I)e%JmwA+F", "rHzuFw?%mS/EL|X}VI");
      FormElement formElement0 = new FormElement(tag0, "body", attributes2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Document.createShell("iframe");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.is("html");
      document0.getElementsByIndexLessThan((-1880));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element1.dataNodes();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element3 = element1.classNames(set0);
      element3.getElementsMatchingOwnText(" />");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("textarea");
      document2.is((Evaluator) evaluator_ContainsOwnText0);
      element0.nodeName();
      document2.hasClass(" />");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "head");
      StringWriter stringWriter2 = stringWriter1.append('1');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      element2.outerHtmlTail(stringWriter2, (-534), document_OutputSettings2);
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("<br>");
      element0.setBaseUri("r`$!L#p/7S)Q4\"z_");
      Element element1 = element0.appendText("Tag name must not be empty.");
      Element element2 = element1.attr("r`$!L#p/7S)Q4\"z_", false);
      element2.getElementsByAttributeValueContaining(".", "[^-a-za-z0-9_:.]");
      element1.getElementsMatchingText("Tag name must not be empty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, (-2204), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.appendTo(document0);
      element2.childNodeSize();
      element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      // Undeclared exception!
      element1.wrap("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("itemscope");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document0.hasClass("n>tAM");
      document1.val();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "brts.e*<}6F5$K");
      document0.getElementsContainingOwnText("brts.e*<}6F5$K");
      Document document1 = Parser.parse("org.jsoup.nodes.Element", "brts.e*<}6F5$K");
      Element element0 = document0.body();
      element0.dataNodes();
      element0.data();
      element0.hasClass("brts.e*<}6F5$K");
      Element element1 = element0.html("org.jsoup.nodes.Element");
      element1.getElementsByIndexEquals(76);
      Element element2 = document1.attr("#cdata", "brts.e*<}6F5$K");
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element2.classNames(set0);
      String string0 = ")NIj\\>`y4-tBv@/";
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      // Undeclared exception!
      try { 
        element1.insertChildren((-311), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":has", "f#os");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.text();
      String string0 = "org.jsoup.nodes.Element$NodeList";
      String string1 = "Pattern syntax error: ";
      List<Node> list0 = Parser.parseXmlFragment("Pattern syntax error: ", "na");
      Element element0 = document1.prependElement(":has");
      Element element1 = element0.addClass("org.jsoup.nodes.Element$NodeList");
      element1.attr("org.jsoup.nodes.Element$NodeList", true);
      document1.data();
      document0.tagName();
      // Undeclared exception!
      try { 
        element0.insertChildren((-1264), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document2 = Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document2;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      element0.attributes();
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document2.text();
      document2.childNodeSize();
      document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document0.hasClass("n>tAM");
      document1.text("Bbp !C//U!s]wHgc)");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.body();
      element0.nextElementSiblings();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("a@&", "Wv<r A}wWx");
      Document document1 = document0.clone();
      document0.dataNodes();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)59;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.getElementsContainingText("Wv<r A}wWx");
      document1.tagName();
      Element element0 = document0.removeClass("#root");
      document1.hasText();
      Element element1 = element0.attr("a@&", "B!z-4$<JzF");
      element1.nextElementSiblings();
      Element element2 = element0.appendTo(document1);
      document0.toggleClass("1?s~2ULN,W~");
      element2.before("#root");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xhtl");
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "xhtl");
      Element element0 = document0.body();
      element0.empty();
      element0.data();
      element0.lastElementSibling();
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.hasAttributes();
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = null;
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("4/fH't+A`B=O,cJp");
      Parser parser0 = Parser.xmlParser();
      document0.absUrl("4/fH't+A`B=O,cJp");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document1 = document0.parser(parser1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.siblingIndex = 182;
      // Undeclared exception!
      try { 
        document2.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9I]CI}\"-}UG(ty^:R");
      String string0 = null;
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse(":t3|4r'P*`}@C", "0hD");
      document0.append(":t3|4r'P*`}@C");
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e-Tk{<?,c-|", "e-Tk{<?,c-|");
      document0.outerHtml();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.siblingNodes();
      document2.dataNodes();
      document1.previousElementSiblings();
      document1.data();
      document1.val();
      document2.tagName();
      // Undeclared exception!
      try { 
        document2.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8z.MnX)?", "8z.MnX)?");
      Document document1 = document0.normalise();
      document1.siblingNodes();
      Document document2 = document1.ownerDocument();
      Element element0 = document2.html("8z.MnX)?");
      element0.className();
      element0.getAllElements();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document2.quirksMode(document_QuirksMode0);
      Element.preserveWhitespace(document1);
      List<DataNode> list0 = document1.dataNodes();
      document2.insertChildren(0, (Collection<? extends Node>) list0);
      CDataNode cDataNode0 = new CDataNode("");
      // Undeclared exception!
      try { 
        document1.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      int int0 = 124;
      // Undeclared exception!
      try { 
        document0.child(124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "\"a~!d&a";
      Document document0 = Document.createShell("\"a~!d&a");
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.selectFirst("\"a~!d&a");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"a~!d&a': unexpected token at '\"a~!d&a'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2v:kYh]", "88[)#PnJ&vT");
      document0.empty();
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      document1.getElementsByIndexGreaterThan(1098);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("2v:kYh]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "K?,G{+cx.e";
      Document document0 = Parser.parseBodyFragment("w@yW3", "K?,G{+cx.e");
      Element element0 = document0.createElement("K?,G{+cx.e");
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "^\\s+";
      Document document0 = new Document("^s+");
      int int0 = (-1085);
      Element element0 = document0.prependElement("^s+");
      element0.wrap("juiC7;sHU7DL*ie}N8");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("CONTINUE", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" u", "Og'#l-4]!MYi'K>>-j");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Charset charset0 = document0.charset();
      document_OutputSettings1.charset(charset0);
      Document document2 = document1.clone();
      document2.parent();
      document1.nextElementSiblings();
      document2.previousElementSiblings();
      // Undeclared exception!
      try { 
        document2.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "3V%Q925";
      Document document0 = new Document("3V%Q925");
      document0.cssSelector();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("b/eBjx ]VYlE)K2", "s+", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = Parser.parseBodyFragment(">._n_)PkQ_W)", ":nth-child(%d)");
      Element element0 = document0.createElement(">._n_)PkQ_W)");
      element0.siblingElements();
      element0.text();
      Element element1 = element0.prependChild(document0);
      element1.data();
      // Undeclared exception!
      try { 
        element1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "WL[#n}MO&:y9pfwCt[");
      document0.removeAttr("");
      document0.id();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("]H}It:g@,Cv3");
      Tag tag0 = Tag.valueOf("]H}It:g@,Cv3", parseSettings0);
      String string0 = "f#t";
      Element element0 = new Element(tag0, "f#t");
      Element element1 = element0.val("f#t");
      element0.childNodeSize();
      element0.html();
      Elements elements0 = element0.getElementsByClass("uP=");
      Element element2 = element1.insertChildren(0, (Collection<? extends Node>) elements0);
      element0.getElementsByIndexGreaterThan(0);
      Element element3 = element0.doClone(element1);
      element3.data();
      element3.parents();
      // Undeclared exception!
      try { 
        element2.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(973);
      Parser parser2 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment(" <%s>", "#root");
      Document document1 = document0.clone();
      Document document2 = document1.parser(parser1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Element element0 = document3.body();
      Document document4 = Parser.parseBodyFragmentRelaxed("class", " <%s>");
      ParseErrorList parseErrorList0 = parser2.getErrors();
      List<Node> list0 = Parser.parseFragment("!ou/G", element0, " <%s>", parseErrorList0);
      Document document5 = parser1.parseInput(" <%s>", "]H}It:@sv");
      Element element1 = document4.body();
      element1.val();
      element1.cssSelector();
      Element element2 = document5.doClone(document3);
      element2.clearAttributes();
      document3.val("class");
      document0.html();
      element2.dataNodes();
      // Undeclared exception!
      try { 
        element2.insertChildren(973, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "pubSysKey";
      Document document0 = Parser.parse("pubSysKey", "!2+0{tvBy6wn");
      Element element0 = document0.head();
      element0.appendTo(document0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      String string1 = "";
      CDataNode cDataNode0 = new CDataNode("");
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        element0.insertChildren(25, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "H,&4{+#";
      String string1 = "|R4Dyx";
      Document document0 = Parser.parseBodyFragment("H,&4{+#", "|R4Dyx");
      Document document1 = document0.clone();
      document0.head();
      Element element0 = document1.text("H,&4{+#");
      document1.toString();
      // Undeclared exception!
      try { 
        element0.wrap("|R4Dyx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("@1\"kX0O4`2PXu%[LC", "?X}2>J}aI3]oh~G");
      document0.isBlock();
      Element element0 = document0.attr("aiP*#", false);
      DataNode dataNode0 = new DataNode("?X}2>J}aI3]oh~G");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.nextSibling();
      dataNode0.parentNode = (Node) document0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataNode dataNode1 = dataNode0.setWholeData("?X}2>J}aI3]oh~G");
      Element element1 = document0.prependChild(dataNode1);
      Element element2 = document0.prependText("?X}2>J}aI3]oh~G");
      document0.getElementsContainingOwnText((String) null);
      element0.className();
      element0.ownText();
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsMatchingOwnText(pattern0);
      element1.tagName();
      element1.getElementsByAttributeValueContaining("textarea", "81,Mn[jU%e ^24m`K&:");
      // Undeclared exception!
      try { 
        element2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(".b=gS#TQw@?i[", "");
      Element element0 = document0.head();
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "org.jsoup.nodes.Element");
      String string0 = "";
      Element element0 = document0.attr("", true);
      element0.clone();
      parser0.parseInput("", "");
      element0.append("");
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "%Z>*92*bm";
      Document document0 = new Document("%Z>*92*bm");
      String string1 = "T2";
      Document document1 = (Document)document0.val("T2");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      String string2 = "$.rtyAa=slOI47  Zt";
      Pattern pattern0 = Pattern.compile("$.rtyAa=slOI47  Zt", 2009);
      document1.getElementsMatchingText(pattern0);
      document1.doSetBaseUri("%Z>*92*bm");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      TextNode textNode0 = TextNode.createFromEncoded("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.after((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "}Ts&L";
      Document document0 = Document.createShell("}Ts&L");
      document0.ensureChildNodes();
      List<Node> list0 = document0.childNodesCopy();
      Element element0 = document0.body();
      document0.data();
      element0.children();
      element0.childNodes = list0;
      document0.removeClass("");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document1 = (Document)document0.classNames(set0);
      document1.hasAttributes();
      document1.tagName();
      Pattern pattern0 = Pattern.compile("textarea");
      Pattern.matches("iMpll^guy", "#root");
      document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ")v#+{`Ux";
      Document document0 = Document.createShell(")v#+{`Ux");
      document0.clearAttributes();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("<![CDATA[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: <![CDATA[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2138);
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.parent();
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("59");
      Document document1 = document0.normalise();
      document1.select("59");
      document0.tagName("59");
      document1.createElement("59");
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.siblingIndex = (-3937);
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Element element0 = document2.head();
      Document document3 = element0.ownerDocument();
      Pattern pattern0 = Pattern.compile("textarea", 0);
      document3.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("[MNb{8v~");
      Element element1 = element0.val("[MNb{8v~");
      Element element2 = element0.clone();
      element0.hasAttributes();
      String string0 = "";
      element2.getElementsByAttributeValueMatching("", "");
      int int0 = (-2801);
      element1.getElementsByIndexEquals((-2801));
      // Undeclared exception!
      try { 
        element1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("rla[KYuo$skv");
      Element element0 = document0.body();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "rla[KYuo$skv");
      StringBuilder stringBuilder1 = stringBuilder0.insert(6, (Object) null);
      StringBuilder stringBuilder2 = stringBuilder1.insert(6, (float) 6);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder2, (-1772), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "f#os");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.text();
      String string0 = "org.jsoup.nodes.Element$NodeList";
      String string1 = "Pattern syntax error: ";
      Parser.parseXmlFragment("Pattern syntax error: ", "na");
      Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "");
      Element element0 = document1.tagName("table");
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Entities";
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Entities");
      String string1 = "U'-7!";
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Entities");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = new Attributes();
      Attribute attribute0 = new Attribute(">n|.MH:iQ&", "U'-7!", attributes2);
      Attributes attributes3 = attributes1.put(attribute0);
      attributes1.toString();
      FormElement formElement0 = new FormElement(tag0, "U'-7!", attributes3);
      // Undeclared exception!
      try { 
        formElement0.select("org.jsoup.select.Evaluator$AttributeKeyPair");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$AttributeKeyPair': unexpected token at '$AttributeKeyPair'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "footer";
      Element element0 = new Element("footer");
      String string1 = "L}V{f=*<9+fT\"M";
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("L}V{f=*<9+fT\"M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: L}V{f=*<9+fT\"M
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.removeClass("org.jsoup.nodes.Element$1");
      List<Node> list0 = Parser.parseFragment("/!.IMX+zT'A |oNZ", element0, "org.jsoup.nodes.Element$1");
      element0.childNodes = list0;
      document1.text();
      document0.textNodes();
      document1.className();
      document0.children();
      Element element1 = document1.tagName("/!.IMX+zT'A |oNZ");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element1.val("");
      element1.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        element1.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("Wte)f6y3y}];x");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementsByAttribute("bR-");
      document0.nodelistChanged();
      document1.nextElementSiblings();
      Element element0 = document0.prepend("#text");
      element0.getAllElements();
      document1.id();
      document0.dataset();
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText("?`Cyj!oF>UFlM7,[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?`Cyj!oF>UFlM7,[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$NodeList";
      Document document0 = Parser.parse("uzKmv/xp", "org.jsoup.nodes.Element$NodeList");
      Document document1 = (Document)document0.html("p*Q$(#cic!]7");
      String string1 = null;
      // Undeclared exception!
      try { 
        document1.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("27]a");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax1);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document_OutputSettings3.outline(false);
      Charset.defaultCharset();
      document_OutputSettings0.encoder();
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 0);
      evaluator_IsNthOfType0.toString();
      document_OutputSettings0.prettyPrint(true);
      evaluator_IsNthOfType0.matches(document1, document1);
      document1.is((Evaluator) evaluator_IsNthOfType0);
      document0.elementSiblingIndex();
      document_OutputSettings1.charset(charset0);
      Element element0 = document0.val(" > ");
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings3.escapeMode(entities_EscapeMode0);
      element0.setBaseUri(" > ");
      element0.attributes();
      document1.nodeName();
      document0.doClone(element0);
      element0.getElementsMatchingText("big");
      // Undeclared exception!
      try { 
        element0.before(":nth-of-type(0)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = ",n'YXjQCY>`v";
      Document document0 = Parser.parse(",n'YXjQCY>`v", ",n'YXjQCY>`v");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",n'YXjQCY>`v", true);
      xmlDeclaration0.getWholeDeclaration();
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document1.append("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.XmlDeclaration cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "\"";
      Document document0 = Parser.parseBodyFragmentRelaxed("\"", "EID=R");
      document0.elementSiblingIndex();
      Element element0 = document0.head();
      Element element1 = element0.before("8A,");
      element1.childNodesCopy();
      element0.wholeText();
      element0.doClone(document0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-3187));
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.replace((-936), (-1798), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -936
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.parser((Parser) null);
      Element element0 = document3.text("");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("Uhi:e$REJD<#", "ou#xp>x0A");
      document0.getElementsByAttributeValue("Uhi:e$REJD<#", "Uhi:e$REJD<#");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "3b5*";
      Document document0 = Parser.parse("9Kc{2w!qNH5o(", "3b5*");
      int int0 = 0;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, '&');
      stringBuilder1.append(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0);
      StringBuilder stringBuilder3 = stringBuilder2.append('&');
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) stringBuilder2);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Charset charset0 = document0.charset();
      document_OutputSettings1.charset(charset0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      int int1 = 902;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(902);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder4, 3799, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "~z+4]");
      document0.wholeText();
      document0.wholeText();
      document0.id();
      Pattern pattern0 = Pattern.compile("", 0);
      document0.empty();
      Pattern.matches("", "");
      document0.getElementsMatchingOwnText(pattern0);
      document0.textNodes();
      document0.classNames();
      document0.hasAttributes();
      Element element0 = document0.attr("&t^v&^6", true);
      element0.ownText();
      element0.getAllElements();
      // Undeclared exception!
      try { 
        element0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.prependChild(document0);
      element0.hasClass("");
      // Undeclared exception!
      element0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("~:*gn]lT`V&g@");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.siblingNodes();
      element1.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.Collector$FirstFinder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "\\s+";
      Tag tag0 = Tag.valueOf("s+");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      String string1 = " ";
      // Undeclared exception!
      try { 
        formElement0.tagName(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      Element element0 = document0.head();
      element0.setParentNode(document0);
      Element element1 = document0.prepend("canvas");
      element1.id();
      Parser parser0 = Parser.xmlParser();
      Parser.parseXmlFragment("reversed", "canvas");
      parser0.setTrackErrors(1833);
      Document document1 = document0.parser(parser0);
      Pattern pattern0 = Pattern.compile("reversed");
      int int0 = (-927);
      pattern0.split((CharSequence) "");
      pattern0.split((CharSequence) "", (-927));
      document1.getElementsByAttributeValueMatching("", pattern0);
      document1.html();
      // Undeclared exception!
      try { 
        document1.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("L|f77.INQQ',$9", "L|f77.INQQ',$9");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]e?;(yy");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", "L|f77.INQQ',$9");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document.createShell("L|f77.INQQ',$9");
      document1.getElementsByAttributeValueMatching("", "L|f77.INQQ',$9");
      Document document2 = (Document)document0.appendChild(document1);
      Document document3 = (Document)document2.appendTo(element0);
      Element element1 = document3.firstElementSibling();
      // Undeclared exception!
      try { 
        element1.removeChild(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      document0.hasText();
      document0.id();
      document0.val();
      document0.getElementsByAttributeValueNot("class", "class");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wt,o6", "(0Zh+?7;Owi<k\"~e{");
      document0.getElementsByAttributeValueStarting("J{y}$Ev?Bs", "&quot;");
      Tag tag0 = Tag.valueOf("1?s~2ULN,W~");
      CDataNode cDataNode0 = new CDataNode("wt,o6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "defer");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("J{y}$Ev?Bs", "(0Zh+?7;Owi<k\"~e{");
      FormElement formElement0 = new FormElement(tag0, "1?s~2ULN,W~", attributes1);
      Element element0 = document0.appendTo(formElement0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#root");
      document0.val("J{y}$Ev?Bs");
      document0.getElementsByAttributeValueEnding("(0Zh+?7;Owi<k\"~e{", "(0Zh+?7;Owi<k\"~e{");
      element0.id();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "~H)&";
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("]H}It:g@,Cv3");
      Tag tag0 = Tag.valueOf("]H}It:g@,Cv3", parseSettings0);
      String string0 = "f#t";
      Element element0 = new Element(tag0, "f#t");
      Element element1 = element0.val("f#t");
      element0.childNodeSize();
      element0.html();
      Elements elements0 = element0.getElementsByClass("uP=");
      element1.insertChildren(0, (Collection<? extends Node>) elements0);
      element0.getElementsByIndexGreaterThan(0);
      Element element2 = element0.doClone(element1);
      element2.parents();
      // Undeclared exception!
      try { 
        element2.after("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = ">Q8";
      Element element0 = new Element(">Q8");
      element0.previousSibling();
      element0.getElementsByAttributeValueMatching(">Q8", ">Q8");
      element0.text();
      int int0 = 3113;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      Element element1 = element0.prependElement(">Q8");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("col", "");
      Document document1 = document0.normalise();
      Document document2 = (Document)document1.html("col");
      document2.childNodesAsArray();
      document2.getElementsByClass("[AAHR@Gw0Wih");
      document0.hasText();
      Document document3 = (Document)document0.attr("rt", "");
      Document document4 = (Document)document3.toggleClass("");
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeValue("", "id");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      Element element3 = element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element3.prependText("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":has", "f#os");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.text();
      List<Node> list0 = Parser.parseXmlFragment("Pattern syntax error: ", "na");
      Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":has");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$NodeList");
      document0.parents();
      Element element0 = document1.prependElement(":has");
      document1.data();
      element0.siblingElements();
      document1.baseUri();
      document1.getElementsByTag("_#-UVTH2%GSs");
      // Undeclared exception!
      try { 
        element0.insertChildren((-1264), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = ":root";
      Document document0 = Parser.parseBodyFragment(":root", ":root");
      document0.html();
      CDataNode cDataNode0 = new CDataNode("NjIrn(#");
      cDataNode0.parent();
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("~:*gn]lT`V&g@");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.siblingNodes();
      element1.getElementsMatchingOwnText("O");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.Collector$FirstFinder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("DK");
      Document document1 = document0.normalise();
      document1.doClone(document0);
      document1.getElementsMatchingOwnText("head");
      document1.getElementById("cZx^y,<A");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      element0.before(node0);
      document0.textNodes();
      element0.nodelistChanged();
      String string0 = "itemscope";
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Document.createShell("]H}It:@sv");
      element0.append("");
      document0.html();
      document0.getElementsByIndexEquals(2373);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Element element0 = new Element("br");
      element0.empty();
      Element element1 = element0.toggleClass("zq.]");
      Element element2 = element1.addClass("4K");
      element2.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element3 = element1.empty();
      element3.siblingNodes();
      element3.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element4 = element0.tagName("zq.]");
      Element element5 = element4.prependText("br");
      Element element6 = element1.tagName("[^-a-zA-Z0-9_:.]");
      element6.val("u7g>p^[}%4Q*(cQ");
      element6.setBaseUri("GOJ?^Po?}");
      element6.getElementsByIndexLessThan(0);
      element2.setBaseUri("zq.]");
      element5.val();
      element5.text();
      element4.getElementsByAttribute("zq.]");
      element1.getElementsByIndexLessThan(0);
      Element element7 = element4.addClass("");
      element2.getElementsByIndexGreaterThan(1010);
      element5.getElementById("[^-a-zA-Z0-9_:.]");
      element3.siblingElements();
      // Undeclared exception!
      try { 
        element7.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.html();
      document0.appendElement("G|bwHS&<6)");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document(" NWuEc/=2\";");
      Document document1 = document0.ownerDocument();
      document1.appendElement("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("textarea");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("itemscope");
      document0.text();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element1 = document0.attr("org.jsoup.parser.Parser", "");
      element1.childNodeSize();
      document0.toggleClass("<textarea></textarea>");
      element1.prependText("<textarea></textarea>");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("oO{gb/w %}<vMmL!!g");
      Tag tag0 = Tag.valueOf("QOgx=}", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ".", attributes0);
      element0.toggleClass("n\"Ib9ASM");
      element0.attr("#", "#root");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Element element3 = element1.wrap("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element3.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("U2[V", "U2[V");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.wrap("U2[V");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = " ";
      Document document0 = parser0.parseInput(" ", " ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document1 = document0.parser(parser0);
      String string1 = "XQ0F93%l|-D*\"1";
      document1.getElementsByAttributeValueContaining("}I!", "XQ0F93%l|-D*\"1");
      Pattern pattern0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]e?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.getElementsByAttributeValueNot("pW*~{,gdq=]e?;(yy", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document0;
      element1.lastElementSibling();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "";
      Attributes attributes0 = new Attributes();
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]e?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      element1.tagName("EnHQcmv#Ndn+");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1807, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "head";
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.head();
      document1.getElementsContainingText("head");
      element0.html();
      element0.getAllElements();
      Element element1 = element0.text("");
      document1.appendTo(element0);
      element1.removeAttr("'p@+:Jcac=hEXXm/");
      // Undeclared exception!
      document1.html("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zq.]");
      FormElement formElement0 = new FormElement(tag0, "kiW%kBz", (Attributes) null);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("zq.]", parseSettings0);
      CharBuffer charBuffer0 = CharBuffer.allocate(20);
      Tag.valueOf("zq.]", parseSettings0);
      charBuffer0.clear();
      charBuffer0.append('{');
      formElement0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      element1.doClone(element0);
      element1.dataNodes();
      document1.is("br");
      document2.hasClass(" />");
      document0.shallowClone();
      element0.nextElementSibling();
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element7.setBaseUri("GOJ?^:o?}");
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      Element element8 = element5.addClass("");
      element3.getElementsByIndexEquals(19);
      element3.getElementsByIndexGreaterThan(1010);
      element6.getElementById("[^-a-zA-Z0-9_:.]");
      element4.siblingElements();
      element8.selectFirst("F");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document_OutputSettings1.encoder();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.body();
      element0.nextElementSiblings();
      element0.text("lx/*WlZ");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      element1.prependText("org.jsoup.nodes.Element$2");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeValueMatching("", "0/yXGt[DXI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 0/yXGt[DXI
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      element0.html();
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element2.className();
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element7.setBaseUri("GOJ?^Po?}");
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      Element element8 = element5.addClass("");
      element3.getElementsByIndexEquals(19);
      element3.getElementsByIndexGreaterThan(1010);
      element6.getElementById("[^-a-zA-Z0-9_:.]");
      element4.siblingElements();
      // Undeclared exception!
      try { 
        element8.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.getElementsMatchingText("");
      element2.childNodeSize();
      element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<Node> list0 = document1.childNodesCopy();
      element0.childNodes = list0;
      Document.createShell(";p");
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching("|", ";p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "Bbp !C//U!s]wHgc)";
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, 1, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = Parser.parseBodyFragmentRelaxed("O/j", "Children collection to be inserted must not be null.");
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      document_OutputSettings3.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1261, document_OutputSettings3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]H}It:g@,Cv3", "]H}It:g@,Cv3");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.createElement("textarea");
      element0.getElementsMatchingText("t^T\"8nj:GfG3R");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      document1.wholeText();
      Element element0 = document1.body();
      element0.nextElementSiblings();
      element0.tag();
      document1.attributes();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Element element0 = new Element("IT");
      element0.doSetBaseUri("IT");
      element0.attr("IT");
      CDataNode cDataNode0 = new CDataNode("");
      TextNode textNode0 = cDataNode0.text("IT");
      element0.doClone(textNode0);
      element0.attributes();
      element0.previousElementSiblings();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.html();
      Pattern pattern0 = Pattern.compile("`Z3\"yC-i#V");
      document0.getElementsMatchingText(pattern0);
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("<br>");
      element7.setBaseUri("GOJ?^Po?}");
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      element5.addClass("");
      element3.getElementsByIndexEquals(19);
      element3.getElementsByIndexGreaterThan(1010);
      // Undeclared exception!
      try { 
        element6.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document0.traverse(nodeVisitor0);
      Element element1 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      element1.getElementsByTag("itemscope");
      element0.text();
      Element element2 = document0.attr("org.jsoup.parser.Parser", "");
      element2.childNodeSize();
      Element element3 = element0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Element element4 = element0.prependElement("i9!^HiEmgf5b\":_g");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element4;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element2;
      nodeArray0[3] = (Node) element3;
      nodeArray0[4] = node0;
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parser0.settings(parseSettings0);
      String string0 = "J::T2SbKM_\\";
      Document document0 = Parser.parseBodyFragmentRelaxed("J::T2SbKM_", "J::T2SbKM_");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(89);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 89, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parseBodyFragment("qEUi)", "qEUi)");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "a3]lenWUwOkqKIc/";
      Document document0 = Parser.parseBodyFragment("a3]lenWUwOkqKIc/", "a3]lenWUwOkqKIc/");
      Element element0 = document0.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Element element1 = new Element("a3]lenWUwOkqKIc/");
      Element element2 = element0.appendTo(document0);
      element2.after("a3]lenWUwOkqKIc/");
      // Undeclared exception!
      try { 
        element0.insertChildren(62, (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]{u");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.put("]{u", false);
      Attributes attributes2 = attributes1.put("ins", "ins");
      attributes2.toString();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "]{u", attributes2);
      attributes0.clone();
      Element element0 = pseudoTextElement0.text("ins");
      pseudoTextElement0.clone();
      pseudoTextElement0.getElementsByAttributeStarting(" ins=\"ins\"");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = Document.createShell("");
      Document document2 = new Document("");
      document0.clone();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("i\"v", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.parseInput("org.jsoup.nodes.Element$1", "datalist");
      Document document0 = parser0.parseInput("Children collection to be inserted must not be null.", ":prev%s");
      document0.elementSiblingIndex();
      // Undeclared exception!
      try { 
        document0.after(":prev%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element7.setBaseUri("GOJ?^Po?}");
      element2.parentNode = (Node) element3;
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      element5.addClass("");
      element3.getElementsByIndexEquals(19);
      element3.getElementsByIndexGreaterThan(1010);
      element6.getElementById("[^-a-zA-Z0-9_:.]");
      // Undeclared exception!
      try { 
        element4.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("mhnj=4])8hb=f*;", "mhnj=4])8hb=f*;");
      Element element0 = document0.head();
      Element element1 = element0.appendChild(document0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element1;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      element1.addChildren(nodeArray0);
      element1.classNames();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element2.prepend("br");
      element1.dataNodes();
      document2.hasClass(" />");
      element1.getElementsByAttributeValueContaining(" />", "br");
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.tag();
      document0.getElementsByAttributeValueContaining("$VALUES", "/!.imx+zt'a |onz");
      document0.getElementsByIndexGreaterThan((-2721));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "org.jsoup.parser.Token$TokenType";
      Document document0 = new Document("org.jsoup.parser.Token$TokenType");
      Document document1 = document0.parser((Parser) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document1.doClone(document0);
      document0.prependChild(document1);
      // Undeclared exception!
      document0.appendElement("org.jsoup.parser.Token$TokenType");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "defer";
      Document document0 = Parser.parseBodyFragment("defer", "defer");
      CDataNode cDataNode0 = new CDataNode("defer");
      TextNode textNode0 = cDataNode0.text("body");
      document0.parentNode = (Node) textNode0;
      document0.dataNodes();
      int int0 = 0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      element1.doClone(element0);
      element1.dataNodes();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element1.classNames(set0);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("textarea");
      document2.is((Evaluator) evaluator_ContainsOwnText0);
      element0.nodeName();
      document2.hasClass(" />");
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingOwnText("");
      document0.children();
      document0.wholeText();
      Pattern pattern0 = Pattern.compile("", 6);
      document0.getElementsByAttributeValueMatching("", pattern0);
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea", (Attributes) null);
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.prependElement("html");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("itemscope");
      document0.text();
      Element element1 = document0.attr("org.jsoup.parser.Parser", "html");
      element1.childNodeSize();
      document0.toggleClass("<html></html>\n<html>\n <head></head>\n <body>\n  html\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element2.getElementsByAttributeValueStarting("br", "br");
      element1.dataNodes();
      document2.hasClass(" />");
      element2.nextElementSibling();
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+k_BW8*", "<br>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.text();
      document0.getElementsByIndexEquals(58);
      document0.nextElementSiblings();
      document0.classNames();
      document0.hasClass("+k_BW8*");
      document1.dataset();
      // Undeclared exception!
      try { 
        document1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "vMfKIDhyi";
      Document document0 = Parser.parse("vMfKIDhyi", "vMfKIDhyi");
      Document document1 = document0.ownerDocument();
      document1.siblingElements();
      document1.val();
      String string1 = "FOk4NLJk";
      Element element0 = document1.text("FOk4NLJk");
      element0.appendChild(document0);
      // Undeclared exception!
      document1.prepend("$bE0rTA+U|mu4v*B");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "nNYcC9x~K8X|oY$S";
      Document document0 = Parser.parseBodyFragment("nNYcC9x~K8X|oY$S", "nNYcC9x~K8X|oY$S");
      document0.data();
      document0.getElementsByAttributeValueContaining("nNYcC9x~K8X|oY$S", "nNYcC9x~K8X|oY$S");
      Element element0 = document0.empty();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document1 = (Document)document0.filter(nodeFilter0);
      element1.id();
      element1.attributes();
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@nt:RX f][wm5kr");
      Element element0 = new Element(tag0, "   ");
      element0.dataNodes();
      element0.getElementsByAttribute("wy|u!/-y}_ro");
      Element element1 = element0.appendText("wy|u!/-y}_ro");
      element1.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("PJUfm", "Ji.");
      Element element0 = document0.val("Ji.");
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      element1.attr("[MNb{8v~", "uMPdp{zi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document2 = Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[2] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document2;
      // Undeclared exception!
      try { 
        document0.insertChildren(1790, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell("6nZ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.body();
      element0.nextElementSiblings();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("defer", "defer");
      List<DataNode> list0 = new LinkedList<DataNode>();
      document0.getElementsByIndexGreaterThan(29);
      document0.getElementsByAttributeValueNot("defer", "defer");
      String string0 = "gwdkdPS";
      document0.getElementsByAttribute("gwdkdPS");
      document0.getElementsByAttributeStarting("DOCTYPE");
      document0.siblingIndex = 29;
      document0.prependText("datalist");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("bP7Y>VS.UPk5X M4m", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("itemscope");
      document0.text();
      Element element1 = document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      element1.childNodeSize();
      document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document0.hasClass("n>tAM");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.removeAttr("");
      Element element0 = document0.text("");
      element0.getElementsByIndexLessThan(350);
      element0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "a@&";
      Document document0 = Parser.parse("a@&", "Wv<r A}wWx");
      Document document1 = document0.clone();
      document0.dataNodes();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)59;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      Tag tag0 = Tag.valueOf("a@&");
      Element element0 = new Element(tag0, "B8H$^A,)nh");
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte) (-95);
      document1.getElementsContainingText("Wv<r A}wWx");
      document1.tagName();
      Element element1 = document0.removeClass("#root");
      document1.hasText();
      // Undeclared exception!
      element1.attr((String) null, "B!z-4$<JzF");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element1.dataNodes();
      document2.hasClass(" />");
      document1.val(" />");
      document1.text(" />");
      Element element3 = document2.empty();
      element3.attributes();
      // Undeclared exception!
      try { 
        element1.before((Node) element2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Element$NodeList");
      Document document0 = parser1.parseInput((Reader) stringReader0, "3!!<");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.nextSibling();
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.className();
      document1.elementSiblingIndex();
      Element element1 = document1.attr("org.jsoup.nodes.Element$NodeList", false);
      document1.reparentChild(element1);
      document1.updateMetaCharsetElement(false);
      Pattern pattern0 = Pattern.compile("3!!<", 0);
      document0.getElementsMatchingText(pattern0);
      document1.getElementsByTag(".7");
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B{fgOb4r|=.Kw0", "f>OBAm!XcA)(d/");
      Document document1 = document0.normalise();
      Element element0 = document1.createElement("class");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wt,o6", "(0Zh+?7;Owi<k\"~e{");
      document0.getElementsByAttributeValueStarting("J{y}$Ev?Bs", "&quot;");
      Tag tag0 = Tag.valueOf("1?s~2ULN,W~");
      Tag.valueOf("1?s~2ULN,W~");
      CDataNode cDataNode0 = new CDataNode("wt,o6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "defer");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("J{y}$Ev?Bs", "(0Zh+?7;Owi<k\"~e{");
      FormElement formElement0 = new FormElement(tag0, "1?s~2ULN,W~", attributes1);
      Element element0 = document0.appendTo(formElement0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#root");
      document0.val("J{y}$Ev?Bs");
      document0.getElementsByAttributeValueEnding("(0Zh+?7;Owi<k\"~e{", "(0Zh+?7;Owi<k\"~e{");
      element0.id();
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      element1.doClone(element0);
      element1.before("RXh_c}$X6nfcSYlt");
      element1.dataNodes();
      document2.hasClass(" />");
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Element$NodeList");
      Document document0 = parser1.parseInput((Reader) stringReader0, "3!!<");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.nextSibling();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.className();
      document1.elementSiblingIndex();
      document1.attr("org.jsoup.nodes.Element$NodeList", false);
      Pattern pattern0 = Pattern.compile("3!!<", 0);
      document0.getElementsMatchingText(pattern0);
      document1.getElementsByTag(".7");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.body();
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell("6nZ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      document_OutputSettings1.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.body();
      element0.nextElementSiblings();
      element0.clone();
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("a@&", "Wv<r A}wWx");
      Document document1 = document0.clone();
      document0.dataNodes();
      document1.prependText("defer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)59;
      byteArray0[5] = (byte)35;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.getElementsContainingText("Wv<r A}wWx");
      document1.tagName();
      Element element0 = document0.removeClass("#root");
      document1.hasText();
      // Undeclared exception!
      try { 
        element0.attr((String) null, "B!z-4$<JzF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document2 = Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document2;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("#{JXt7V8+R')Fqe=R");
      document0.getElementsByAttributeValueContaining("#{JXt7V8+R')Fqe=R", "#{JXt7V8+R')Fqe=R");
      document0.id();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("8Z");
      nodeArray0[3] = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("a@&", "Wv<r A}wWx");
      Document document1 = document0.clone();
      document0.dataNodes();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-66);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.getElementsContainingText("Wv<r A}wWx");
      document1.tagName();
      Element element0 = document0.removeClass("#root");
      document1.hasText();
      document1.nextElementSiblings();
      element0.appendTo(document1);
      // Undeclared exception!
      try { 
        document1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gw", "Gw");
      document0.previousElementSibling();
      Element element0 = document0.text("Gw");
      element0.append(")xjopokvP[J1B");
      element0.getElementsByAttributeValueNot("8srYn>Hd", " ");
      element0.getElementsByAttributeValueNot("Gw", "1_(G1b^Q6OwM?r+X");
      // Undeclared exception!
      try { 
        document0.before("8srYn>Hd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.parents();
      document0.getElementsByTag("id");
      document0.previousElementSiblings();
      document0.select("id");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.getElementsByAttributeValueStarting("textarea", "br");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#document", "#document");
      Document document1 = Parser.parseBodyFragmentRelaxed("#document", "");
      document0.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexEquals((-2738));
      document0.nodeName();
      Element element0 = document0.prepend("JJ>i?V%>$/m5p");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = new Document("#root");
      document0.getElementsContainingText("#root");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "attributeSingleValueCharsSorted";
      Tag.valueOf("attributeSingleValueCharsSorted");
      Document document0 = Document.createShell("attributeSingleValueCharsSorted");
      Element element0 = document0.text("<br>");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(15);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        element0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("[^-a-za-z0-9_:.]", "[^-a-za-z0-9_:.]");
      document0.children();
      document0.parents();
      document0.nextElementSibling();
      document0.getElementsByTag("[^-a-za-z0-9_:.]");
      Element element0 = document0.prependElement("[^-a-za-z0-9_:.]");
      document0.updateMetaCharsetElement(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.previousSibling();
      String string0 = ".|ax";
      Element element1 = element0.appendChild(document0);
      // Undeclared exception!
      element1.html();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Element element0 = new Element("zC");
      element0.val();
      element0.siblingIndex = 126;
      Element element1 = element0.attr("zC", false);
      element1.getElementsByIndexEquals(11);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element1;
      // Undeclared exception!
      try { 
        element0.insertChildren(11, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.hasClass("");
      Document document1 = element0.ownerDocument();
      List<Node> list0 = document1.childNodesCopy();
      Element element1 = document0.html("");
      element1.attr("", false);
      document1.childNodes = list0;
      document1.attributes();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element7.setBaseUri("GOJ?^Po?}");
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.setSiblingIndex(75);
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      Element element8 = element5.addClass("");
      element3.getElementsByIndexEquals(19);
      element3.getElementsByIndexGreaterThan(1010);
      element6.getElementById("[^-a-zA-Z0-9_:.]");
      element4.siblingElements();
      // Undeclared exception!
      try { 
        element8.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Element element0 = document0.head();
      element0.removeClass("");
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":has", "f#os");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Element element0 = document0.prepend(":has");
      document1.text();
      List<Node> list0 = Parser.parseXmlFragment("Pattern syntax error: ", "na");
      Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":has");
      document0.parents();
      Element element1 = document1.prependElement(":has :has");
      document1.data();
      element1.siblingElements();
      document1.getElementsByTag("_#-UVTH2%GSs");
      element0.addClass("na");
      // Undeclared exception!
      try { 
        element1.insertChildren((-1264), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element2.val("br");
      element1.dataNodes();
      document2.hasClass(" />");
      int int0 = (-534);
      // Undeclared exception!
      try { 
        element2.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xlzgAhT");
      Document document0 = Parser.parse("<F,", "xlzgAhT");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.siblingIndex = (-1625949434);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.getElementsByAttributeStarting("N%c'\"Cjb9OWwoz");
      document0.data();
      document0.prepend("N%c'\"Cjb9OWwoz");
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("xMZ/2sQ`,G\ncTr");
      Element element0 = document0.text("xMZ/2sQ`,G\ncTr");
      element0.removeClass("xMZ/2sQ`,G\ncTr");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "y'=wwjb+MN;86\"");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("Z-_>[7r&}");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "O%O=']se>nw=1");
      document0.dataset();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.clone();
      String string0 = "2S5C_b'&tf@`Q7";
      // Undeclared exception!
      try { 
        document1.text("2S5C_b'&tf@`Q7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("e\"zQq=Tl)nnQX{:Ps", "7G?r(mSFB0y6J/`O$pl");
      document0.attr("7G?r(mSFB0y6J/`O$pl");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.head();
      element0.children();
      document0.getElementsByAttributeValueEnding("N$", "N$");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(32);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.attr("", false);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      element0.selectFirst("head");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      Element element2 = element1.doClone(element0);
      element2.getElementsByIndexGreaterThan(0);
      element2.parentNode = (Node) document1;
      element2.setBaseUri(".");
      element1.dataNodes();
      document2.hasClass(" />");
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.body();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-812));
      Element element1 = element0.toggleClass("X7|A");
      element0.unwrap();
      MockFileWriter mockFileWriter0 = new MockFileWriter("html", true);
      element1.html(mockFileWriter0);
      parser1.parseFragmentInput("<],z", element0, "*=");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser2 = parser1.settings(parseSettings0);
      Document document1 = document0.parser(parser2);
      parser2.settings(parseSettings0);
      document1.updateMetaCharsetElement(true);
      Element element2 = element0.doClone(document1);
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeValueContaining((String) null, "html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">e$_54lEa<z0gnr#=_");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Document document0 = Parser.parseBodyFragmentRelaxed(">e$_54lEa<z0gnr#=_", ">e$_54lEa<z0gnr#=_");
      document0.id();
      Document document1 = document0.clone();
      document1.attributes();
      document1.childNodesAsArray();
      document1.appendChild(document0);
      document1.text();
      Element element0 = document1.attr(">e$_54lEa<z0gnr#=_", true);
      element0.wholeText();
      document1.hasText();
      element0.tagName();
      int int0 = 1089;
      // Undeclared exception!
      try { 
        document0.child(1089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.empty();
      element1.siblingNodes();
      Element element2 = element0.toggleClass("zq.]");
      Element element3 = element2.addClass("4K");
      element3.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element4 = element2.empty();
      element4.siblingNodes();
      element4.clearAttributes();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element5 = element0.tagName("zq.]");
      Element element6 = element5.prependText("br");
      Element element7 = element2.tagName("[^-a-zA-Z0-9_:.]");
      element7.setBaseUri("GOJ?^Po?}");
      element7.getElementsByIndexLessThan(0);
      element3.setBaseUri("zq.]");
      element6.val();
      element6.text();
      element5.getElementsByAttribute("zq.]");
      element2.getElementsByIndexLessThan(0);
      Element element8 = element5.addClass("");
      element3.getElementsByIndexEquals(0);
      element3.getElementsByIndexGreaterThan(1010);
      element6.getElementById("[^-a-zA-Z0-9_:.]");
      element4.siblingElements();
      // Undeclared exception!
      try { 
        element8.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment("b}fQGpZazu", "kgl+GUzmg+ParNF");
      Element element0 = document0.head();
      document0.attr("InCaption");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Element element1 = element0.tagName("b}fQGpZazu");
      element1.ownText();
      element1.siblingElements();
      element1.nodelistChanged();
      element1.getElementsByAttributeStarting("kgl+GUzmg+ParNF");
      Element element2 = element0.removeClass("kgl+GUzmg+ParNF");
      element2.text();
      element2.wrap(".hZT<D)Fs;C>ib4");
      element0.wholeText();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element1 = document2.body();
      element1.childNodesCopy();
      List<DataNode> list0 = element1.dataNodes();
      element1.doClone(element0);
      element1.before("RXh_c}$X6nfcSYlt");
      element1.lastElementSibling();
      element1.dataNodes();
      document2.hasClass(" />");
      // Undeclared exception!
      try { 
        document1.insertChildren((-534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.html();
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      element1.attr("[MNb{8v~", "uMPdp{zi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document2 = Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[2] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document2;
      // Undeclared exception!
      try { 
        document0.insertChildren(1790, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uMPdp{zi");
      Document document0 = Parser.parseBodyFragmentRelaxed(";p", ";p");
      Document document1 = document0.clone();
      Element element0 = document1.append("pW*~{,gdq=]T?;(yy");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document1.doClone(element0);
      document1.html();
      document1.getElementsByAttributeValueNot("EnHQcmv#Ndn+", ";p");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document2 = Document.createShell(";p");
      document1.getElementsByAttributeValueMatching("|", ";p");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[2] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) document2;
      // Undeclared exception!
      try { 
        document0.insertChildren(1790, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.Element$NodeList");
      Document document0 = parser1.parseInput((Reader) stringReader0, "3!!<");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.nextSibling();
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.className();
      document1.elementSiblingIndex();
      document1.attr("org.jsoup.nodes.Element$NodeList", false);
      document1.updateMetaCharsetElement(false);
      Pattern pattern0 = Pattern.compile("3!!<", 0);
      document0.getElementsMatchingText(pattern0);
      document1.getElementsByTag(".7");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      Document document0 = Parser.parseBodyFragment("", "PCMPug{v");
      Document document1 = document0.clone();
      document1.getElementsMatchingOwnText("head");
      document1.toString();
      Pattern pattern0 = Pattern.compile("");
      pattern0.splitAsStream("");
      pattern0.splitAsStream("");
      pattern0.asPredicate();
      document1.getElementsMatchingText(pattern0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(_*PsM&']");
      document0.wholeText();
      document0.ensureChildNodes();
      document1.attr("org.jsoup.nodes.Element$1");
      document1.getElementsByAttributeStarting("body");
      Element element0 = document1.appendChild(document0);
      Element element1 = element0.addClass("q{e}'(");
      element1.childNodes();
      document1.prependElement("textarea");
      element1.html();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Document.createShell(",XgFvS");
      Document document1 = document0.normalise();
      document1.hasClass("truespeed");
      Element element0 = document1.appendTo(document0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("AttributeValue_singleQuoted", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "brts.e*<}6F5$K");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.getElementsContainingOwnText("brts.e*<}6F5$K");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.createElement("org.jsoup.nodes.Element");
      element0.dataNodes();
      element0.data();
      element0.hasClass("brts.e*<}6F5$K");
      Element element1 = element0.html("org.jsoup.nodes.Element");
      element1.getElementsByIndexEquals(76);
      Element element2 = document1.attr("#cdata", "brts.e*<}6F5$K");
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element2.classNames(set0);
      String string0 = ")NIj\\>`y4-tBv@/";
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      // Undeclared exception!
      try { 
        element1.insertChildren((-311), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("a@&", "Wv<r A}wWx");
      Document document1 = document0.clone();
      document0.dataNodes();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)124;
      CDataNode cDataNode0 = new CDataNode("XX3]+yQ");
      List<Node> list0 = cDataNode0.ensureChildNodes();
      document0.childNodes = list0;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.getElementsContainingText("Wv<r A}wWx");
      document1.tagName();
      Element element0 = document0.removeClass("#root");
      document1.hasText();
      // Undeclared exception!
      try { 
        element0.attr((String) null, "B!z-4$<JzF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document1.body();
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("iIems)e");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document0.toggleClass("<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document1.body();
      document0.textNodes();
      element0.nodelistChanged();
      document1.attr("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.toString();
      document1.getElementsByAttributeValue("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      document1.siblingIndex = 3116;
      Document document3 = (Document)document0.toggleClass("<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Element element1 = element0.previousElementSibling();
      document1.dataNodes();
      // Undeclared exception!
      try { 
        document3.after((Node) element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = new Element("br");
      element0.empty();
      Element element1 = element0.toggleClass("zq.]");
      Element element2 = element1.addClass("4K");
      element2.getElementsByAttributeValueMatching("u7g>p^[}%4Q*(cQ", "br");
      Element element3 = element1.empty();
      element3.siblingNodes();
      element3.clearAttributes();
      element3.hasText();
      element0.childNodeSize();
      element0.toString();
      element0.getElementsByAttributeValueMatching("zq.]", "");
      Element element4 = element0.tagName("zq.]");
      Element element5 = element4.prependText("br");
      Element element6 = element1.tagName("[^-a-zA-Z0-9_:.]");
      element6.setBaseUri("GOJ?^Po?}");
      element6.getElementsByIndexLessThan(0);
      element2.setBaseUri("zq.]");
      element5.val();
      element5.text();
      element4.getElementsByAttribute("zq.]");
      element1.getElementsByIndexLessThan(0);
      element4.addClass("");
      element2.getElementsByIndexGreaterThan(1010);
      element5.getElementById("[^-a-zA-Z0-9_:.]");
      element3.siblingElements();
      String string0 = "";
      // Undeclared exception!
      try { 
        element0.is("#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.head();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      Document document1 = (Document)document0.text("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      document1.nodelistChanged();
      document0.toString();
      element0.getAllElements();
      document1.getElementsByTag("itemscope");
      String string0 = Node.EmptyString;
      Document document2 = (Document)document0.attr("org.jsoup.parser.Parser", "");
      document2.childNodeSize();
      Element element1 = new Element("Bbp !C//U!s]wHgc)");
      document1.prepend("Initial");
      element0.children();
      document2.attr("Initial", false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(959);
      Parser parser2 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment(" <%s>", "#root");
      Document document1 = document0.clone();
      Document document2 = document1.parser(parser1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Element element0 = document3.body();
      Document document4 = Parser.parseBodyFragmentRelaxed("class", " <%s>");
      ParseErrorList parseErrorList0 = parser2.getErrors();
      List<Node> list0 = Parser.parseFragment("!ou/G", element0, " <%s>", parseErrorList0);
      Document document5 = parser1.parseInput(" <%s>", "]H}It:@sv");
      Element element1 = document4.body();
      element1.val();
      element1.cssSelector();
      Element element2 = document5.doClone(document3);
      element2.clearAttributes();
      document3.val("class");
      String string0 = Node.EmptyString;
      element2.dataNodes();
      // Undeclared exception!
      try { 
        element2.insertChildren(959, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document0.dataset();
      document0.className();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Element element0 = document0.prependElement("Bbp !C//U!s]wHgc)");
      document0.textNodes();
      element0.nodelistChanged();
      document0.toString();
      document0.getAllElements();
      element0.getElementsByTag("Bbp !C//U!s]wHgc)");
      document0.text();
      Document document2 = Parser.parse("Bbp !C//U!s]wHgc)", "Bbp !C//U!s]wHgc)");
      document2.childNodeSize();
      Document document3 = (Document)document0.toggleClass("<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      Parser.parse("Bbp !C//U!s]wHgc)", "<bbp !c//u!s]whgc)></bbp !c//u!s]whgc)>\n<html>\n <head></head>\n <body>\n  Bbp !C//U!s]wHgc)\n </body>\n</html>");
      document0.hasClass("n>tAM");
      document1.val();
      document3.data();
      document3.attributes();
      document2.getElementsByAttributeValueEnding("org.jsoup.parser.Parser", "</");
      document3.appendText("m=4?_8~/>8dx_");
      element0.getElementsMatchingText("]H}It:g@,Cv3");
      document0.text();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("6nZ", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings1.prepareEncoder();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      
      Elements elements1 = document0.getElementsByClass("<br>");
      assertTrue(elements1.isEmpty());
      
      Element element1 = document0.val("");
      element1.dataNodes();
      assertEquals(1, element1.childNodeSize());
  }
}
