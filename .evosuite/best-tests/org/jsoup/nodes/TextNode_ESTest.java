/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:53:58 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Q?='");
      assertEquals("Q?='", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      assertEquals("Q?='\u0000", stringBuilder0.toString());
      assertEquals("Q?='\u0000", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("Q?='\u0000", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "g94DS?3@B3zESx<!hc|");
      assertEquals("g94DS?3@B3zESx<!hc|", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document document0 = Parser.parse("g94DS?3@B3zESx<!hc|", "BeforeAttributeName");
      assertEquals("BeforeAttributeName", document0.baseUri());
      assertEquals("BeforeAttributeName", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, (Object) document0);
      assertEquals("g9<html>\n <head></head>\n <body>\n  g94DS?3@B3zESx\n  <!--hc|-->\n </body>\n</html>4DS?3@B3zESx<!hc|", stringBuilder0.toString());
      assertEquals("BeforeAttributeName", document0.baseUri());
      assertEquals("BeforeAttributeName", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("g9<html>\n <head></head>\n <body>\n  g94DS?3@B3zESx\n  <!--hc|-->\n </body>\n</html>4DS?3@B3zESx<!hc|", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode(";z/RcyQ6T BauCuG", ";z/RcyQ6T BauCuG");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      textNode1.siblingIndex = (-738);
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-738), textNode0.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertEquals((-738), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      
      String string0 = textNode0.toString();
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-738), textNode0.siblingIndex());
      assertSame(textNode0, textNode1);
      assertNotNull(string0);
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(4777);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode(";z/RcyQ6T BauCuG", ";z/RcyQ6T BauCuG");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode1.hasParent());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      textNode1.siblingIndex = (-738);
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-738), textNode0.siblingIndex());
      assertEquals((-738), textNode1.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertEquals("#text", textNode1.nodeName());
      
      TextNode textNode2 = textNode1.text("org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-738), textNode0.siblingIndex());
      assertEquals((-738), textNode1.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-738), textNode2.siblingIndex());
      assertFalse(textNode2.hasParent());
      assertEquals("#text", textNode2.nodeName());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "");
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      TextNode textNode1 = textNode0.text(":0}+cmUoTX:%-rUg'");
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertTrue(textNode1.hasParent());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("LD%Qb8");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      String string0 = cDataNode0.text();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("$^fX8J)R#t\"", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.splitText(0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(textNode1.hasParent());
      assertEquals(0, textNode1.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string0 = textNode0.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotSame(textNode0, textNode1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(textNode0.equals((Object)textNode1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("    ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("    ");
      assertEquals("    ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("    ", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, nodeArray0.length);
      
      textNode0.setParentNode(document0);
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text((String) null);
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      // Undeclared exception!
      try { 
        cDataNode0.splitText(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      textNode0.setParentNode(document0);
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("{>HI3d`P4");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      textNode0.value = object0;
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        textNode0.splitText((-2798));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "L=y'oYgp8k!=UgMsD");
      assertEquals(17, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(17, charBuffer0.remaining());
      assertEquals(17, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(17, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("L=y'oYgp8k!=UgMsD", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(charBuffer0, 98, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = new TextNode("b'6v!QnzB+", "+A*hFcAfd9%?]]2^");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(charBuffer0, 18, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("g94DS?3@B3zESx<!hc|", "g94DS?3@B3zESx<!hc|");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "g94DS?3@B3zESx<!hc|");
      assertEquals("g94DS?3@B3zESx<!hc|", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, 32, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode("cb|-/)H");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cb|-/)H");
      assertNotNull(mockPrintWriter0);
      
      textNode0.reparentChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      TextNode textNode0 = TextNode.createFromEncoded("Kw/#", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      try { 
        textNode0.outerHtmlHead(pipedWriter0, 485, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("9D1T2x`s|c|");
      assertEquals("9D1T2x`s|c|", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("9D1T2x`s|c|", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("LD%Qb8");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      String string0 = cDataNode0.getWholeText();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      String string0 = textNode0.nodeName();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(string0);
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("LD%Qb8");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      String string0 = cDataNode0.getWholeText();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("LD%Qb8", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Pattern pattern0 = Pattern.compile("Split offset must not be greater than current text length", 2004);
      assertEquals(2004, pattern0.flags());
      assertEquals("Split offset must not be greater than current text length", pattern0.toString());
      assertEquals("Split offset must not be greater than current text length", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2004, pattern0.flags());
      assertEquals("Split offset must not be greater than current text length", pattern0.toString());
      assertEquals("Split offset must not be greater than current text length", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("cb|-/)H");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cb|-/)H");
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      textNode0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      textNode0.setParentNode(document0);
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      String string0 = textNode0.toString();
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = textNode0.toString();
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("Split offset must not be greater than current text length", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("abbr");
      assertEquals("abbr", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      TextNode textNode0 = TextNode.createFromEncoded("$^fX8J)R#t\"", "");
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      textNode0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings0);
      assertEquals("abbr$^fX8J)R#t\"", stringBuilder0.toString());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "");
      document0.appendChild(textNode0);
      textNode0.splitText(1);
      assertEquals(1, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode("cb|-/)H");
      textNode0.splitText(0);
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("{>HI3d`P4");
      // Undeclared exception!
      try { 
        textNode0.splitText((-2798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      TextNode textNode1 = textNode0.splitText(1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      File file0 = MockFile.createTempFile("t2FVy*NCO}f7 ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(mockPrintStream0, (-961), document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("width must be > 0");
      assertEquals("width must be > 0", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("width must be > 0");
      assertEquals("width must be > 0", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must not be greater than current text length");
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("$^fX8J)R#t\"", "");
      textNode0.text();
  }
}
