/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 12:01:30 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("j|MRLRr8T", "#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      assertEquals("\u0000", stringBuilder0.toString());
      assertEquals("\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, true);
      assertEquals("true\u0000", stringBuilder0.toString());
      assertEquals("true\u0000", stringBuilder1.toString());
      assertEquals("true\u0000", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.replace(2, 2, "g[.'\"}AC{B=Z3 Dq{");
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, 2);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder4.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      charArray0[2] = '.';
      StringBuilder stringBuilder5 = stringBuilder1.append(charArray0, 0, 0);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder5.toString());
      assertNotNull(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertArrayEquals(new char[] {'\\', ',', '.'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Node node0 = textNode0.removeAttr("#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      String string0 = textNode0.text();
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertSame(textNode0, node0);
      assertEquals("j|MRLRr8T", string0);
      
      String string1 = textNode0.getWholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      assertSame(textNode0, node0);
      assertEquals("j|MRLRr8T", string1);
      
      String string2 = TextNode.normaliseWhitespace("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(15);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(15, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(15, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode0.outerHtmlTail(stringBuilder3, 65, document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(15, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(15, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(textNode0, node0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      String string3 = textNode0.absUrl("#text");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      assertSame(textNode0, node0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = new TextNode("C", "qJ}");
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = TextNode.stripLeadingWhitespace("C");
      assertNotNull(string0);
      assertEquals("C", string0);
      
      textNode0.setSiblingIndex(545);
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(545, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = TextNode.stripLeadingWhitespace("C");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C", string1);
      
      TextNode textNode1 = TextNode.createFromEncoded(" in1f[CaiW", "C");
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      
      textNode1.siblingIndex = 19;
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(19, textNode1.siblingIndex());
      
      TextNode textNode2 = textNode1.text(";tUS");
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(19, textNode1.siblingIndex());
      assertEquals(19, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("C", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      TextNode textNode3 = TextNode.createFromEncoded("publicId", "");
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertNotNull(textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      
      List<Node> list0 = textNode1.childNodesCopy();
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(19, textNode1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode3);
      
      textNode3.childNodes = list0;
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(19, textNode1.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(textNode3.childNodes.isEmpty());
      assertEquals(0, textNode3.childNodes.size());
      
      boolean boolean0 = textNode0.equals(textNode3);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(545, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertFalse(boolean0);
      
      TextNode textNode4 = TextNode.createFromEncoded(" in1f[CaiW", "W%H?a");
      assertFalse(textNode4.equals((Object)textNode0));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode3));
      assertEquals(0, textNode4.siblingIndex());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("W%H?a", textNode4.baseUri());
      assertEquals(0, textNode4.childNodeSize());
      assertNotNull(textNode4);
      assertNotSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode3);
      
      String string2 = TextNode.stripLeadingWhitespace(" in1f[CaiW");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("in1f[CaiW", string2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      TextNode textNode5 = TextNode.createFromEncoded("B}odt", " in1f[CaiW");
      assertFalse(textNode5.equals((Object)textNode1));
      assertFalse(textNode5.equals((Object)textNode2));
      assertFalse(textNode5.equals((Object)textNode0));
      assertFalse(textNode5.equals((Object)textNode3));
      assertFalse(textNode5.equals((Object)textNode4));
      assertEquals(0, textNode5.childNodeSize());
      assertEquals(" in1f[CaiW", textNode5.baseUri());
      assertEquals(0, textNode5.siblingIndex());
      assertEquals("#text", textNode5.nodeName());
      assertNotNull(textNode5);
      assertNotSame(textNode5, textNode1);
      assertNotSame(textNode5, textNode2);
      assertNotSame(textNode5, textNode0);
      assertNotSame(textNode5, textNode3);
      assertNotSame(textNode5, textNode4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode((String) null, "text");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text((String) null);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = "org.jsoup.nodes.TextNode";
      String string2 = "#text";
      // Undeclared exception!
      try { 
        textNode1.hasAttr("#text");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = TextNode.createFromEncoded("text", "text");
      assertEquals("text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string1 = textNode0.attr("text");
      assertTrue(string1.equals((Object)string0));
      assertEquals("text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string1);
      assertEquals("text", string1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(1296);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("plaintext");
      assertEquals("plaintext", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      assertEquals("plaintext", stringBuilder0.toString());
      assertEquals("plaintext", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      assertEquals("laintext", stringBuilder0.toString());
      assertEquals("laintext", stringBuilder1.toString());
      assertEquals("laintext", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder1.insert(0, 0.0F);
      assertEquals("0.0laintext", stringBuilder0.toString());
      assertEquals("0.0laintext", stringBuilder1.toString());
      assertEquals("0.0laintext", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      
      StringBuilder stringBuilder4 = stringBuilder2.append((-1L));
      assertEquals("0.0laintext-1", stringBuilder0.toString());
      assertEquals("0.0laintext-1", stringBuilder1.toString());
      assertEquals("0.0laintext-1", stringBuilder2.toString());
      assertEquals("0.0laintext-1", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertEquals("0.0laintext-1", stringBuilder0.toString());
      assertEquals("0.0laintext-1", stringBuilder1.toString());
      assertEquals("0.0laintext-1", stringBuilder2.toString());
      assertEquals("0.0laintext-1", stringBuilder4.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertFalse(boolean0);
      
      String string0 = TextNode.stripLeadingWhitespace("plaintext");
      assertNotNull(string0);
      assertEquals("plaintext", string0);
      
      TextNode textNode0 = TextNode.createFromEncoded("plaintext", "ScriptDataEndTagName");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("ScriptDataEndTagName", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.removeAttr("#text");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("ScriptDataEndTagName", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("ScriptDataEndTagName", node0.baseUri());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder2, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "Split offset must be not be negative");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 31;
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      textNode0.siblingIndex = 31;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      String string1 = textNode0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Node node0 = textNode0.attr("m&[)|GyuEQ9(sA|6E4", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(31, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals("Split offset must be not be negative", node0.baseUri());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      boolean boolean0 = textNode0.equals((Object) null);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertSame(textNode0, node0);
      assertFalse(boolean0);
      
      String string2 = textNode0.toString();
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertSame(textNode0, node0);
      assertEquals("", string2);
      
      String string3 = textNode0.attr("_2j+2Zr41s");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string3);
      assertSame(textNode0, node0);
      assertEquals("", string3);
      
      String string4 = textNode0.attr("Split offset must be not be negative");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertSame(textNode0, node0);
      assertEquals("", string4);
      
      String string5 = textNode0.nodeName();
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(31, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string5);
      assertSame(textNode0, node0);
      assertEquals("#text", string5);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "NZyuLA\"";
      TextNode textNode0 = TextNode.createFromEncoded("NZyuLA\"", "NZyuLA\"");
      assertEquals("NZyuLA\"", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = (-922);
      textNode0.setSiblingIndex((-922));
      assertEquals((-922), textNode0.siblingIndex());
      assertEquals("NZyuLA\"", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = textNode0.outerHtml();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-922), textNode0.siblingIndex());
      assertEquals("NZyuLA\"", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertEquals("NZyuLA\"", string1);
      
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "1.0");
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("1.0", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.hasAttr("");
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("1.0", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      assertSame(textNode0, textNode1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      TextNode textNode2 = TextNode.createFromEncoded("", "Split offset must not be greater than current text length");
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("Split offset must not be greater than current text length", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      boolean boolean1 = textNode0.equals(textNode2);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertTrue(boolean1 == boolean0);
      assertEquals("1.0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertFalse(boolean1);
      
      String string0 = TextNode.normaliseWhitespace("lS77X9eb\"ia7pW@!eQ");
      assertNotNull(string0);
      assertEquals("lS77X9eb\"ia7pW@!eQ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      textNode0.hashCode();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      TextNode textNode1 = textNode0.text((String) null);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string0 = "";
      textNode0.setBaseUri("base");
      assertEquals("base", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(textNode0, textNode1);
      
      textNode1.baseUri = "";
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      
      textNode1.hashCode();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr("h4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      textNode0.hashCode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode1 = textNode0.text((String) null);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string0 = "";
      textNode0.setBaseUri("base");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("base", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertSame(textNode0, textNode1);
      
      textNode1.hashCode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("base", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("base", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr("h4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "1.0");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1.0", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1.0", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("1.0", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1.0", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      assertSame(textNode0, textNode1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1.0", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(textNode0, textNode1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      TextNode textNode2 = TextNode.createFromEncoded("", "Split offset must not be greater than current text length");
      assertTrue(textNode2.equals((Object)textNode0));
      assertTrue(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode2.baseUri());
      assertNotNull(textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      boolean boolean0 = textNode0.equals(textNode2);
      assertTrue(textNode0.equals((Object)textNode2));
      assertTrue(textNode2.equals((Object)textNode0));
      assertTrue(textNode2.equals((Object)textNode1));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1.0", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode2.baseUri());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertTrue(boolean0);
      
      String string0 = TextNode.normaliseWhitespace("lS77X9eb\"ia7pW@!eQ");
      assertNotNull(string0);
      assertEquals("lS77X9eb\"ia7pW@!eQ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("% D~t4]Ww", "% D~t4]Ww");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("% D~t4]Ww", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.hasAttr("% D~t4]Ww");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("% D~t4]Ww", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(boolean0);
      
      textNode0.setParentNode((Node) null);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("% D~t4]Ww", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = textNode0.text("IV)*[*]tyx8h/XgH");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("% D~t4]Ww", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("% D~t4]Ww", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(330);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean1 == boolean0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ">Q7wmUIJ9o}";
      String string1 = "f";
      TextNode textNode0 = new TextNode(">Q7wmUIJ9o}", "f");
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string2 = "multiple";
      String string3 = TextNode.normaliseWhitespace(">Q7wmUIJ9o}");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(">Q7wmUIJ9o}", string3);
      
      String string4 = textNode0.nodeName();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertEquals("#text", string4);
      
      String string5 = textNode0.getWholeText();
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string5);
      assertEquals(">Q7wmUIJ9o}", string5);
      
      boolean boolean0 = textNode0.hasAttr("multiple");
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(boolean0);
      
      String string6 = null;
      // Undeclared exception!
      try { 
        textNode0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, " YO#");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" YO#", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Th2u[eJ";
      TextNode textNode0 = TextNode.createFromEncoded("Th2u[eJ", "Th2u[eJ");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("org.jsoup.nodes.DataNode");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("Th2u[eJ", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = TextNode.normaliseWhitespace("org.jsoup.nodes.DataNode");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.jsoup.nodes.DataNode", string1);
      
      boolean boolean0 = textNode0.equals((Object) null);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(textNode0, textNode1);
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 34;
      // Undeclared exception!
      try { 
        stringBuilder0.delete(34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ".%s";
      String string1 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode(".%s", "Split offset must not be greater than current text length");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string2 = "BHr3DzX<:ia+N&e";
      String string3 = textNode0.attr("BHr3DzX<:ia+N&e");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(string3);
      assertEquals("", string3);
      
      TextNode textNode1 = textNode0.text(".%s");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      textNode1.reparentChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = 868;
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("|hblSw2G7m0;:=7:YV");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode1.splitText(0);
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      String string0 = textNode2.attr("");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertNotNull(string0);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("", string0);
      
      boolean boolean0 = textNode2.hasAttr("|hblSw2G7m0;:=7:YV");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertFalse(boolean0);
      
      String string1 = "3i/3dy1--zaq =";
      TextNode textNode3 = textNode0.text("3i/3dy1--zaq =");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode2));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertNotNull(textNode3);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      
      String string2 = TextNode.normaliseWhitespace("B,k-.k'?x%Y)(n<C^{");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("B,k-.k'?x%Y)(n<C^{", string2);
      
      boolean boolean1 = textNode1.equals(textNode3);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      assertTrue(boolean1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "B,k-.k'?x%Y)(n<C^{");
      assertEquals("B,k-.k'?x%Y)(n<C^{", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '$';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      charArray0[4] = '%';
      charArray0[5] = '2';
      charArray0[6] = 'E';
      charArray0[7] = '<';
      charArray0[8] = 'r';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("B,k-.k'?x%Y)(n<C^{>$U7%2E<r", stringBuilder1.toString());
      assertEquals("B,k-.k'?x%Y)(n<C^{>$U7%2E<r", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertArrayEquals(new char[] {'>', '$', 'U', '7', '%', '2', 'E', '<', 'r'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int0 = 797;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(797, (Object) "B,k-.k'?x%Y)(n<C^{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 797
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(string0);
      assertEquals("Split offset must not be greater than current text length", string0);
      
      // Undeclared exception!
      try { 
        textNode0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      String string1 = "5xQPZO<n;])Kj-gk*<";
      TextNode textNode0 = new TextNode((String) null, "5xQPZO<n;])Kj-gk*<");
      assertEquals("5xQPZO<n;])Kj-gk*<", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text((String) null);
      assertEquals("5xQPZO<n;])Kj-gk*<", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("5xQPZO<n;])Kj-gk*<", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode1.getWholeText();
      assertEquals("5xQPZO<n;])Kj-gk*<", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("5xQPZO<n;])Kj-gk*<", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode("#text", "#text");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.nodeName();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertNotNull(string0);
      assertEquals("#text", string0);
      
      Node node0 = textNode0.attr("q|^N\"n! RbH", "q|^N\"n! RbH");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals("#text", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      boolean boolean0 = textNode0.hasAttr("q|^N\"n! RbH");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertSame(textNode0, node0);
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "q|^N\"n! RbH");
      assertEquals("q|^N\"n! RbH", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('?');
      assertEquals("q|^N\"n! RbH?", stringBuilder0.toString());
      assertEquals("q|^N\"n! RbH?", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(3);
      assertEquals("q|^N\"n! RbH?3", stringBuilder0.toString());
      assertEquals("q|^N\"n! RbH?3", stringBuilder1.toString());
      assertEquals("q|^N\"n! RbH?3", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      int int0 = 1388;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1388, (-292L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1388
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("6B", "6Q4:U)NX7 $y1Hd0");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      assertNotNull(textNode0);
      
      textNode0.setBaseUri("6Q4:U)NX7 $y1Hd0");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      
      textNode0.siblingIndex = 28;
      assertEquals(28, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      
      String string0 = textNode0.text();
      assertEquals(28, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      assertNotNull(string0);
      assertEquals("6B", string0);
      
      textNode0.hashCode();
      assertEquals(28, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      
      Node node0 = textNode0.removeAttr("6Q4:U)NX7 $y1Hd0");
      assertEquals(28, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6Q4:U)NX7 $y1Hd0", textNode0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(28, node0.siblingIndex());
      assertEquals("6Q4:U)NX7 $y1Hd0", node0.baseUri());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      String string1 = TextNode.stripLeadingWhitespace("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("menuitem", ":VNxy/");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(":VNxy/", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text((String) null);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(":VNxy/", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(":VNxy/", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "zdb7Cua*";
      TextNode textNode0 = new TextNode("zdb7Cua*", "zdb7Cua*");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("zdb7Cua*", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.absUrl((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "b W;PT#3";
      TextNode textNode0 = TextNode.createFromEncoded("b W;PT#3", "4M/+kfQr|;{ji");
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.equals("b W;PT#3");
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(boolean0);
      
      textNode0.baseUri = "4M/+kfQr|;{ji";
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = textNode0.text("Split offset must not be greater than current text length");
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("4M/+kfQr|;{ji", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      boolean boolean1 = textNode1.equals(textNode0);
      assertFalse(boolean1 == boolean0);
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("4M/+kfQr|;{ji", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertTrue(boolean1);
      
      Node node0 = textNode1.clone();
      assertTrue(node0.equals((Object)textNode0));
      assertTrue(node0.equals((Object)textNode1));
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("4M/+kfQr|;{ji", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("4M/+kfQr|;{ji", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertNotNull(node0);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(node0, textNode1);
      assertNotSame(node0, textNode0);
      
      String string1 = textNode1.absUrl("b W;PT#3");
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("4M/+kfQr|;{ji", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("4M/+kfQr|;{ji", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string1);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertEquals("", string1);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Split offset must not be greater than current text length");
      assertEquals("Split offset must not be greater than current text length", stringBuffer0.toString());
      assertEquals(57, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("Split offset must not be greater than current text length", stringBuilder0.toString());
      assertEquals("Split offset must not be greater than current text length", stringBuffer0.toString());
      assertEquals(57, stringBuffer0.length());
      assertEquals("Split offset must not be greater than current text length", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 5478);
      assertEquals("5478Split offset must not be greater than current text length", stringBuilder0.toString());
      assertEquals("Split offset must not be greater than current text length", stringBuffer0.toString());
      assertEquals(57, stringBuffer0.length());
      assertEquals("5478Split offset must not be greater than current text length", stringBuilder1.toString());
      assertEquals("5478Split offset must not be greater than current text length", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder2.insert(5478, (CharSequence) stringBuilder0, 10, 341);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 5478
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode((String) null, (String) null);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(827);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "-2Ayu%KF");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("-2Ayu%KF", textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.equals("Split offset must not be greater than current text length");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(boolean0);
      
      String string1 = textNode0.attr("Split offset must not be greater than current text length");
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(node0);
      
      textNode0.parentNode = null;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      // Undeclared exception!
      try { 
        textNode0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded("", "#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      List<Node> list0 = textNode0.childNodes();
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(textNode0, textNode1);
      
      textNode0.setParentNode(textNode1);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      Node node0 = textNode1.removeAttr("#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("#text", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertNotNull(node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(node0, textNode1);
      assertSame(node0, textNode0);
      
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(nodeArray0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertEquals(0, nodeArray0.length);
      
      String string2 = textNode0.getWholeText();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertEquals("#text", string2);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertFalse(boolean0);
      
      TextNode textNode2 = textNode1.text("");
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      boolean boolean1 = textNode2.isBlank();
      assertFalse(boolean1 == boolean0);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertTrue(boolean1);
      
      String string3 = textNode0.attr("");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode2);
      assertEquals("", string3);
      
      String string4 = "^\\s+";
      String string5 = textNode2.absUrl("^s+");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(string5);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertEquals("", string5);
      
      String string6 = textNode1.text();
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertEquals("", string6);
      
      // Undeclared exception!
      textNode2.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = new TextNode("fr$=2O=n0Jg", "");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("f*Ba6z@eU]lSZ");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string0 = textNode1.attr("Split offset must be not be negative");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string0);
      
      String string1 = textNode0.getWholeText();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("plaintext");
      assertEquals("plaintext", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      assertEquals("plaintext", stringBuilder0.toString());
      assertEquals("plaintext", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      assertEquals("laintext", stringBuilder0.toString());
      assertEquals("laintext", stringBuilder1.toString());
      assertEquals("laintext", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((-1L));
      assertEquals("laintext-1", stringBuilder0.toString());
      assertEquals("laintext-1", stringBuilder1.toString());
      assertEquals("laintext-1", stringBuilder2.toString());
      assertEquals("laintext-1", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder3);
      assertEquals("laintext-1", stringBuilder0.toString());
      assertEquals("laintext-1", stringBuilder1.toString());
      assertEquals("laintext-1", stringBuilder2.toString());
      assertEquals("laintext-1", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode("org.jsoup.nodes.TextNode", (String) null);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "J-lIzwE");
      assertEquals("J-lIzwE", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = textNode0.outerHtml();
      assertEquals("J-lIzwE", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("J-lIzwE", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(1762);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("a", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("a");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      textNode1.reparentChild(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      Attributes attributes0 = textNode1.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string0 = textNode1.nodeName();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", string0);
      
      String string1 = "/lC[/)A'r,%=aQfH|";
      String string2 = TextNode.normaliseWhitespace("0g2_%q/^eb");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0g2_%q/^eb", string2);
      
      String string3 = textNode0.attr("/lC[/)A'r,%=aQfH|");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertEquals("", string3);
      
      boolean boolean0 = textNode1.hasAttr("a");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = new TextNode("A:)C_+X}8cnu[+P", "A:)C_+X}8cnu[+P");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A:)C_+X}8cnu[+P", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(" PUBLIC \"");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A:)C_+X}8cnu[+P", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("A:)C_+X}8cnu[+P", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      textNode1.reparentChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("A:)C_+X}8cnu[+P", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("A:)C_+X}8cnu[+P", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("F$eD6A[}r]kD@0vYjZW");
      assertNotNull(string0);
      
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode1.nodeName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", string1);
      
      String string2 = textNode1.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string2);
      
      String string3 = textNode1.text();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string3);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) textNode1;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode1;
      nodeArray0[3] = (Node) textNode0;
      Attributes attributes1 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes1);
      assertSame(textNode0, textNode1);
      assertSame(attributes1, attributes0);
      
      nodeArray0[4] = (Node) textNode1;
      String string4 = textNode0.absUrl("IE1fm]B:zwYYl6]N5z");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertSame(textNode0, textNode1);
      assertEquals("", string4);
      
      nodeArray0[5] = (Node) textNode1;
      nodeArray0[6] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode1.addChildren((-1874), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      TextNode textNode1 = TextNode.createFromEncoded("", "");
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode("us9", "us9");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("us9", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.removeAttr("rY$;@LB3:'Y");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("us9", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("us9", node0.baseUri());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("38i!t_s/O>m;]p|?Z8@", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("LR>~H!m3YIl#mt!", ".DxBDZ[mb4Nm)?B(w");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(".DxBDZ[mb4Nm)?B(w", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("LR>~H!m3YIl#mt!");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(".DxBDZ[mb4Nm)?B(w", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(".DxBDZ[mb4Nm)?B(w", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      Attributes attributes0 = textNode1.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(".DxBDZ[mb4Nm)?B(w", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(".DxBDZ[mb4Nm)?B(w", textNode1.baseUri());
      assertNotNull(attributes0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.helper.W3CDom", "OM[,~z& 5QE2c&!{1Xm");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OM[,~z& 5QE2c&!{1Xm", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("OM[,~z& 5QE2c&!{1Xm", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string0);
      assertEquals("org.jsoup.helper.W3CDom", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 1322);
      assertEquals("13220.0", stringBuilder0.toString());
      assertEquals("13220.0", stringBuilder1.toString());
      assertEquals("13220.0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append("Split offset must not be greater than current text length");
      assertEquals("13220.0Split offset must not be greater than current text length", stringBuilder0.toString());
      assertEquals("13220.0Split offset must not be greater than current text length", stringBuilder1.toString());
      assertEquals("13220.0Split offset must not be greater than current text length", stringBuilder2.toString());
      assertEquals("13220.0Split offset must not be greater than current text length", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((long) 1322);
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder0.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder1.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder2.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder3.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      
      Document document0 = new Document("|4PY");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|4PY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|4PY", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|4PY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|4PY", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|4PY", document1.location());
      assertEquals("|4PY", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = document1.outputSettings();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|4PY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|4PY", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|4PY", document1.location());
      assertEquals("|4PY", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1322);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|4PY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|4PY", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|4PY", document1.location());
      assertEquals("|4PY", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1322, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1322, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode0.outerHtmlHead(stringBuilder4, 1322, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder0.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder1.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder2.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder3.toString());
      assertEquals("13220.0Split offset must not be greater than current text length1322", stringBuilder4.toString());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|4PY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|4PY", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|4PY", document1.location());
      assertEquals("|4PY", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1322, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1322, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = new TextNode("j|:Ydy\"yM-", "C*gHtFjG$a:2V");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.hasAttr("?RSdUldy9p#yYjl(Q2");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean0);
      
      String string0 = TextNode.stripLeadingWhitespace("open");
      assertNotNull(string0);
      assertEquals("open", string0);
      
      String string1 = TextNode.normaliseWhitespace("C*gHtFjG$a:2V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C*gHtFjG$a:2V", string1);
      
      boolean boolean1 = textNode0.equals("open");
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean1);
      
      Node node0 = textNode0.attr("org.jsoup.select.Evaluator", "C*gHtFjG$a:2V");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      TextNode textNode1 = textNode0.text("C*gHtFjG$a:2V");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      
      Node node1 = textNode1.removeAttr("j|:Ydy\"yM-");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("C*gHtFjG$a:2V", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("C*gHtFjG$a:2V", node1.baseUri());
      assertEquals(0, node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.childNodeSize());
      assertNotNull(node1);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode1, node1);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(node1, textNode1);
      assertSame(node1, node0);
      assertSame(node1, textNode0);
      
      Document document0 = new Document("");
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document.OutputSettings document_OutputSettings1 = document2.outputSettings();
      assertTrue(document0.equals((Object)document2));
      assertTrue(document1.equals((Object)document2));
      assertTrue(document2.equals((Object)document1));
      assertTrue(document2.equals((Object)document0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode1.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" > ", " > ");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[0];
      textNode0.addChildren(nodeArray0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, nodeArray0.length);
      
      textNode0.text = "org.jsoup.select.Evaluator$MatchesOwn";
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      List<Node> list0 = textNode0.childNodes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      textNode0.hashCode();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = textNode0.absUrl("ybeaLwilYM2A=X7`\"");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = textNode0.hasAttr("^s+");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean0);
      
      String string1 = textNode0.absUrl("w\"h7u0 >b`9#?4");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      TextNode textNode1 = TextNode.createFromEncoded("", "");
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      
      textNode1.addChildren(nodeArray0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(textNode1, textNode0);
      assertEquals(0, nodeArray0.length);
      
      TextNode textNode2 = textNode0.splitText(18);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(" > ", textNode2.baseUri());
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      Attributes attributes0 = textNode2.attributes();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(" > ", textNode2.baseUri());
      assertNotNull(attributes0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      textNode1.setSiblingIndex(18);
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(18, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      
      String string2 = textNode2.attr(" > ");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(" > ", textNode2.baseUri());
      assertNotNull(string2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("", string2);
      
      TextNode textNode3 = textNode0.text("ybeaLwilYM2A=X7`\"");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode1));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(" > ", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertNotNull(textNode3);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      
      Document.OutputSettings document_OutputSettings0 = textNode2.getOutputSettings();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(" > ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(" > ", textNode2.baseUri());
      assertNotNull(document_OutputSettings0);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode1);
      
      // Undeclared exception!
      try { 
        textNode2.attr("", "W$Ceb8Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.absUrl("org.jsoup.nodes.Attribute");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(62);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string0 = textNode1.attr("");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      textNode0.attributes = attributes1;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = textNode0.text("");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.splitText(45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("org.jsoup.nodes.Document$QuirksMode");
      assertNotNull(string0);
      assertEquals("org.jsoup.nodes.Document$QuirksMode", string0);
      
      TextNode textNode0 = new TextNode("org.jsoup.nodes.Document$QuirksMode", "org.jsoup.nodes.Document$QuirksMode");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.splitText(0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string1 = textNode1.toString();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$QuirksMode", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("org.jsoup.nodes.Document$QuirksMode", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("text");
      assertNotNull(string0);
      assertEquals("text", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextNode textNode0 = new TextNode("GDn=b#[oUZlEOr", "GDn=b#[oUZlEOr");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("GDn=b#[oUZlEOr", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.splitText(1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("GDn=b#[oUZlEOr", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("GDn=b#[oUZlEOr", textNode1.baseUri());
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "d@yh:b[qma>{NgK";
      TextNode textNode0 = TextNode.createFromEncoded("Entities", "d@yh:b[qma>{NgK");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("d@yh:b[qma>{NgK", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(489);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", ";SE-,:<x'4?6wci");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(";SE-,:<x'4?6wci", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(";SE-,:<x'4?6wci", textNode0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextNode textNode0 = new TextNode("pMN,Sz6D71^buV", (String) null);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText((-135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = textNode0.nodeName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      assertEquals("#text", string1);
      
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode0.outerHtmlTail((StringBuilder) null, (-435), document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextNode textNode0 = new TextNode("qAjro;Iw]6YK", "qAjro;Iw]6YK");
      assertEquals("qAjro;Iw]6YK", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = textNode0.text();
      assertEquals("qAjro;Iw]6YK", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string0);
      assertEquals("qAjro;Iw]6YK", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("3lZ", "3lZ");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("3lZ", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("3lZ", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "9jH";
      TextNode textNode0 = new TextNode("9jH", "9jH");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("9jH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("9jH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(1369);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("qJ}", "Qc4Uw~W~,x");
      assertEquals("Qc4Uw~W~,x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("Qc4Uw~W~,x", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TextNode textNode1 = new TextNode("Qc4Uw~W~,x", "qJ}");
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("qJ}", textNode1.baseUri());
      assertNotNull(textNode1);
      
      String string0 = textNode1.toString();
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("qJ}", textNode1.baseUri());
      assertNotNull(string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("Qc4Uw~W~,x", string0);
      
      Attributes attributes0 = textNode1.attributes();
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("qJ}", textNode1.baseUri());
      assertNotNull(attributes0);
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("m'2'3", "#text");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell("em");
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertTrue(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("em", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("em", document2.baseUri());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document2.appendChild(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("em", document2.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("em", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("em", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = (Document)document3.prependText("wZL9B|+6S\"Rx/");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("em", document2.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("em", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("em", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document4.childNodeSize());
      assertEquals("em", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("em", document4.baseUri());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      
      Document document5 = (Document)document4.removeClass("m'2'3");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("em", document2.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("em", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("em", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document4.childNodeSize());
      assertEquals("em", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("em", document4.baseUri());
      assertEquals("em", document5.location());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("em", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      
      textNode0.parentNode = (Node) document5;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document1.location());
      assertEquals("em", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("em", document2.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("em", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("em", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document4.childNodeSize());
      assertEquals("em", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("em", document4.baseUri());
      assertEquals("em", document5.location());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("em", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("em", textNode0.parentNode.baseUri());
      assertEquals(3, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      List<Node> list0 = textNode0.childNodes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = textNode0.absUrl("`&RIY&rh");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = textNode0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertEquals("\nm'2'3", string1);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("em", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("em", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertTrue(document0.equals((Object)document1));
      assertTrue(document1.equals((Object)document0));
      assertTrue(document2.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("em", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("em", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("em", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document2.appendChild(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("em", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("em", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("em", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("em", document3.location());
      assertEquals("em", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = (Document)document3.prependText("wZL9B|+6S\"Rx/");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("em", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("em", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("em", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("em", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("em", document3.location());
      assertEquals("em", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("em", document4.location());
      assertEquals(3, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("em", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      
      Node[] nodeArray0 = new Node[6];
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextNode textNode0 = new TextNode("#text", "#text");
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.splitText(0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode1.text("");
      assertTrue(textNode0.equals((Object)textNode1));
      assertTrue(textNode1.equals((Object)textNode0));
      assertTrue(textNode2.equals((Object)textNode0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      boolean boolean0 = textNode0.hasAttr("");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertFalse(boolean0);
      
      List<Node> list0 = textNode0.childNodes();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      
      Node node0 = textNode2.attr("#text", "#text");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(node0, textNode0);
      assertSame(node0, textNode1);
      assertSame(node0, textNode2);
      
      textNode2.hashCode();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("#text", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      textNode1.hashCode();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "Th2u[eJ";
      TextNode textNode0 = TextNode.createFromEncoded("Th2u[eJ", "Th2u[eJ");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text("org.jsoup.nodes.DataNode");
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertEquals("Th2u[eJ", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = TextNode.stripLeadingWhitespace("org.jsoup.nodes.DataNode");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.jsoup.nodes.DataNode", string1);
      
      boolean boolean0 = textNode0.equals((Object) null);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Th2u[eJ", textNode0.baseUri());
      assertSame(textNode0, textNode1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        textNode0.after("org.jsoup.nodes.DataNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextNode textNode0 = new TextNode("C", "qJ}");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertEquals("C", string0);
      
      String string1 = TextNode.stripLeadingWhitespace("C");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C", string1);
      
      TextNode textNode1 = TextNode.createFromEncoded(" in1f[CaiW", "C");
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode1.text(";tUS");
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("C", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      TextNode textNode3 = TextNode.createFromEncoded("publicId", "");
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertNotNull(textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      
      List<Node> list0 = textNode1.childNodesCopy();
      assertFalse(textNode1.equals((Object)textNode3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(textNode1, textNode3);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      
      textNode3.childNodes = list0;
      assertEquals("C", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(textNode3.childNodes.isEmpty());
      assertEquals(0, textNode3.childNodes.size());
      
      boolean boolean0 = textNode0.equals(textNode3);
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("qJ}", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertFalse(boolean0);
      
      TextNode textNode4 = TextNode.createFromEncoded(" in1f[CaiW", "W%H?a");
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode0));
      assertFalse(textNode4.equals((Object)textNode1));
      assertEquals(0, textNode4.childNodeSize());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("W%H?a", textNode4.baseUri());
      assertEquals(0, textNode4.siblingIndex());
      assertNotNull(textNode4);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode1);
      
      String string2 = TextNode.stripLeadingWhitespace(" in1f[CaiW");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("in1f[CaiW", string2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("j|MRLRr8T", "#text");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      assertEquals("\u0000", stringBuilder0.toString());
      assertEquals("\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, true);
      assertEquals("true\u0000", stringBuilder0.toString());
      assertEquals("true\u0000", stringBuilder1.toString());
      assertEquals("true\u0000", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.replace(2, 2, "g[.'\"}AC{B=Z3 Dq{");
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, 2);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      
      StringBuilder stringBuilder5 = stringBuilder4.append("f35^nmweYho6 Q");
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder4.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder5.toString());
      assertNotNull(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder3);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder4.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      charArray0[2] = '.';
      StringBuilder stringBuilder6 = stringBuilder1.append(charArray0, 0, 0);
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder0.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder6.toString());
      assertNotNull(stringBuilder6);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder6, stringBuilder5);
      assertSame(stringBuilder6, stringBuilder0);
      assertSame(stringBuilder6, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder4);
      assertSame(stringBuilder6, stringBuilder1);
      assertSame(stringBuilder6, stringBuilder2);
      assertArrayEquals(new char[] {'\\', ',', '.'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Node node0 = textNode0.removeAttr("#text");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      String string0 = textNode0.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string0);
      assertSame(textNode0, node0);
      assertEquals("j|MRLRr8T", string0);
      
      String string1 = textNode0.getWholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertSame(textNode0, node0);
      assertEquals("j|MRLRr8T", string1);
      
      String string2 = TextNode.normaliseWhitespace("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(15);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(15, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(15, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode0.outerHtmlTail(stringBuilder5, 65, document_OutputSettings1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(15, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder0.toString());
      assertEquals(15, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder1.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder2.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder3.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder4.toString());
      assertEquals("2trg[.'\"}AC{B=Z3 Dq{ue\u0000f35^nmweYho6 Q", stringBuilder5.toString());
      assertSame(textNode0, node0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder6);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder6);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder6);
      assertSame(stringBuilder5, stringBuilder3);
      
      String string3 = textNode0.absUrl("#text");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      assertSame(textNode0, node0);
      assertEquals("", string3);
      
      TextNode textNode1 = TextNode.createFromEncoded("j|MRLRr8T", "j|MRLRr8T");
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertEquals("j|MRLRr8T", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      
      boolean boolean1 = node0.equals(textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.equals((Object)textNode1));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j|MRLRr8T", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("58}?F*1J^$P>a`J", "text");
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.splitText(0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string0 = textNode0.toString();
      assertFalse(textNode0.equals((Object)textNode1));
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string0);
      assertNotSame(textNode0, textNode1);
      assertEquals("", string0);
      
      TextNode textNode2 = textNode1.text("?a+QUUc0hS");
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      String string1 = textNode1.absUrl("`&RIY&rh");
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertEquals("", string1);
      
      textNode2.hashCode();
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "`lmod&(S*(4lz/z");
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = textNode0.nodeName();
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string0);
      assertEquals("#text", string0);
      
      TextNode textNode1 = textNode0.text("`lmod&(S*(4lz/z");
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("`lmod&(S*(4lz/z", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode0.absUrl("`lmod&(S*(4lz/z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      assertEquals("", string1);
      
      Node node0 = textNode1.nextSibling();
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("`lmod&(S*(4lz/z", textNode1.baseUri());
      assertNull(node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode0.absUrl("`lmod&(S*(4lz/z");
      assertFalse(string2.equals((Object)string0));
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertEquals("", string2);
      
      String string3 = textNode0.attr("`lmod&(S*(4lz/z");
      assertFalse(string3.equals((Object)string0));
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertEquals("", string3);
      
      String string4 = textNode0.text();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("`lmod&(S*(4lz/z", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertSame(textNode0, textNode1);
      assertEquals("`lmod&(S*(4lz/z", string4);
      
      String string5 = TextNode.stripLeadingWhitespace("`lmod&(S*(4lz/z");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("`lmod&(S*(4lz/z", string5);
      
      // Undeclared exception!
      try { 
        textNode0.splitText((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("F$eD6A[}r]kD@0vYjZW");
      assertNotNull(string0);
      
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      
      TextNode textNode1 = textNode0.text("");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode1.nodeName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", string1);
      
      String string2 = textNode1.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string2);
      
      String string3 = textNode1.text();
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string3);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) textNode1;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode1;
      nodeArray0[3] = (Node) textNode0;
      Attributes attributes1 = textNode0.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes1);
      assertSame(textNode0, textNode1);
      assertSame(attributes1, attributes0);
      
      nodeArray0[4] = (Node) textNode1;
      String string4 = textNode0.absUrl("IE1fm]B:zwYYl6]N5z");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertSame(textNode0, textNode1);
      assertEquals("", string4);
      
      nodeArray0[5] = (Node) textNode1;
      nodeArray0[6] = (Node) textNode0;
      String string5 = textNode1.absUrl("&#x");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string5);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", string5);
      
      String string6 = textNode0.attr("Split offset must not be greater than current text length");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string6);
      assertSame(textNode0, textNode1);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        textNode1.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "1.0");
      textNode0.text("");
      StringBuilder stringBuilder0 = new StringBuilder();
      textNode0.childNodesAsArray();
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      document_OutputSettings0.clone();
      TextNode textNode1 = TextNode.createFromEncoded("", "Split offset must not be greater than current text length");
      boolean boolean0 = textNode0.equals(textNode1);
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      
      TextNode.normaliseWhitespace("lS77X9eb\"ia7pW@!eQ");
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("a", "a");
      TextNode textNode1 = textNode0.text("a");
      textNode1.reparentChild(textNode0);
      textNode1.attributes();
      textNode1.nodeName();
      TextNode.normaliseWhitespace("0g2_%q/^eb");
      textNode0.attr("/lC[/)A'r,%=aQfH|");
      textNode1.hasAttr("a");
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
}
