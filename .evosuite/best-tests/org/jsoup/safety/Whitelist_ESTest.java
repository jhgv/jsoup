/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:39:39 GMT 2018
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">KZS";
      stringArray0[1] = ">KZS";
      stringArray0[2] = ">KZS";
      Whitelist.basicWithImages();
      stringArray0[3] = ">KZS";
      Whitelist whitelist1 = Whitelist.relaxed();
      whitelist1.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist2 = whitelist0.addAttributes(">KZS", stringArray0);
      Whitelist whitelist3 = whitelist2.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      Whitelist whitelist4 = whitelist3.addAttributes(">KZS", stringArray0);
      whitelist3.addAttributes(">KZS", stringArray0);
      whitelist2.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist5 = Whitelist.relaxed();
      whitelist0.removeEnforcedAttribute(">KZS", ">KZS");
      Whitelist whitelist6 = whitelist0.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      whitelist6.addProtocols("Q!},(& n&zWlyt'yS", ">KZS", stringArray0);
      whitelist0.isSafeTag("mailto");
      whitelist6.preserveRelativeLinks(false);
      Whitelist whitelist7 = whitelist0.removeEnforcedAttribute(">KZS", "*0&[jFh'wD;#");
      whitelist7.getEnforcedAttributes(">KZS");
      Whitelist.basicWithImages();
      Whitelist.AttributeValue.valueOf(">KZS");
      Whitelist.none();
      Whitelist.AttributeValue.valueOf("1&Y{rb|Eyz'P0AL<%NI");
      whitelist4.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      whitelist0.addTags(stringArray0);
      whitelist4.getEnforcedAttributes("InTableText");
      Document document0 = Parser.parseBodyFragment("mailto", ">KZS");
      Attribute attribute0 = Attribute.createFromEncoded(".", "1&Y{rb|Eyz'P0AL<%NI");
      whitelist5.isSafeAttribute("a", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eBa'K_G!zd?";
      stringArray0[1] = "eBa'K_G!zd?";
      stringArray0[2] = "eBa'K_G!zd?";
      stringArray0[3] = "eBa'K_G!zd?";
      stringArray0[4] = "eBa'K_G!zd?";
      stringArray0[5] = "eBa'K_G!zd?";
      Whitelist whitelist1 = whitelist0.addAttributes("eBa'K_G!zd?", stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("img", stringArray0);
      Whitelist whitelist3 = whitelist2.removeTags(stringArray0);
      Whitelist whitelist4 = Whitelist.simpleText();
      whitelist4.preserveRelativeLinks(true);
      Whitelist.TagName.valueOf("eBa'K_G!zd?");
      Whitelist.Protocol.valueOf("eBa'K_G!zd?");
      whitelist3.removeEnforcedAttribute("eBa'K_G!zd?", "Ah4");
      whitelist0.removeEnforcedAttribute("img", "!+");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      whitelist0.getEnforcedAttributes("h4");
      Document document0 = Document.createShell("~HJ+,TLh=UF#r/KZ)O");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Attribute attribute0 = new Attribute("~HJ+,TLh=UF#r/KZ)O", "h4");
      whitelist0.isSafeAttribute("~HJ+,TLh=UF#r/KZ)O", document2, attribute0);
      Whitelist.relaxed();
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("h4", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist.Protocol.valueOf("s}1#U[U/-9}/:g");
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.getEnforcedAttributes("s}1#U[U/-9}/:g");
      whitelist0.isSafeTag("7T");
      Whitelist.TagName.valueOf("h6");
      Whitelist.TagName.valueOf("h6");
      whitelist0.removeEnforcedAttribute("C^W4 :*~7hDR)#[", "hdK&bopVe<F");
      Whitelist whitelist1 = Whitelist.simpleText();
      whitelist1.getEnforcedAttributes("FKVXo");
      Whitelist whitelist2 = Whitelist.simpleText();
      Whitelist.none();
      Whitelist.AttributeValue.valueOf("h6");
      Whitelist.none();
      whitelist2.getEnforcedAttributes("p/i");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("Sq0U]2", "org.jsoup.helper.W3CDom", "Sq0U]2");
      String[] stringArray0 = new String[0];
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Document document0 = Parser.parseBodyFragment("scope", "org.jsoup.helper.W3CDom");
      whitelist1.addTags(stringArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Whitelist whitelist3 = whitelist2.preserveRelativeLinks(false);
      whitelist3.isSafeTag("\"`p(O$x");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.helper.W3CDom");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.toString();
      attributes0.html();
      Attribute attribute0 = new Attribute("Sq0U]2", "org.jsoup.parser.ParseError", attributes0);
      attribute0.html();
      whitelist2.isSafeAttribute("Sq0U]2", document1, attribute0);
      Whitelist.basic();
      whitelist2.getEnforcedAttributes("|=+Su`b8.");
      Whitelist.Protocol.valueOf("org.jsoup.parser.ParseError");
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("I}4?Rb|P<?x=B;", "col", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "";
      Attributes attributes0 = new Attributes();
      String string1 = "thead";
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("thead");
      whitelist_TagName0.equals("thead");
      String string2 = null;
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "method";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "method";
      stringArray0[3] = "method";
      stringArray0[4] = "div";
      stringArray0[5] = "method";
      Whitelist whitelist1 = whitelist0.addProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "method";
      stringArray1[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray1[2] = "method";
      stringArray1[3] = "method";
      stringArray1[4] = "div";
      stringArray1[5] = "method";
      stringArray1[6] = "org.jsoup.safety.Whitelist$TagName";
      Whitelist whitelist2 = whitelist0.removeProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray1);
      Document document0 = new Document("method");
      document0.html("method");
      Attributes attributes0 = whitelist1.getEnforcedAttributes("Q!},(& n&zWlyt'yS");
      Attribute attribute0 = new Attribute("org.jsoup.safety.Whitelist$TagName", "", attributes0);
      whitelist2.isSafeAttribute("method", document0, attribute0);
      whitelist0.addTags(stringArray0);
      Whitelist whitelist3 = whitelist1.addTags(stringArray0);
      whitelist3.removeEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "y@Hw8+qq{Ifo-");
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("method");
      Whitelist.TagName.valueOf("method");
      whitelist_TagName0.equals((Object) null);
      Whitelist.none();
      Whitelist whitelist4 = Whitelist.basicWithImages();
      whitelist4.addProtocols(">u9tGU", "T3GhL6ZI\"<m[~\"", stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "method";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "method";
      stringArray0[3] = "method";
      stringArray0[4] = "div";
      stringArray0[5] = "method";
      Whitelist whitelist1 = whitelist0.addProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "method";
      stringArray1[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray1[2] = "method";
      stringArray1[3] = "method";
      stringArray1[4] = "method";
      stringArray1[5] = "method";
      stringArray1[6] = "org.jsoup.safety.Whitelist$TagName";
      Whitelist whitelist2 = whitelist0.removeProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray1);
      Document document0 = new Document("method");
      document0.html("method");
      Attributes attributes0 = whitelist1.getEnforcedAttributes("Q!},(& n&zWlyt'yS");
      Attribute attribute0 = new Attribute("org.jsoup.safety.Whitelist$TagName", "", attributes0);
      whitelist2.isSafeAttribute("method", document0, attribute0);
      whitelist0.addTags(stringArray0);
      Whitelist whitelist3 = whitelist1.addTags(stringArray0);
      whitelist3.removeEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "y@Hw8+qq{Ifo-");
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("method");
      Whitelist.TagName.valueOf("method");
      whitelist_TagName0.equals((Object) null);
      Whitelist.none();
      Whitelist whitelist4 = Whitelist.basicWithImages();
      whitelist4.addProtocols(">u9tGU", "T3GhL6ZI\"<m[~\"", stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ul";
      String string0 = "CP";
      stringArray0[1] = "CP";
      stringArray0[2] = "ul";
      stringArray0[3] = "ul";
      stringArray0[4] = "ul";
      stringArray0[5] = "ul";
      Whitelist.relaxed();
      stringArray0[6] = "ul";
      whitelist0.removeAttributes("ul", stringArray0);
      Parser parser0 = Parser.htmlParser();
      parser0.parseInput("=kj<", "(ZD=U?");
      Parser.parseBodyFragmentRelaxed("==.b{[6i{S9sx?,03", "CP");
      String string1 = "sup";
      Parser.htmlParser();
      Document document0 = parser0.parseInput("TT???^/(ClPR'gOx$", "sup");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("CP", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BMw@.,/s'5H";
      stringArray0[1] = "BMw@.,/s'5H";
      stringArray0[2] = "BMw@.,/s'5H";
      stringArray0[3] = "BMw@.,/s'5H";
      stringArray0[4] = "BMw@.,/s'5H";
      stringArray0[5] = "BMw@.,/s'5H";
      stringArray0[6] = "BMw@.,/s'5H";
      Whitelist whitelist1 = whitelist0.addAttributes("BMw@.,/s'5H", stringArray0);
      Parser parser0 = Parser.htmlParser();
      Parser.unescapeEntities("BMw@.,/s'5H", false);
      Document document0 = parser0.parseInput("Sq0U]2", "BMw@.,/s'5H");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      whitelist1.addAttributes("MD?){=<IQ7<Do2", stringArray0);
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Attribute attribute0 = new Attribute("BMw@.,/s'5H", "h3");
      whitelist1.isSafeAttribute("BMw@.,/s'5H", document1, attribute0);
      Whitelist.simpleText();
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("Sq0U]2", "BMw@.,/s'5H", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("xdNF~c/");
      Whitelist.basicWithImages();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.isSafeTag("");
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.addEnforcedAttribute("", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g @A[&U";
      Whitelist whitelist1 = whitelist0.addAttributes("g @A[&U", stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      whitelist2.removeAttributes("g @A[&U", stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.getEnforcedAttributes(">oKB mcXV[)dncTw;c");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("Sq0U]2", "org.jsoup.helper.W3CDom", "Sq0U]2");
      String[] stringArray0 = new String[0];
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Document document0 = Parser.parseBodyFragment("scope", "org.jsoup.helper.W3CDom");
      whitelist1.addTags(stringArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Whitelist whitelist3 = whitelist2.preserveRelativeLinks(false);
      whitelist3.isSafeTag("\"`p(O$x");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.helper.W3CDom");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.toString();
      attributes0.html();
      Attribute attribute0 = new Attribute("Sq0U]2", "org.jsoup.parser.ParseError", attributes0);
      attribute0.html();
      whitelist2.isSafeAttribute("Sq0U]2", document1, attribute0);
      Whitelist.basic();
      whitelist2.getEnforcedAttributes("|=+Su`b8.");
      Whitelist.Protocol.valueOf("org.jsoup.parser.ParseError");
      Whitelist.none();
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("I}4?Rb|P<?x=B;", "col", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      whitelist0.getEnforcedAttributes("h4");
      Whitelist whitelist1 = Whitelist.relaxed();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "h4";
      stringArray1[1] = "h4";
      Whitelist.simpleText();
      stringArray1[2] = "h4";
      stringArray1[3] = "h4";
      Whitelist.none();
      stringArray1[4] = "h4";
      stringArray1[5] = "h4";
      whitelist1.removeAttributes("h4", stringArray1);
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("h4", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("h4", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = "";
      whitelist0.getEnforcedAttributes("");
      String string1 = "thead";
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("thead");
      whitelist_TagName0.equals("thead");
      String string2 = null;
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("E1Uz", "AKe/9@%p^If");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "E1Uz";
      stringArray0[1] = "E1Uz";
      stringArray0[2] = "E1Uz";
      stringArray0[3] = "AKe/9@%p^If";
      stringArray0[4] = "AKe/9@%p^If";
      stringArray0[5] = "E1Uz";
      stringArray0[6] = "E1Uz";
      whitelist1.addAttributes("E1Uz", stringArray0);
      Whitelist whitelist2 = whitelist1.preserveRelativeLinks(false);
      whitelist2.addEnforcedAttribute("AKe/9@%p^If", "E1Uz", "w|");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "AKe/9@%p^If";
      whitelist2.removeAttributes("AKe/9@%p^If", stringArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.addAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3\"f4#.`_Fz&7V@Iq0";
      stringArray0[1] = "nyShhI}IdD/+";
      stringArray0[2] = "3\"f4#.`_Fz&7V@Iq0";
      stringArray0[3] = "3\"f4#.`_Fz&7V@Iq0";
      stringArray0[4] = "nyShhI}IdD/+";
      stringArray0[5] = "nyShhI}IdD/+";
      Whitelist whitelist1 = whitelist0.addProtocols("3\"f4#.`_Fz&7V@Iq0", "nyShhI}IdD/+", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "s}1#U[U/-9}/:g";
      Whitelist.Protocol.valueOf("s}1#U[U/-9}/:g");
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string1 = "p/i";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("s}1#U[U/-9}/:g", "p/i", "s}1#U[U/-9}/:g");
      whitelist1.getEnforcedAttributes("s}1#U[U/-9}/:g");
      whitelist0.isSafeTag("h4");
      String string2 = "!l'";
      Whitelist.TagName.valueOf("!l'");
      Whitelist.TagName.valueOf("!l'");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("p/i", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist.AttributeKey.valueOf("hae*&j%_LJx");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ul";
      stringArray0[1] = "\"";
      stringArray0[2] = "\"";
      Whitelist whitelist1 = whitelist0.addAttributes("\"", stringArray0);
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      whitelist2.getEnforcedAttributes("\"");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b~|C4.#z";
      stringArray0[1] = "b~|C4.#z";
      Whitelist whitelist1 = whitelist0.addAttributes("b~|C4.#z", stringArray0);
      Whitelist whitelist2 = whitelist1.preserveRelativeLinks(true);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "b~|C4.#z";
      stringArray1[1] = "b~|C4.#z";
      stringArray1[2] = "b~|C4.#z";
      stringArray1[3] = "b~|C4.#z";
      stringArray1[4] = "b~|C4.#z";
      stringArray1[5] = "b~|C4.#z";
      whitelist2.removeTags(stringArray1);
      whitelist1.addTags(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist.simpleText();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("strike");
      Whitelist whitelist0 = Whitelist.simpleText();
      Tag tag0 = Tag.valueOf("strike");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("strike");
      FormElement formElement0 = new FormElement(tag0, ".T1T,*m@k39I=%]", attributes0);
      Tag.valueOf(".T1T,*m@k39I=%]");
      Attribute attribute0 = new Attribute("org.jsoup.nodes.DataNode", ":*j4mt*");
      whitelist0.isSafeAttribute("org.jsoup.nodes.DataNode", formElement0, attribute0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strike";
      stringArray0[1] = ".T1T,*m@k39I=%]";
      stringArray0[2] = "strike";
      stringArray0[3] = "strike";
      stringArray0[4] = ".T1T,*m@k39I=%]";
      stringArray0[5] = ".T1T,*m@k39I=%]";
      stringArray0[6] = "org.jsoup.nodes.DataNode";
      stringArray0[7] = "org.jsoup.nodes.DataNode";
      stringArray0[8] = "aDo_V[b&3&mAaF~VI0A";
      whitelist0.removeAttributes("org.jsoup.nodes.DataNode", stringArray0);
      Tag.valueOf(":*j4mt*", parseSettings0);
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute("strike", formElement0, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6p|h{";
      stringArray0[1] = "6p|h{";
      stringArray0[2] = "6p|h{";
      stringArray0[3] = "6p|h{";
      stringArray0[4] = "6p|h{";
      Whitelist whitelist1 = whitelist0.addAttributes("6p|h{", stringArray0);
      whitelist1.removeAttributes("6p|h{", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.addEnforcedAttribute(".?uI 6zg6#CIrdW#", "", "6p|h{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`4F+42bj5H X4~DE";
      stringArray0[2] = "iw#~3";
      stringArray0[3] = "`4F+42bj5H X4~DE";
      stringArray0[4] = "`4F+42bj5H X4~DE";
      stringArray0[5] = "`4F+42bj5H X4~DE";
      stringArray0[6] = "`4F+42bj5H X4~DE";
      stringArray0[7] = "`4F+42bj5H X4~DE";
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("`4F+42bj5H X4~DE", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X~09t[myglL_.p!xs3";
      stringArray0[1] = "X~09t[myglL_.p!xs3";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      whitelist1.removeTags(stringArray0);
      whitelist1.removeEnforcedAttribute("X~09t[myglL_.p!xs3", "3Q");
      Whitelist.basic();
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("X~09t[myglL_.p!xs3", (String) null, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Whitelist.relaxed();
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("f,^O;l:Pi9");
      Whitelist.AttributeValue.valueOf("strike");
      whitelist_AttributeValue0.equals("f,^O;l:Pi9");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Whitelist.basicWithImages();
      Whitelist.basicWithImages();
      String string0 = null;
      String string1 = "]~1Qlth,";
      String[] stringArray0 = new String[5];
      String string2 = "n+Fo=Jl:q7z,";
      Whitelist whitelist0 = Whitelist.simpleText();
      // Undeclared exception!
      try { 
        whitelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        whitelist0.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("strike", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        whitelist0.removeEnforcedAttribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("Children collection to be inserted must not be null.");
      whitelist_TagName0.equals(whitelist0);
      Whitelist.none();
      whitelist_TagName0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf(".n%");
      whitelist_Protocol0.equals(".n%");
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".n%";
      stringArray0[1] = ".n%";
      stringArray0[2] = ".n%";
      stringArray0[3] = ".n%";
      stringArray0[4] = ".n%";
      stringArray0[5] = ".n%";
      stringArray0[6] = ".n%";
      whitelist0.addProtocols(".n%", ".n%", stringArray0);
      Whitelist whitelist1 = whitelist0.addAttributes(".n%", stringArray0);
      whitelist1.addAttributes(".n%", stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">KZS";
      stringArray0[1] = ">KZS";
      stringArray0[2] = ">KZS";
      Whitelist.basicWithImages();
      stringArray0[3] = ">KZS";
      Whitelist whitelist2 = Whitelist.relaxed();
      whitelist2.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist3 = whitelist1.addAttributes(">KZS", stringArray0);
      Whitelist whitelist4 = whitelist3.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      Whitelist whitelist5 = whitelist4.addAttributes(">KZS", stringArray0);
      whitelist4.addAttributes(">KZS", stringArray0);
      whitelist3.removeAttributes(">KZS", stringArray0);
      Whitelist.relaxed();
      whitelist1.removeEnforcedAttribute("pre", "pre");
      Whitelist whitelist6 = whitelist0.addEnforcedAttribute("pre", "pre", "pre");
      whitelist6.addProtocols("Q!},(& n&zWlyt'yS", ">KZS", stringArray0);
      whitelist0.isSafeTag("mailto");
      whitelist6.preserveRelativeLinks(false);
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf(">KZS");
      whitelist_TagName0.toString();
      Whitelist whitelist7 = whitelist0.removeEnforcedAttribute(">KZS", "*0&[jFh'wD;#");
      whitelist7.getEnforcedAttributes(">KZS");
      Whitelist.basicWithImages();
      Whitelist.AttributeValue.valueOf(">KZS");
      Whitelist.none();
      Whitelist.AttributeValue.valueOf("1&Y{rb|Eyz'P0AL<%NI");
      whitelist5.addEnforcedAttribute(">KZS", ">KZS", "pre");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = ")::j?_)\"8K{";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute(")::j?_)\"8K{", ">@qGJq9![;9Ij10Ul.", ">@qGJq9![;9Ij10Ul.");
      whitelist1.removeEnforcedAttribute(")::j?_)\"8K{", "tfoot");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">@qGJq9![;9Ij10Ul.";
      stringArray0[1] = "tfoot";
      stringArray0[2] = ")::j?_)\"8K{";
      stringArray0[3] = "tfoot";
      stringArray0[4] = ">@qGJq9![;9Ij10Ul.";
      stringArray0[5] = ">@qGJq9![;9Ij10Ul.";
      stringArray0[6] = "tfoot";
      stringArray0[7] = ")::j?_)\"8K{";
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("tfoot", ">@qGJq9![;9Ij10Ul.", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.isSafeTag("table");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g @A[&U";
      whitelist0.addAttributes("g @A[&U", stringArray0);
      whitelist0.removeAttributes("g @A[&U", stringArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GdH;j0u8k2[j;pdLMOh";
      Whitelist whitelist1 = whitelist0.addProtocols("GdH;j0u8k2[j;pdLMOh", "a", stringArray0);
      whitelist1.removeAttributes("?+kF;m", stringArray0);
      whitelist1.isSafeTag("a");
      Whitelist.simpleText();
      // Undeclared exception!
      try { 
        Whitelist.AttributeValue.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "z~-s8M";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z~-s8M";
      stringArray0[1] = "z~-s8M";
      stringArray0[2] = "z~-s8M";
      stringArray0[3] = "z~-s8M";
      stringArray0[4] = "G+bJ|G";
      stringArray0[5] = "z~-s8M";
      Document document0 = new Document("z~-s8M");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Attribute attribute0 = new Attribute("z~-s8M", "z~-s8M");
      Attribute attribute1 = attribute0.clone();
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute((String) null, document1, attribute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "blockquote";
      stringArray0[1] = "ul";
      stringArray0[2] = "blockquote";
      stringArray0[3] = "mbL*+R|adFL";
      stringArray0[4] = "blockquote";
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("blockquote", "blockquote", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">KZS";
      stringArray0[1] = ">KZS";
      stringArray0[2] = ">KZS";
      Whitelist.basicWithImages();
      stringArray0[3] = ">KZS";
      Whitelist whitelist2 = Whitelist.relaxed();
      whitelist2.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist3 = whitelist1.addAttributes(">KZS", stringArray0);
      Whitelist whitelist4 = whitelist3.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      Whitelist whitelist5 = whitelist4.addAttributes(">KZS", stringArray0);
      whitelist4.addAttributes(">KZS", stringArray0);
      whitelist3.removeAttributes(">KZS", stringArray0);
      Whitelist.relaxed();
      whitelist1.removeEnforcedAttribute(">KZS", ">KZS");
      Whitelist whitelist6 = whitelist0.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      whitelist6.addProtocols(">KZS", ">KZS", stringArray0);
      whitelist0.isSafeTag("mailto");
      whitelist6.preserveRelativeLinks(false);
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf(">KZS");
      whitelist_TagName0.toString();
      whitelist0.removeEnforcedAttribute(">KZS", "*0&[jFh'wD;#");
      Attributes attributes0 = new Attributes();
      Whitelist.basicWithImages();
      Whitelist.AttributeValue.valueOf(">KZS");
      Whitelist.none();
      Whitelist.AttributeValue.valueOf("1&Y{rb|Eyz'P0AL<%NI");
      whitelist5.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GdH;j0u8k2[j;pdLMOh";
      Whitelist whitelist1 = whitelist0.addProtocols("GdH;j0u8k2[j;pdLMOh", "a", stringArray0);
      whitelist1.addProtocols("GdH;j0u8k2[j;pdLMOh", "GdH;j0u8k2[j;pdLMOh", stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes("?+kF;m", stringArray0);
      whitelist1.isSafeTag("a");
      Whitelist.simpleText();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "?+kF;m";
      whitelist2.removeAttributes("dd", stringArray1);
      // Undeclared exception!
      try { 
        Whitelist.AttributeValue.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">KZS";
      stringArray0[1] = ">KZS";
      stringArray0[2] = ">KZS";
      Whitelist.basicWithImages();
      stringArray0[3] = ">KZS";
      Whitelist whitelist1 = Whitelist.relaxed();
      whitelist1.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist2 = whitelist0.addAttributes(">KZS", stringArray0);
      Whitelist whitelist3 = whitelist2.addEnforcedAttribute(">KZS", ">KZS", ">KZS");
      Whitelist whitelist4 = whitelist3.addAttributes(">KZS", stringArray0);
      whitelist3.addAttributes(">KZS", stringArray0);
      whitelist2.removeAttributes(">KZS", stringArray0);
      Whitelist whitelist5 = Whitelist.relaxed();
      whitelist0.removeEnforcedAttribute("pre", "pre");
      Whitelist whitelist6 = whitelist0.addEnforcedAttribute("pre", "pre", "pre");
      whitelist6.addProtocols("Q!},(& n&zWlyt'yS", ">KZS", stringArray0);
      whitelist0.isSafeTag("mailto");
      whitelist6.preserveRelativeLinks(false);
      Whitelist whitelist7 = whitelist0.removeEnforcedAttribute(">KZS", "*0&[jFh'wD;#");
      whitelist7.getEnforcedAttributes(">KZS");
      Whitelist.basicWithImages();
      Whitelist.AttributeValue.valueOf(">KZS");
      Whitelist.none();
      Whitelist.AttributeValue.valueOf("1&Y{rb|Eyz'P0AL<%NI");
      whitelist4.addEnforcedAttribute(">KZS", ">KZS", "pre");
      whitelist0.addTags(stringArray0);
      whitelist4.getEnforcedAttributes("InTableText");
      Document document0 = Parser.parseBodyFragment("mailto", ">KZS");
      Attribute attribute0 = Attribute.createFromEncoded(".", "1&Y{rb|Eyz'P0AL<%NI");
      whitelist5.isSafeAttribute("a", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("ol");
      whitelist_AttributeKey0.equals((Object) null);
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ol";
      stringArray0[1] = "ol";
      stringArray0[2] = "ol";
      whitelist0.addTags(stringArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String string0 = "org.jsoup.helper.W3CDom";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("Sq0U]2", "org.jsoup.helper.W3CDom", "Sq0U]2");
      String[] stringArray0 = new String[0];
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      String string1 = "scope";
      Document document0 = Parser.parseBodyFragment("scope", "org.jsoup.helper.W3CDom");
      whitelist1.addTags(stringArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Whitelist whitelist3 = whitelist2.preserveRelativeLinks(false);
      whitelist3.isSafeTag("\"`p(O$x");
      String string2 = "org.jsoup.parser.ParseError";
      CDataNode cDataNode0 = new CDataNode("org.jsoup.helper.W3CDom");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.toString();
      attributes0.html();
      Attribute attribute0 = new Attribute("Sq0U]2", "org.jsoup.parser.ParseError", attributes0);
      attribute0.setKey("^X<2%Q");
      attribute0.html();
      whitelist2.isSafeAttribute("Sq0U]2", document1, attribute0);
      Whitelist.basic();
      whitelist2.getEnforcedAttributes("|=+Su`b8.");
      Whitelist.Protocol.valueOf("org.jsoup.parser.ParseError");
      Whitelist.none();
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("I}4?Rb|P<?x=B;", "col", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "method";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "method";
      stringArray0[3] = "method";
      stringArray0[4] = "div";
      stringArray0[5] = "method";
      Whitelist whitelist1 = whitelist0.addProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "method";
      stringArray1[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray1[2] = "method";
      stringArray1[3] = "method";
      stringArray1[4] = "method";
      stringArray1[5] = "method";
      stringArray1[6] = "org.jsoup.safety.Whitelist$TagName";
      Whitelist whitelist2 = whitelist0.removeProtocols("method", "org.jsoup.safety.Whitelist$TagName", stringArray1);
      Document document0 = new Document("method");
      document0.html("method");
      Attributes attributes0 = whitelist1.getEnforcedAttributes("Q!},(& n&zWlyt'yS");
      Attribute attribute0 = new Attribute("org.jsoup.safety.Whitelist$TagName", "", attributes0);
      whitelist2.isSafeAttribute("method", document0, attribute0);
      whitelist0.addTags(stringArray0);
      whitelist1.addTags(stringArray0);
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("method");
      Whitelist.TagName.valueOf("method");
      whitelist_TagName0.equals((Object) null);
      Whitelist.none();
      Whitelist.basicWithImages();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ul";
      String string0 = "CP";
      stringArray0[1] = "CP";
      stringArray0[2] = "ul";
      stringArray0[3] = "ul";
      stringArray0[4] = "ul";
      stringArray0[5] = "ul";
      Whitelist.relaxed();
      stringArray0[6] = "ul";
      whitelist0.removeAttributes("ul", stringArray0);
      Parser parser0 = Parser.htmlParser();
      parser0.parseInput("=kj<", "(ZD=U?");
      Parser.parseBodyFragmentRelaxed("==.b{[6i{S9sx?,03", "CP");
      Parser.htmlParser();
      String string1 = "sup";
      Parser.htmlParser();
      Document document0 = parser0.parseInput("TT???^/(ClPR'gOx$", "sup");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document1.traverse(nodeVisitor0);
      document0.wholeText();
      // Undeclared exception!
      try { 
        document0.is("Q!},(& n&zWlyt'yS");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Q!},(& n&zWlyt'yS': unexpected token at '!},(& n&zWlyt'yS'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("Sq0U]2", "Sq0U]2", "Sq0U]2");
      String[] stringArray0 = new String[0];
      Whitelist whitelist2 = whitelist1.addTags(stringArray0);
      Document document0 = Parser.parseBodyFragment("scope", "Sq0U]2");
      whitelist1.addTags(stringArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Whitelist whitelist3 = whitelist2.preserveRelativeLinks(false);
      whitelist3.isSafeTag("\"`p(O$x");
      CDataNode cDataNode0 = new CDataNode("Sq0U]2");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.toString();
      document1.nextElementSibling();
      whitelist0.addTags(stringArray0);
      attributes0.html();
      Attribute attribute0 = new Attribute("Sq0U]2", "org.jsoup.parser.ParseError", attributes0);
      attribute0.html();
      whitelist2.isSafeAttribute("Sq0U]2", document1, attribute0);
      Whitelist.basic();
      whitelist2.getEnforcedAttributes("|=+Su`b8.");
      Whitelist.Protocol.valueOf("org.jsoup.parser.ParseError");
      Whitelist.none();
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("I}4?Rb|P<?x=B;", "col", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
