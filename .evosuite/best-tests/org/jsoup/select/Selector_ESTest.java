/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:58:14 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.MissingFormatArgumentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = Selector.selectFirst("rp", (Element) null);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(2175, 7, 2175, 7).when(element0).childNodeSize();
      doReturn("MTE", "", "", "MTE").when(element0).tagName();
      doReturn((Node) null, (Node) null, (Node) null, (Node) null).when(element0).childNode(anyInt());
      doReturn("", "MTE", "MTE").when(element0).outerHtml();
      doReturn("MTE").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Elements elements1 = Selector.select("MTE", element1);
      Selector.select("dYXQX~b", (Iterable<Element>) elements0);
      Elements elements2 = Selector.select("MTE", element1);
      assertTrue(elements2.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.selectFirst("[%s^", (Element) null);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element0).tagName();
      // Undeclared exception!
      try { 
        Selector.selectFirst("org.jsoup.select.CombiningEvaluator", element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.selectFirst((String) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).childNodeSize();
      doReturn((Node) null).when(node0).nextSibling();
      doReturn((Node) null).when(node0).parentNode();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(element0).childNodeSize();
      doReturn("MTE").when(element0).tagName();
      doReturn(node0).when(element0).childNode(anyInt());
      doReturn("MTE").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      // Undeclared exception!
      try { 
        Selector.select(evaluator0, element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Selector.select(evaluator0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("$VALUES", (Element) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '$VALUES': unexpected token at '$VALUES'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element0).tagName();
      // Undeclared exception!
      try { 
        Selector.select("org.jsoup.select.Selector", element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("rp", (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn((Node) null).when(element0).nextSibling();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements0 = Selector.select(evaluator0, element0);
      // Undeclared exception!
      try { 
        Selector.select("y[DbQ[$U~SyS", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'DbQ[$U~SyS'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(2186, 1).when(element0).childNodeSize();
      doReturn("MTE", "", (String) null).when(element0).tagName();
      doReturn((Node) null, (Node) null).when(element0).childNode(anyInt());
      doReturn("").when(element0).outerHtml();
      doReturn("jX,_o;kM.<(").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Selector.select("MTE", element1);
      // Undeclared exception!
      try { 
        Selector.select("dYXQX~b", (Iterable<Element>) elements0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("2s", (Iterable<Element>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(1294, 1294).when(element0).childNodeSize();
      doReturn("MTE").when(element0).tagName();
      doReturn((Node) null, (Node) null).when(element0).childNode(anyInt());
      doReturn("\"@UuAssc", "").when(element0).outerHtml();
      doReturn("\"@UuAssc").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Evaluator evaluator1 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evaluator1).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements1 = Selector.select(evaluator1, element1);
      Elements elements2 = Selector.filterOut(elements0, elements1);
      assertFalse(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(2175).when(element0).childNodeSize();
      doReturn("MTE").when(element0).tagName();
      doReturn((Node) null).when(element0).childNode(anyInt());
      doReturn("").when(element0).outerHtml();
      doReturn("MTE").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(2175, 7, 2175, 7).when(element0).childNodeSize();
      doReturn("MTE", "", "", "MTE").when(element0).tagName();
      doReturn((Node) null, (Node) null, (Node) null, (Node) null).when(element0).childNode(anyInt());
      doReturn("", "MTE", "MTE").when(element0).outerHtml();
      doReturn("MTE").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Selector.select("MTE", element1);
      Selector.select("dYXQX~b", (Iterable<Element>) elements0);
      Elements elements1 = Selector.select("MTE", (Iterable<Element>) elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn("MTE").when(element0).tagName();
      doReturn("MTE").when(element0).toString();
      Element element1 = Selector.selectFirst("MTE", element0);
      // Undeclared exception!
      try { 
        Selector.selectFirst("}Uf =M&r'3OWX87:VM", element1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}Uf =M&r'3OWX87:VM': unexpected token at '}Uf =M&r'3OWX87:VM'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
