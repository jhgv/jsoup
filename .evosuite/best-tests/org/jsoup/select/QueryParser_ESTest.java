/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:34:16 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.jsoup.select.QueryParser;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryParser_ESTest extends QueryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "defer";
      QueryParser.parse("defer");
      QueryParser.parse("defer");
      QueryParser.parse("Az");
      // Undeclared exception!
      try { 
        QueryParser.parse(":not(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("+[X6vcYM");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'X6vcYM'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QueryParser.parse("[^%s]");
      QueryParser.parse("[^%s]");
      QueryParser.parse("[^%s]");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":matchesOwn(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ":has(el)suseljt m>st not be emp\"y";
      // Undeclared exception!
      try { 
        QueryParser.parse(":has(el)suseljt m>st not be emp\"y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'emp\"y': unexpected token at '\"y'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "+gc.o2Ge*~";
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      // Undeclared exception!
      try { 
        QueryParser.parse("+gc.o2Ge*~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QueryParser.parse(":containsData(text) query must not be empty");
      QueryParser.parse(":containsData(text) query must not be empty");
      QueryParser.parse(":first-of-type");
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-child(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      String string0 = ":contains(text) query must not be empty";
      QueryParser.parse(":contains(text) query must not be empty");
      QueryParser.parse("F|8");
      QueryParser.parse(":contains(text) query must not be empty");
      QueryParser.parse("big");
      QueryParser.parse(":contains(text) query must not be empty");
      String string1 = "";
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "*|b+e";
      QueryParser.parse("*|b+e");
      QueryParser.parse("*|b+e");
      String string1 = "Ar1N!X=E";
      // Undeclared exception!
      try { 
        QueryParser.parse("Ar1N!X=E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ar1N!X=E': unexpected token at '!X=E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QueryParser.parse(":containsData(text) query must not be empty");
      QueryParser.parse(":containsData(text) query must not be empty");
      QueryParser.parse(":containsData(text) query must not be empty");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id(":firstoftype");
      // Undeclared exception!
      try { 
        QueryParser.parse("2~6,SkZ< ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'SkZ<': unexpected token at '<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("W~(JxMn)+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(JxMn)': unexpected token at '(JxMn)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QueryParser.parse("s,3");
      QueryParser.parse("s,3");
      // Undeclared exception!
      try { 
        QueryParser.parse(":lt(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":eq(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QueryParser.parse(":matches(regex) query must not be emxty");
      QueryParser.parse(":matches(regex) query must not be emxty");
      // Undeclared exception!
      try { 
        QueryParser.parse("2tBgu-R6y+u#pox.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ":last-child";
      QueryParser.parse(":last-child");
      String string1 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QueryParser.parse(":only-of-type");
      QueryParser.parse(":only-of-type");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QueryParser.parse(":root");
      String string0 = null;
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QueryParser.parse(":last-of-type");
      QueryParser.parse(":last-of-type");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ":only-child";
      QueryParser.parse(":only-child");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      String string1 = "mZdWDg";
      QueryParser.parse("mZdWDg");
      QueryParser.parse("mZdWDg");
      QueryParser.parse(":only-child");
      QueryParser.parse(":only-child");
      String string2 = "*;Am";
      // Undeclared exception!
      try { 
        QueryParser.parse("*;Am");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*;Am': unexpected token at ';Am'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ":matchText";
      String string1 = "apiQ";
      QueryParser.parse("apiQ");
      QueryParser.parse(":matchText");
      QueryParser.parse(":matchText");
      QueryParser.parse("#doctype");
      String string2 = "Could not parse nth-index '%s': unexpected format";
      // Undeclared exception!
      try { 
        QueryParser.parse("Could not parse nth-index '%s': unexpected format");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''%s':': unexpected token at ''%s':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QueryParser.parse("Should not be reachable");
      QueryParser.parse(":empty");
      QueryParser.parse("Should not be reachable");
      QueryParser.parse("em");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QueryParser.parse(":first-child");
      // Undeclared exception!
      try { 
        QueryParser.parse("-Q6PO>M7\"yT3.PATO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-Q6PO>M7\"yT3.PATO': unexpected token at '-Q6PO>M7\"yT3.PATO'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QueryParser.parse(":containsOwn(%s)");
      // Undeclared exception!
      try { 
        QueryParser.parse("#4f|~bSr,PVk&E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#4f|~bSr,PVk&E': unexpected token at '|~bSr,PVk&E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "+h[%s~=%s]";
      QueryParser.parse("+h[%s~=%s]");
      QueryParser.parse("+h[%s~=%s]");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        QueryParser.parse("|Xl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|Xl': unexpected token at '|Xl'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QueryParser.parse("*|d_fe");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QueryParser.parse("[%s#b%si]");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QueryParser.parse("[%s$=%s]");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      QueryParser.parse(":contains(text) query must not be empty");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      QueryParser.parse("3");
      QueryParser.parse("3");
      QueryParser.parse("*|*|suseljt");
      QueryParser.parse("[%s^=%s]");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QueryParser.parse("[%s$=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "[%s~=%s]";
      QueryParser.parse("[%s~=%s]");
      QueryParser.parse("[%s~=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse("}AYx7_5BZT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}AYx7_5BZT': unexpected token at '}AYx7_5BZT'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QueryParser.parse(":matches(regex) query must not be empty");
      QueryParser.parse(":matches(regex) query must not be empty");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "0";
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("0");
      QueryParser.parse("[%s=s]");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "small";
      QueryParser.parse("small");
      String string1 = "OJ|f";
      QueryParser.parse("OJ|f");
      QueryParser.parse("OJ|f");
      QueryParser.parse("OJ|f");
      QueryParser.parse("[%s!=%s]");
      QueryParser.parse("[%s!=%s]");
      QueryParser.parse("small");
      QueryParser.parse("small");
      QueryParser.parse("OJ|f");
      // Undeclared exception!
      try { 
        QueryParser.parse("J]k__AGc&w$Q})|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'J]k__AGc&w$Q})|': unexpected token at ']k__AGc&w$Q})|'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QueryParser.parse("[%s~=%s]");
      String string0 = "ul";
      QueryParser.parse("ul");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("[B%Truc");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%TR'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QueryParser.parse("org.jsoup.nodes.PseudoTextElement");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QueryParser.parse("*|SHa24f");
      QueryParser.parse("odd");
      // Undeclared exception!
      try { 
        QueryParser.parse("V|*,XD#.RWFBp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "0";
      QueryParser.parse("0");
      QueryParser.parse("[%s#b%si]");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QueryParser.parse("*|odYd");
      QueryParser.parse("1.0");
      QueryParser.parse("1.0");
      QueryParser.parse("*|odYd");
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-of-type(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "defer";
      QueryParser.parse("defer");
      QueryParser.parse("defer");
      QueryParser.parse("defer");
      QueryParser.parse("Ag");
      // Undeclared exception!
      try { 
        QueryParser.parse("W~(JxMn)+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(JxMn)': unexpected token at '(JxMn)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":gt(%d)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-child(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      QueryParser.parse(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = ":containsOwn(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":containsOwn(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      QueryParser.parse("s,3");
      QueryParser.parse("s,3");
      QueryParser.parse("s,3");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "Gx+kBXk2R>ncJ";
      QueryParser.parse("Gx+kBXk2R>ncJ");
      QueryParser.parse("Gx+kBXk2R>ncJ");
      String string1 = "co@d{.etZ6KpF";
      // Undeclared exception!
      try { 
        QueryParser.parse("co@d{.etZ6KpF");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'co@d{.etZ6KpF': unexpected token at '@d{.etZ6KpF'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":contains(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = ":contains(text) query must not be empty";
      QueryParser.parse(":contains(text) query must not be empty");
      // Undeclared exception!
      try { 
        QueryParser.parse("MCC'3mN72rSW#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'MCC'3mN72rSW#': unexpected token at ''3mN72rSW#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QueryParser.parse("i");
      QueryParser.parse("i");
      QueryParser.parse("i");
      QueryParser.parse("i");
      QueryParser.parse("i");
      QueryParser.parse("*|*|97XmyH");
      QueryParser.parse("i");
      QueryParser.parse("*|*|97XmyH");
      QueryParser.parse(":last-of-type");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "2c[Kj%Tu:6\"]p4E'";
      // Undeclared exception!
      try { 
        QueryParser.parse("2c[Kj%Tu:6\"]p4E'");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'tu'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "8#w&s3._bh+sx;+<LP";
      // Undeclared exception!
      try { 
        QueryParser.parse("8#w&s3._bh+sx;+<LP");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '8#w&s3._bh+sx;+<LP': unexpected token at '&s3._bh+sx;+<LP'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      QueryParser.parse(":last-child");
      QueryParser.parse("applet");
      QueryParser.parse(":last-child");
      QueryParser.parse("applet");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      QueryParser.parse(":only-of-type");
      // Undeclared exception!
      try { 
        QueryParser.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ":has(el)suseljt m>st not be emp\"y";
      // Undeclared exception!
      try { 
        QueryParser.parse(":has(el)suseljt m>st not be emp\"y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'emp\"y': unexpected token at '\"y'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      QueryParser.parse("3");
      QueryParser.parse("3");
      QueryParser.parse("3");
      QueryParser.parse("3");
      QueryParser.parse("3");
      QueryParser.parse(":empty");
      QueryParser.parse("3");
      QueryParser.parse("3");
      // Undeclared exception!
      try { 
        QueryParser.parse(" />");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' />': unexpected token at '/>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = ":only-child";
      QueryParser.parse(":only-child");
      // Undeclared exception!
      try { 
        QueryParser.parse(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "defer";
      QueryParser.parse("defer");
      QueryParser.parse("defer");
      QueryParser.parse("defer");
      QueryParser.parse("Az");
      // Undeclared exception!
      try { 
        QueryParser.parse(":not(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = ":not(selector) subselect must not be empty";
      QueryParser.parse(":not(selector) subselect must not be empty");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      QueryParser.parse("~f");
      QueryParser.parse("v5VaJ");
      QueryParser.parse("v5VaJ");
      // Undeclared exception!
      try { 
        QueryParser.parse("=lyapLxXx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=lyapLxXx': unexpected token at '=lyapLxXx'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = ":matchText";
      QueryParser.parse(":matchText");
      String string1 = "caption";
      QueryParser.parse("caption");
      String string2 = " sH%}QWQZ 2s[";
      // Undeclared exception!
      try { 
        QueryParser.parse(" sH%}QWQZ 2s[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' sH%}QWQZ 2s[': unexpected token at '%}QWQZ 2s['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      QueryParser.parse(":root");
      QueryParser.parse(":root");
      QueryParser.parse(":first-of-type");
      // Undeclared exception!
      try { 
        QueryParser.parse("`)*=WeLsbvG");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '`)*=WeLsbvG': unexpected token at '`)*=WeLsbvG'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = ":eq(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":eq(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = ":nth-of-type(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-of-type(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "*|b+e";
      QueryParser.parse("*|b+e");
      String string1 = "C\\dYaLD";
      QueryParser.parse("CdYaLD");
      QueryParser.parse(string0);
      String string2 = "Ar1N!X=E";
      // Undeclared exception!
      try { 
        QueryParser.parse(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ar1N!X=E': unexpected token at '!X=E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      QueryParser.parse("[^-a-zA-Z0-9_:.]");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = ":lt(";
      // Undeclared exception!
      try { 
        QueryParser.parse(":lt(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "+h[%s~=%s]";
      QueryParser.parse("+h[%s~=%s]");
      QueryParser.parse("+h[%s~=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse("}AYx7_5BZT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}AYx7_5BZT': unexpected token at '}AYx7_5BZT'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      QueryParser.parse("[%s*=%s]");
      QueryParser.parse("[%s*=%s]");
      QueryParser.parse("[%s*=%s]");
      // Undeclared exception!
      try { 
        QueryParser.parse((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "defer";
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("defer");
      Evaluator.Tag evaluator_Tag1 = new Evaluator.Tag("defer");
      QueryParser.parse(":containsOwn(%s)");
      QueryParser.parse("defer");
      // Undeclared exception!
      try { 
        QueryParser.parse("#4f|~bSr,PVk&E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#4f|~bSr,PVk&E': unexpected token at '|~bSr,PVk&E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      QueryParser.parse(":matchesOwn(%s)");
      QueryParser.parse(":matchesOwn(%s)");
      QueryParser.parse(":matchesOwn(%s)");
      QueryParser.parse(":matchesOwn(%s)");
      QueryParser.parse(":matchesOwn(%s)");
      QueryParser.parse(":matchesOwn(%s)");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "*|b>e";
      QueryParser.parse("*|b>e");
      QueryParser.parse("*|b>e");
      String string1 = "Ar1N!X=E";
      // Undeclared exception!
      try { 
        QueryParser.parse("Ar1N!X=E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Ar1N!X=E': unexpected token at '!X=E'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
