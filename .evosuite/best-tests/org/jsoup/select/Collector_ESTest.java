/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 22:10:47 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;
import org.jsoup.select.Collector;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Collector_ESTest extends Collector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Parser.parse("org.jsoup.select.Collector", "org.jsoup.select.Collector");
      Element element0 = document0.body();
      Element element1 = Collector.findFirst(evaluator_IsOnlyOfType0, element0);
      assertEquals("org.jsoup.select.Collector", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Parser.parse("org.jsoup.selet.Collector", "org.jsoup.selet.Collector");
      Element element0 = Collector.findFirst(evaluator_IsOnlyOfType0, document0);
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("Q|,");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_ContainsOwnText0);
      Document document0 = Parser.parseBodyFragmentRelaxed("rG=tz#Xcwc&", "");
      Elements elements0 = Collector.collect(structuralEvaluator_ImmediatePreviousSibling0, document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Evaluator.IsFirstOfType> linkedList0 = new LinkedList<Evaluator.IsFirstOfType>();
      LinkedList<Evaluator> linkedList1 = new LinkedList<Evaluator>(linkedList0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList1);
      Evaluator[] evaluatorArray0 = new Evaluator[9];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[6] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[7] = (Evaluator) combiningEvaluator_Or0;
      combiningEvaluator_Or0.add(combiningEvaluator_Or0);
      Document document0 = Parser.parse("org.jsoup.select.Collector$ccumulator", "org.jsoup.select.Collector$ccumulator");
      // Undeclared exception!
      try { 
        Collector.findFirst(combiningEvaluator_Or0, document0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Accumulator", "org.jsoup.select.Collector$Accumulator");
      // Undeclared exception!
      try { 
        Collector.findFirst((Evaluator) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Collector$FirstFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        Collector.findFirst(evaluator_IsRoot0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Parser.parse("org.jsoup.select.Collector", "org.jsoup.select.Collector");
      Element element0 = document0.body();
      element0.before((Node) document0);
      // Undeclared exception!
      Collector.collect(evaluator_IsOnlyOfType0, document0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        Collector.collect((Evaluator) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Collector$Accumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = new Document("n/HEN]SOU;o'D+JJ|so");
      // Undeclared exception!
      try { 
        Collector.collect(evaluator_IsRoot0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      evaluator_AttributeWithValueEnding0.key = null;
      Document document0 = Parser.parse("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      // Undeclared exception!
      try { 
        Collector.collect(evaluator_AttributeWithValueEnding0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Parser.parse("org.jsoup.select.Collector", "org.jsoup.select.Collector");
      Elements elements0 = Collector.collect(evaluator_IsOnlyOfType0, document0);
      assertEquals(2, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$ccumulator", "org.jsoup.select.Collector$ccumulator");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("org.jsoup.select.Collector$ccumulator");
      Element element0 = Collector.findFirst(evaluator_AttributeStarting0, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      Document document0 = Parser.parseBodyFragmentRelaxed("gF2vtd5KMQ(/O[Uea", "hidden");
      Collector.findFirst(evaluator_AllElements0, document0);
  }
}
