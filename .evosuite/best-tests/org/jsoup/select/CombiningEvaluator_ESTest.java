/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 22:05:02 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Element;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.updateNumEvaluators();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element0, element0);
      combiningEvaluator_Or0.updateNumEvaluators();
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.num = (-1);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.matches(element1, element1);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.rightMostEvaluator();
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator((Evaluator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.replaceRightMostEvaluator(combiningEvaluator_And0);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.toString();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element0, element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element1, element1);
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element2, element2);
      combiningEvaluator_And0.toString();
      Element element3 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element3, element3);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.updateNumEvaluators();
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      combiningEvaluator_Or0.num = 0;
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      Evaluator evaluator0 = null;
      combiningEvaluator_Or0.add((Evaluator) null);
      Element element0 = null;
      combiningEvaluator_Or1.toString();
      combiningEvaluator_Or0.add((Evaluator) null);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$Or", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      combiningEvaluator_Or0.add(evaluatorArray0[0]);
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      combiningEvaluator_Or0.updateNumEvaluators();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And0.num = (-2919);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element0, element1);
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.toString();
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.replaceRightMostEvaluator(evaluatorArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.rightMostEvaluator();
      Evaluator[] evaluatorArray0 = new Evaluator[4];
      evaluatorArray0[0] = null;
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or1;
      combiningEvaluator_Or1.num = 23;
      evaluatorArray0[2] = null;
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combiningEvaluator_Or1.replaceRightMostEvaluator((Evaluator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element0, element0);
      combiningEvaluator_Or0.num = 1;
      combiningEvaluator_Or0.num = 1;
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.rightMostEvaluator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element0, element0);
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_And0.updateNumEvaluators();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Evaluator evaluator0 = combiningEvaluator_And0.rightMostEvaluator();
      assertSame(evaluator0, combiningEvaluator_Or0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombiningEvaluator.And combiningEvaluator_And0 = null;
      try {
        combiningEvaluator_And0 = new CombiningEvaluator.And((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      combiningEvaluator_Or0.num = 0;
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      combiningEvaluator_Or1.toString();
      int int0 = 166;
      // Undeclared exception!
      try { 
        combiningEvaluator_Or1.replaceRightMostEvaluator(combiningEvaluator_Or0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.rightMostEvaluator();
      evaluatorArray0[0] = null;
      Evaluator[] evaluatorArray1 = new Evaluator[1];
      evaluatorArray1[0] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or(evaluatorArray1);
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or1;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      combiningEvaluator_Or0.rightMostEvaluator();
      evaluatorArray0[4] = null;
      combiningEvaluator_Or0.rightMostEvaluator();
      evaluatorArray0[5] = null;
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      assertNotSame(combiningEvaluator_Or0, combiningEvaluator_Or1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Evaluator[] evaluatorArray0 = new Evaluator[8];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(combiningEvaluator_Or1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.toString();
      Collection<Evaluator> collection0 = null;
      CombiningEvaluator.Or combiningEvaluator_Or1 = null;
      try {
        combiningEvaluator_Or1 = new CombiningEvaluator.Or((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.rightMostEvaluator();
      combiningEvaluator_Or0.add((Evaluator) null);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.matches(element0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$Or", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.num = 0;
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element3 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element2, element3);
      Element element4 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.matches(element1, element4);
      combiningEvaluator_Or0.matches(element0, element0);
      Element element5 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.num = (-555);
      boolean boolean0 = combiningEvaluator_Or0.matches(element5, element5);
      assertFalse(boolean0);
      
      combiningEvaluator_Or0.add((Evaluator) null);
      combiningEvaluator_Or0.add((Evaluator) null);
      combiningEvaluator_Or0.replaceRightMostEvaluator((Evaluator) null);
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.rightMostEvaluator();
      Evaluator[] evaluatorArray0 = new Evaluator[5];
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or1;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.Or combiningEvaluator_Or2 = new CombiningEvaluator.Or();
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or2;
      evaluatorArray0[3] = null;
      evaluatorArray0[4] = null;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element6 = mock(Element.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = combiningEvaluator_And0.matches(element6, element6);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.rightMostEvaluator();
      combiningEvaluator_Or0.num = (-2780);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element0, element0);
      Evaluator[] evaluatorArray0 = new Evaluator[9];
      evaluatorArray0[0] = null;
      evaluatorArray0[1] = null;
      evaluatorArray0[2] = null;
      evaluatorArray0[3] = null;
      evaluatorArray0[4] = null;
      evaluatorArray0[5] = null;
      evaluatorArray0[6] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[7] = null;
      evaluatorArray0[8] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[8];
      combiningEvaluator_Or0.updateNumEvaluators();
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or1;
      evaluatorArray0[6] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[7] = (Evaluator) combiningEvaluator_Or0;
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or1.matches(element0, element0);
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(combiningEvaluator_And0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element0, element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element1, element1);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.num = 0;
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.toString();
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[6] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element3 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element2, element3);
      combiningEvaluator_Or0.rightMostEvaluator();
      combiningEvaluator_And0.replaceRightMostEvaluator((Evaluator) null);
      String string0 = combiningEvaluator_And0.toString();
      Element element4 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element4, element4);
      String string1 = combiningEvaluator_Or0.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
