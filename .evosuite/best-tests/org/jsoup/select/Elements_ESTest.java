/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 12:00:45 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("4Q");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.eq(50);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("&b?Omm(wqUcx");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.wrap("<html>\n <head></head>\n <body></body>\n</html>");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("UDyJfsa\"k8>/Ws-j");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.val("3qhweK");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("g)E~uV", "g)E~uV");
      Elements elements1 = elements0.unwrap();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("4Q");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("g)E~uV", "g)E~uV");
      Elements elements1 = elements0.tagName("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.select("ua 7");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("g)E~uV", "g)E~uV");
      Elements elements1 = elements0.removeAttr("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("$c");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.remove();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("4Q");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.not("data");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("l~X^P`H:yJV");
      Elements elements0 = element0.getAllElements();
      Element element1 = elements0.last();
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("form");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.html("em");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("del");
      Element element0 = document0.body();
      Elements elements0 = element0.getElementsByIndexEquals(0);
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("nowrap");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Element element0 = elements0.first();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("hr");
      Elements elements0 = document0.getElementsByClass("KRw`]{'3%w8 bMg");
      elements0.add((Element) document0);
      Elements elements1 = elements0.eq(0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.before("");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("nowrap");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.attr("org.jsoup.nodes.DocumentType", "");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("g)E~uV", "g)E~uV");
      Elements elements1 = elements0.append("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("&b?Omm(wqUcx");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.after("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("4Q");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nG");
      Element[] elementArray0 = new Element[2];
      TextNode textNode0 = TextNode.createFromEncoded("", "nG");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "(h.", attributes0);
      elementArray0[0] = (Element) formElement0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("checkbox");
      Elements elements0 = document0.getElementsByIndexLessThan(353);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element[] elementArray0 = new Element[4];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = new Document("");
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("frame");
      Elements elements0 = document0.getElementsByAttributeValueMatching("frame", (Pattern) null);
      // Undeclared exception!
      try { 
        elements0.select("xVpI M1r/Pa0K#-<WdW");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'M1r/Pa0K#-<WdW': unexpected token at '/Pa0K#-<WdW'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("image");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.not("0!?w58U_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0!?w58U_': unexpected token at '!?w58U_'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Elements elements0 = new Elements(18);
      // Undeclared exception!
      try { 
        elements0.is("org.jsoup.select.Evaluator$AllElements");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$AllElements': unexpected token at '$AllElements'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("aL'tO`gGUMG[#I");
      Elements elements0 = document0.getElementsByAttributeValueMatching("menu", "menu");
      // Undeclared exception!
      try { 
        elements0.is((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Y,V3m@Vl7;![");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Elements elements0 = element0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("l9zs");
      Elements elements0 = document0.getElementsByAttributeValue("N:q?r?J-W){AB<kv", "6=Uyad8UF^dLSy*");
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot(")TZn ,@N-S7:9d@", "tp/{t#gW'v{ UF3sH");
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("^*`Wvk ");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1));
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("U5LKY");
      Elements elements0 = document0.children();
      Element element0 = elements0.first();
      assertEquals("html", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("U5LKY");
      Element element0 = document0.head();
      Elements elements0 = element0.children();
      Element element1 = elements0.first();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Elements elements0 = new Elements(58);
      Elements elements1 = new Elements((List<Element>) elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("4Q");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("9]^;Z>6{s");
      Elements elements0 = document0.getElementsMatchingText("");
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      Element element1 = elements0.last();
      assertEquals("entities-full.properties", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("3`Z*%*<9FZ2?](");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Elements elements0 = element0.siblingElements();
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h4}");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "h4}", attributes0);
      Elements elements0 = element0.parents();
      Elements elements1 = elements0.parents();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("h6");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#e';%iU\"5Up");
      Element element0 = new Element(tag0, "ik cP\"^@|X3Hyz}Y");
      Elements elements0 = element0.siblingElements();
      Elements elements1 = elements0.remove();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      Elements elements1 = elements0.empty();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      Elements elements1 = elements0.empty();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("U5LKY");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.unwrap();
      Element element0 = elements1.first();
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("c2pi");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.wrap("figcaption");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Elements elements0 = new Elements(58);
      Elements elements1 = elements0.wrap("UTF-");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      // Undeclared exception!
      try { 
        elements0.after("L0Rx&'g7|L ^;+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("shORJ9jJ 0z%dak6|");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("2jqtBX");
      Elements elements0 = document0.getElementsByIndexEquals(1854);
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.before(",If!7!%D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals((-1341));
      Elements elements1 = elements0.before("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" { RDaN5Gj(]e");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, " { RDaN5Gj(]e", attributes0);
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.prepend("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prepend((String) null);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("image");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.html("image");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("del");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.tagName("MU,e6y");
      assertEquals("mu,e6y", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("image");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("del");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" { RDaN5Gj(]e");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, " { RDaN5Gj(]e", attributes0);
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.append("limitedQuirks");
      boolean boolean0 = elements1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#e';%iU\"5Up");
      Element element0 = new Element(tag0, "ik cP\"^@|X3Hyz}Y");
      Elements elements0 = element0.siblingElements();
      Elements elements1 = elements0.val("figure");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("&b?Omm(wqUcx");
      Elements elements0 = document0.children();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasClass("%gg1-2FdW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("image");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.toggleClass("");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h4}");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "h4}", attributes0);
      Elements elements0 = element0.parents();
      Elements elements1 = elements0.toggleClass("h4}");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.removeClass("%gg1-2FdW");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeClass("2[bUV9:wBLT<K?cz3:");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      Elements elements1 = elements0.addClass("r4oX'LOe-~3'N}q:");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.addClass("yd)[");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot(")TZn ,@N-S7:9d@", "tp/{t#gW'v{ UF3sH");
      Elements elements1 = elements0.removeAttr(")TZn ,@N-S7:9d@");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("entities-full.properties");
      TextNode textNode0 = TextNode.createFromEncoded("\n", "entities-full.properties");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "entities-full.properties", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueMatching("entities-full.properties", "\n");
      elements0.add(element0);
      // Undeclared exception!
      try { 
        elements0.attr(" ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.attr("2[bUV9:wBLT<K?cz3:", "yd)[");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("del");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasAttr("MU,e6y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("image");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Elements elements0 = new Elements(58);
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h4}");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "h4}", attributes0);
      Elements elements0 = element0.parents();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("4f*+-vM?8");
      Elements elements0 = document0.getElementsMatchingText("details");
      Elements elements1 = elements0.not("details");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.eq((-569));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Document.createShell("U5LKY");
      Elements elements0 = document0.children();
      boolean boolean0 = elements0.is("U5LKY");
      assertFalse(boolean0);
  }
}
