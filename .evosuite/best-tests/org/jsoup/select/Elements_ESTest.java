/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:39:40 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      elements0.nextAll((String) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.next("xml");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.prev();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = elementArray0[0].getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.prevAll("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("K:h|:x9M=", "K:h|:x9M=");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Elements elements0 = new Elements(2651);
      Elements elements1 = new Elements((Collection<Element>) elements0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.select("xml");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.nextAll();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      elements0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.append("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      elements0.not("figure");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.prev("S");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.next();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.clone();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.clone();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.attr(" ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      Elements elements1 = elements0.attr("xml", "xml");
      elements1.attr("xml");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.hasAttr("xml");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n&y,Hs,},?", "n&y,Hs,},?");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.attr("", "v'k&[$");
      elements1.hasAttr("");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      elements0.eachAttr("");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n&y,Hs,},?", "n&y,Hs,},?");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.attr("", "v'k&[$");
      elements1.eachAttr("");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.removeAttr("xml");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.addClass("xml");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.removeClass(" ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = elementArray0[0].getElementsContainingOwnText("");
      elements0.toggleClass("1{T^PusC xK\u0002O^");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      elements0.hasClass("U3I)Mgkq6-Zx8t&gQA");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.val();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.val();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":Rr", ":Rr");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.text();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":Rr", ":Rr");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.hasText();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = elementArray0[0].getElementsContainingOwnText("");
      elements0.hasText();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      elements0.eachText();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":Rr", ":Rr");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.html();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?0E |^@ lUK^H,", "?0E |^@ lUK^H,");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-888));
      elements0.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      elements0.tagName("code");
      elements0.select("code");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.html("S");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YJBa-", "YJBa-");
      Elements elements0 = document0.getElementsByIndexLessThan(1821);
      elements0.html("YJBa-");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("K:h|:x9M=", "K:h|:x9M=");
      Elements elements0 = document0.nextElementSiblings();
      elements0.prepend("K:h|:x9M=");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      elements0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.append("KFF");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":Rr", ":Rr");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.append("cZp&=KDU^^H$e");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.before("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      // Undeclared exception!
      try { 
        elements0.before("xml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.after("KFF");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.after("");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.wrap("S");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YJBa-", "YJBa-");
      Elements elements0 = document0.getElementsByIndexLessThan(1821);
      elements0.wrap("YJBa-");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Elements elements0 = new Elements(64);
      elements0.unwrap();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.eq(868);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      // Undeclared exception!
      try { 
        elements0.eq((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      elements0.is("basefont");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.tagName("xml");
      elements0.is("xml");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      Elements elements1 = elements0.tagName("xml");
      elements1.next("xml");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      elements0.parents();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Elements elements0 = new Elements(64);
      elements0.first();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.last();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.forms();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Elements elements0 = new Elements();
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      Tag tag0 = Tag.valueOf("!zI\"gAX}1clL");
      CDataNode cDataNode0 = new CDataNode("*?6,LP9B5");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "E<8,arR7e;U0w6BTo0;", attributes0);
      linkedHashSet0.add(formElement0);
      elements0.addAll((Collection<? extends Element>) linkedHashSet0);
      elements0.forms();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = new Elements((List<Element>) elements0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nq9)pEQl0\u0006FVm||i", "\n");
      Elements elements0 = document0.getElementsContainingText("");
      elements0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.first();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1038
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.remove();
      // Undeclared exception!
      try { 
        elements0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("C$}xV", "C$}xV");
      Elements elements0 = document0.getElementsContainingText("C$}xV");
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = elementArray0[0].getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.attr("", "v'k&[$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("i", "i");
      Elements elements0 = document0.getAllElements();
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.attr((String) null, "i");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.before("xml");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.eachText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      document0.appendTo(elementArray0[0]);
      // Undeclared exception!
      elements0.eachText();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("?0E |^@ lUK^H,", "?0E |^@ lUK^H,");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-888));
      // Undeclared exception!
      try { 
        elements0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      element0.appendChild(document0);
      // Undeclared exception!
      elements0.html();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("Xg\"", "Xg\"");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.is("xml");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document(";CCF2\u0007LR0fwfY:nc+z");
      Elements elements0 = document0.getElementsByAttributeValue(";CCF2\u0007LR0fwfY:nc+z", ";CCF2\u0007LR0fwfY:nc+z");
      // Undeclared exception!
      try { 
        elements0.is(";CCF2\u0007LR0fwfY:nc+z");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ';CCF2\u0007LR0fwfY:nc+z': unexpected token at ';CCF2\u0007LR0fwfY:nc+z'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.next("xml");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("5W;-1qX#");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        elements0.next("K$<h2q9Cgt.GN\"9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'K$<h2q9Cgt.GN\"9': unexpected token at '$<h2q9Cgt.GN\"9'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Elements elements0 = new Elements(64);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("C$}xV", "C$}xV");
      Elements elements0 = document0.getElementsContainingText("C$}xV");
      // Undeclared exception!
      try { 
        elements0.nextAll("<html>\n <head></head>\n <body>\n  C$}xV\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  C$}xV\n </body>\n</html>\n<body>\n C$}xV\n</body>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   C$}xV
         //  </body>
         // </html>
         // <html>
         //  <head></head>
         //  <body>
         //   C$}xV
         //  </body>
         // </html>
         // <body>
         //  C$}xV
         // </body>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   C$}xV
         //  </body>
         // </html>
         // <html>
         //  <head></head>
         //  <body>
         //   C$}xV
         //  </body>
         // </html>
         // <body>
         //  C$}xV
         // </body>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Elements elements0 = new Elements(11);
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        elements0.not("esi K4Cx401d[tA%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.not("\n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '
         // ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.parents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.prev("S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*YJBVa-", "*YJBVa-");
      Elements elements0 = document0.getElementsByIndexLessThan(1821);
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsByAttributeValueNot("xml", "code");
      document1.appendTo(document0);
      document0.html("5");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":Rr", ":Rr");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByClass("ghls+#xJ9n");
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.select("code");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("*lNM!~MX", "*lNM!~MX");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        elements0.select("\"g");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"g': unexpected token at '\"g'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse(";(=:Q~&gGpS%~(", "");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1182));
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.tagName("xml");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.toggleClass("gx}Q{'i;h[A[b`]f9t}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("article", "article");
      Elements elements0 = document0.getElementsByTag(" ");
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "code");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "code");
      document0.appendTo(document0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*YJBKVa-", "*YJBKVa-");
      Elements elements0 = document0.getElementsByIndexLessThan(1821);
      Elements elements1 = elements0.empty();
      // Undeclared exception!
      try { 
        elements1.wrap("JCQ~i i-6yo");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      elementArray0[0] = (Element) document0;
      Elements elements0 = elementArray0[0].getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.wrap("S?;tcC^21b_H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.addClass("S");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("&dA)Wd_?E(ZYtd", "&dA)Wd_?E(ZYtd");
      Elements elements0 = document0.getElementsByAttributeValueEnding("I7[&K", "I7[&K");
      elements0.attr("&dA)Wd_?E(ZYtd", "kUoI l)54!78;I");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsByAttributeValueNot("xml", "xml");
      document1.appendTo(document0);
      elements0.before("xml");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      Elements elements0 = document0.parents();
      elements0.eachText();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("$c()*znux,HUI", "$c()*znux,HUI");
      Elements elements0 = document0.getElementsByAttribute("$c()*znux,HUI");
      elements0.empty();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      elements0.eq(1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`9jG382ow}@_", "");
      Elements elements0 = document0.getElementsMatchingText("`9jG382ow}@_");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      elements0.filter(nodeFilter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.FormElement", "org.jsoup.nodes.FormElement");
      Elements elements0 = document0.getElementsByAttribute("org.jsoup.nodes.Node$OuterHtmlVisitor");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      elements0.filter(nodeFilter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.first();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.html();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("?0E |^@ lUK^H,", "?0E |^@ lUK^H,");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-888));
      elements0.last();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Elements elements0 = new Elements();
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      Tag tag0 = Tag.valueOf("!zI\"gAX}1clL");
      CDataNode cDataNode0 = new CDataNode("*?6,LP9B5");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "E<8,arR7e;U0w6BTo0;", attributes0);
      linkedHashSet0.add(formElement0);
      elements0.addAll((Collection<? extends Element>) linkedHashSet0);
      elements0.last();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingText("");
      elements0.next();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      elements0.nextAll();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", ":");
      Elements elements0 = document0.getElementsContainingText("");
      elements0.nextAll((String) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      Element element0 = document0.head();
      Elements elements0 = element0.parents();
      elements0.not("I");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Elements elements0 = new Elements(11);
      elements0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*YJBVa-", "*YJBVa-");
      Elements elements0 = document0.getElementsByIndexLessThan(468);
      Elements elements1 = elements0.prevAll();
      Elements elements2 = elements1.prevAll();
      elements2.parents();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("?0E |^@ lUK^H,", "?0E |^@ lUK^H,");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-888));
      elements0.prev();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xml", "xml");
      Elements elements0 = document0.getElementsByAttributeValueNot("xml", "xml");
      elements0.tagName("xml");
      elements0.prevAll("xml");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("i(;Cz;)^~vgrt");
      Elements elements0 = document0.previousElementSiblings();
      elements0.prevAll("org.jsoup.select.Elements");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      elements0.remove();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("&dA)Wd_?E(ZYtd", "&dA)Wd_?E(ZYtd");
      Elements elements0 = document0.getElementsByAttributeValueEnding("I7[&K", "I7[&K");
      elements0.removeAttr("kUoI l)54!78;I");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      Elements elements0 = document0.parents();
      elements0.removeClass("listing");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      elements0.tagName("|");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("5W;-1qX#");
      Elements elements0 = document0.nextElementSiblings();
      elements0.text();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("5W;-1qX#");
      Elements elements0 = document0.nextElementSiblings();
      elements0.toggleClass("5W;-1qX#");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("*lNM!~MX", "*lNM!~MX");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      elements0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.unwrap();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse(" ", "em");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      elements0.val("em");
      elements0.val();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      Elements elements0 = document0.getElementsByAttributeValueMatching("|", "|");
      elements0.val("figure");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.eq(0);
  }
}
