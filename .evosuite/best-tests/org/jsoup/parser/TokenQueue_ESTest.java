/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 19 11:58:43 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertEquals('Q', tokenQueue0.peek());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("Queue", string0);
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertTrue(boolean0);
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      String string1 = tokenQueue0.toString();
      assertEquals(" did not match expected sequence", string1);
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matches("");
      assertTrue(boolean1);
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      char char0 = tokenQueue0.peek();
      assertEquals(' ', char0);
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      String string2 = tokenQueue0.chompBalanced('C', ' ');
      assertEquals("", string2);
      assertEquals('d', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeAttributeKey();
      assertEquals("did", string3);
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertTrue(boolean2);
      assertEquals("not match expected sequence", tokenQueue0.toString());
      assertEquals('n', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      charArray0[0] = ' ';
      String string4 = tokenQueue0.consumeAttributeKey();
      assertEquals("not", string4);
      assertEquals(" match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      charArray0[1] = '?';
      charArray0[2] = ' ';
      String string5 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string5);
      assertEquals(" match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      charArray0[3] = ' ';
      boolean boolean3 = tokenQueue0.matchesAny(charArray0);
      assertTrue(boolean3);
      assertEquals(" match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertArrayEquals(new char[] {' ', '?', ' ', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean4 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean4);
      assertEquals(" match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      String string6 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(" match expected sequence", string6);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string6);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = TokenQueue.unescape(" match expected sequence");
      assertEquals(" match expected sequence", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      
      boolean boolean5 = tokenQueue0.matchesCS("");
      assertTrue(boolean5);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      String string8 = tokenQueue0.remainder();
      assertEquals("", string8);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      
      boolean boolean6 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean6);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertArrayEquals(new char[] {' ', '?', ' ', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      
      String string9 = tokenQueue0.consumeTagName();
      assertEquals("", string9);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TokenQueue tokenQueue0 = new TokenQueue("hV?Yc[AluN&mW**UE");
      assertEquals("hV?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('h', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertEquals("hV", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('?', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('W');
      assertFalse(boolean0);
      
      char char0 = Character.lowSurrogate(2530);
      assertEquals('\uDDE2', char0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertFalse(character0.equals((Object)char0));
      
      boolean boolean1 = tokenQueue0.matchesCS("hx.gd?{m}iU+\u0003'}?!");
      assertFalse(boolean1);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean2);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('?', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Yc[AluN&mW**UE", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('Y', tokenQueue0.peek());
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertEquals("Yc", string2);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      tokenQueue0.addFirst("hx.gd?{m}iU+\u0003'}?!");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("hx.gd?{m}iU+\u0003'}?![AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('h', tokenQueue0.peek());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "hV?Yc[AluN&mW**UE";
      stringArray0[4] = "b1>";
      stringArray0[5] = "";
      stringArray0[6] = "hV";
      String string3 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string3);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("hx.gd?{m}iU+\u0003'}?![AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('h', tokenQueue0.peek());
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = tokenQueue0.consumeToIgnoreCase("{qFR5Ne@Jqp/fO`m/A");
      assertEquals("hx.gd?{m}iU+\u0003'}?![AluN&mW**UE", string4);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean3 = tokenQueue0.matchesStartTag();
      assertFalse(boolean3);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("&k/%bc1*o';aH");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("&k/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('&', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = TokenQueue.unescape("&k/%bc1*o';aH");
      assertEquals("&k/%bc1*o';aH", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("&k/%bc1*o';aH");
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("&k/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('&', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeElementSelector();
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("&k/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('&', tokenQueue0.peek());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeTagName();
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("&k/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('&', tokenQueue0.peek());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      char char0 = tokenQueue0.consume();
      assertEquals('&', char0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('k', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("k/%bc1*o';aH", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      
      String string4 = tokenQueue0.consumeWord();
      assertEquals("k", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('/', tokenQueue0.peek());
      assertEquals("/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = tokenQueue0.consumeElementSelector();
      assertEquals("", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('/', tokenQueue0.peek());
      assertEquals("/%bc1*o';aH", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = tokenQueue0.remainder();
      assertEquals("/%bc1*o';aH", string6);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = tokenQueue0.chompBalanced('[', '[');
      assertEquals("", string7);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("&", tokenQueue0.toString());
      assertEquals('&', tokenQueue0.peek());
      assertTrue(character0.equals((Object)char0));
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("&", tokenQueue0.toString());
      assertEquals('&', tokenQueue0.peek());
      
      String string8 = tokenQueue0.consumeToIgnoreCase("&k/%bc1*o';aH");
      assertEquals("&", string8);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      
      char char1 = tokenQueue0.peek();
      assertEquals('\u0000', char1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(char1 == char0);
      
      String string9 = tokenQueue0.toString();
      assertEquals("", string9);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      
      String string10 = tokenQueue0.remainder();
      assertEquals("", string10);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      
      String string11 = tokenQueue0.toString();
      assertEquals("", string11);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string10));
      
      String string12 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string12);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string6));
      assertTrue(string12.equals((Object)string9));
      assertTrue(string12.equals((Object)string5));
      assertTrue(string12.equals((Object)string10));
      assertTrue(string12.equals((Object)string11));
      assertTrue(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string8));
      assertTrue(string12.equals((Object)string1));
      assertTrue(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertTrue(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string4));
      
      String string13 = tokenQueue0.consumeTo("");
      assertEquals("", string13);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string13);
      assertTrue(string13.equals((Object)string2));
      assertTrue(string13.equals((Object)string10));
      assertTrue(string13.equals((Object)string1));
      assertTrue(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string8));
      assertTrue(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertTrue(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      assertTrue(string13.equals((Object)string3));
      assertTrue(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertTrue(string13.equals((Object)string5));
      
      String string14 = tokenQueue0.consumeWord();
      assertEquals("", string14);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string14);
      assertTrue(string14.equals((Object)string7));
      assertTrue(string14.equals((Object)string3));
      assertTrue(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string8));
      assertTrue(string14.equals((Object)string2));
      assertTrue(string14.equals((Object)string9));
      assertTrue(string14.equals((Object)string12));
      assertTrue(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string6));
      assertTrue(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string4));
      assertTrue(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string0));
      assertTrue(string14.equals((Object)string5));
      
      boolean boolean1 = tokenQueue0.isEmpty();
      assertTrue(boolean1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("L5ZD]Gzx9xA");
      assertEquals("L5ZD]Gzx9xA", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('L', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      char char0 = 'n';
      String string0 = tokenQueue0.chompBalanced('n', 'n');
      assertEquals("", string0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('5', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("5ZD]Gzx9xA", tokenQueue0.toString());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("))");
      assertEquals(')', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("))", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.advance();
      assertEquals(')', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(")", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.chompToIgnoreCase("))");
      assertEquals(")", string0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.chompToIgnoreCase("k@M;-}S;W$rCdm:*@k");
      assertEquals("", string1);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string2 = tokenQueue0.consumeToIgnoreCase("))");
      assertEquals("", string2);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string3);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "))";
      String string4 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string4);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = tokenQueue0.consumeElementSelector();
      assertEquals("", string5);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string6);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string1);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      Character character0 = Character.valueOf('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertEquals("1", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      char char0 = tokenQueue0.peek();
      assertEquals('1', char0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertEquals("1", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean1 = tokenQueue0.matchChomp("9wK");
      assertFalse(boolean1);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertEquals("1", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean1 == boolean0);
      
      String string2 = tokenQueue0.toString();
      assertEquals("1", string2);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertEquals("1", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = tokenQueue0.chompBalanced('h', 'h');
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zIJ";
      stringArray0[1] = "1";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string4 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TokenQueue tokenQueue0 = new TokenQueue("hV?Yc[AluN&mW**UE");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("hV?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('h', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertEquals("hV", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      
      boolean boolean0 = tokenQueue0.matchesCS("hx.gd?{m}iU+\u0003'}?!");
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean1);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string2);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      tokenQueue0.addFirst("");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "hV?Yc[AluN&mW**UE";
      stringArray0[4] = "b1>";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string3 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string3);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = tokenQueue0.consumeToIgnoreCase("{qFR5Ne@Jqp/fO`m/A");
      assertEquals("?Yc[AluN&mW**UE", string4);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompToIgnoreCase("Dw&JV\"");
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = tokenQueue0.chompBalanced('-', '-');
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = TokenQueue.unescape(";1AKj^m{{");
      assertEquals(";1AKj^m{{", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string0);
      
      stringArray0[6] = "";
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string1 = tokenQueue0.remainder();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      
      boolean boolean1 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean1 == boolean0);
      
      String string2 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      
      boolean boolean2 = tokenQueue0.matchesStartTag();
      assertFalse(boolean2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = TokenQueue.unescape("Y&");
      assertEquals("Y&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = tokenQueue0.chompBalanced('g', 'D');
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      
      boolean boolean3 = tokenQueue0.matchesStartTag();
      assertFalse(boolean3);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string5 = tokenQueue0.consumeTagName();
      assertEquals("", string5);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = tokenQueue0.consumeTo("");
      assertEquals("", string6);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = tokenQueue0.remainder();
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      boolean boolean4 = tokenQueue0.isEmpty();
      assertTrue(boolean4);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean5);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertTrue(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeWord();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isIdeographic(6056);
      assertFalse(boolean0);
      
      String string1 = Character.getName(6056);
      assertEquals("KHMER INDEPENDENT VOWEL QUK", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = Character.isAlphabetic(6056);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Character.isAlphabetic(0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.consume("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean3 = tokenQueue0.matchChomp("");
      assertTrue(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertEquals("_", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeTagName();
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean4 = tokenQueue0.matchesStartTag();
      assertFalse(boolean4);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      tokenQueue0.addFirst("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string4 = TokenQueue.unescape("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      Character character1 = new Character('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      tokenQueue0.addFirst(character1);
      assertEquals('u', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("u_", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(character1.equals((Object)character0));
      
      String string5 = tokenQueue0.consumeCssIdentifier();
      assertEquals("u_", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = TokenQueue.unescape("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = tokenQueue0.consumeWord();
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean5 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Mo(y1zF $'~";
      stringArray0[1] = "_";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "ofXQeLNP.@U`";
      stringArray0[5] = "";
      stringArray0[6] = "u_";
      stringArray0[7] = "";
      String string8 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string8);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string8);
      assertEquals(8, stringArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"pjHms_-:.PT+,");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("=J='pc0&");
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("\"pjHms_-:.PT+,");
      assertEquals("\"pjHms_-:.PT+,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matchesStartTag();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean1 == boolean0);
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string2);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeElementSelector();
      assertEquals("", string3);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      tokenQueue0.addFirst("\"pjHms_-:.PT+,");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean2 = tokenQueue0.matches("Queue not long enough to consume sequence");
      assertFalse(boolean2);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = tokenQueue0.chompBalanced('C', 'B');
      assertEquals("", string4);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('p', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = tokenQueue0.consumeCssIdentifier();
      assertEquals("pjHms_-", string5);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(":.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean3 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean3);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(":.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'C';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'C';
      boolean boolean4 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(":.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertArrayEquals(new char[] {'B', 'B', 'C', 'B', 'B', 'C'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string6 = tokenQueue0.chompToIgnoreCase("^0/D=$+4xaS");
      assertEquals(":.PT+,\"pjHms_-:.PT+,", string6);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      String string7 = tokenQueue0.consumeWord();
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      
      boolean boolean5 = tokenQueue0.matchesWord();
      assertFalse(boolean5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      
      String string8 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string8);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      
      boolean boolean6 = tokenQueue0.matchChomp("[mqKA}h(>EV{Fc");
      assertFalse(boolean6);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      
      boolean boolean7 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean7);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      
      String string9 = tokenQueue0.remainder();
      assertEquals("", string9);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertEquals('Q', tokenQueue0.peek());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('2');
      assertEquals('2', (char)character0);
      assertNotNull(character0);
      
      char char0 = Character.highSurrogate(0);
      assertEquals('\uD7C0', char0);
      
      int int0 = Character.compare('2', 'b');
      assertEquals((-48), int0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("Queue", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("Queue did not match expected sequence");
      assertEquals("Queue did not match expected sequence", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("2 did not match expected sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('2', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(character0.equals((Object)char0));
      
      char char1 = tokenQueue0.consume();
      assertEquals('2', char1);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(char1 == char0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Queue did not match expected sequence";
      stringArray0[1] = "Queue did not match expected sequence";
      String string2 = tokenQueue0.chompToIgnoreCase("9b");
      assertEquals(" did not match expected sequence", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      tokenQueue0.addFirst("X~8S`Z/:|xmmX]L*uP");
      assertEquals("X~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertTrue(boolean0);
      assertEquals("X~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean1 = tokenQueue0.matchesStartTag();
      assertFalse(boolean1);
      assertEquals("X~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean2);
      assertEquals("X~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char char2 = tokenQueue0.peek();
      assertEquals('X', char2);
      assertEquals("X~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      char char3 = tokenQueue0.consume();
      assertEquals('X', char3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('~', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("~8S`Z/:|xmmX]L*uP", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      assertTrue(char3 == char2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("XX9F1Y}");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("XX9F1Y}", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("XX9F1Y}", tokenQueue0.toString());
      
      String string0 = TokenQueue.unescape("XX9F1Y}");
      assertEquals("XX9F1Y}", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("X", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("X9F1Y}", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.chompBalanced('r', 'r');
      assertEquals("", string2);
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("X9F1Y}", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeElementSelector();
      assertEquals("X9F1Y", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('}', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("}", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Character character0 = new Character('C');
      assertEquals('C', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals("C}", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('C', tokenQueue0.peek());
      
      tokenQueue0.addFirst("XX9F1Y}");
      assertEquals("XX9F1Y}C}", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("?\"~rA(");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      assertNotNull(string0);
      
      char char0 = tokenQueue0.peek();
      assertEquals('?', char0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"~rA(", tokenQueue0.toString());
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"~rA(", tokenQueue0.toString());
      
      String string1 = tokenQueue0.consumeTagName();
      assertEquals("", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"~rA(", tokenQueue0.toString());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      tokenQueue0.addFirst("?\"~rA(");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("?\"~rA(\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.matchChomp("SPo561");
      assertFalse(boolean1);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("?\"~rA(\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = null;
      char char1 = tokenQueue0.consume();
      assertEquals('?', char1);
      assertEquals("\"~rA(\"~rA(", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(char1 == char0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!Y6Vg JAWMa1[YP}d");
      assertEquals("!Y6Vg JAWMa1[YP}d", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("!Y6Vg JAWMa1[YP}d");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      
      String string0 = TokenQueue.unescape("!Y6Vg JAWMa1[YP}d");
      assertEquals("!Y6Vg JAWMa1[YP}d", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.chompBalanced('8', 'o');
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matchesCS("org.jsoup.parser.TokenQueue");
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "y_FSC[8+y6]Z=p";
      TokenQueue tokenQueue0 = new TokenQueue("y_FSC[8+y6]Z=p");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('y', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("y_FSC[8+y6]Z=p", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string1 = tokenQueue0.consumeTagName();
      assertEquals("y_FSC", string1);
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("[8+y6]Z=p", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = tokenQueue0.matchesCS("y_FSC");
      assertFalse(boolean0);
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("[8+y6]Z=p", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string2 = tokenQueue0.consumeTo("cICNh");
      assertEquals("[8+y6]Z=p", string2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "y_FSC";
      stringArray0[1] = "y_FSC";
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "s43[go^?4";
      TokenQueue tokenQueue0 = new TokenQueue("s43[go^?4");
      assertEquals("s43[go^?4", tokenQueue0.toString());
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'9j2s|_IL{>2aYJnQ{");
      assertEquals("'9j2s|_IL{>2aYJnQ{", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'9j2s|_IL{>2aYJnQ{";
      char char0 = tokenQueue0.consume();
      assertEquals('\'', char0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("9j2s|_IL{>2aYJnQ{", tokenQueue0.toString());
      assertEquals('9', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      stringArray0[1] = "'9j2s|_IL{>2aYJnQ{";
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("X-U22;7Ll|7RO:");
      assertEquals('X', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("X-U22;7Ll|7RO:", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("X-U22", string0);
      assertEquals(";7Ll|7RO:", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(';', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertEquals("", string1);
      assertEquals(";7Ll|7RO:", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(';', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeToIgnoreCase("Queue not long enough to consume sequence");
      assertEquals(";7Ll|7RO:", string2);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      
      String string3 = tokenQueue0.consumeTagName();
      assertEquals("", string3);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = TokenQueue.unescape("X-U22");
      assertEquals("X-U22", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      tokenQueue0.addFirst("Fy<MY<WzrwggY;");
      assertEquals("Fy<MY<WzrwggY;", tokenQueue0.toString());
      assertEquals('F', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(boolean0);
      assertEquals("Fy<MY<WzrwggY;", tokenQueue0.toString());
      assertEquals('F', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      tokenQueue0.advance();
      assertEquals('y', tokenQueue0.peek());
      assertEquals("y<MY<WzrwggY;", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      boolean boolean1 = tokenQueue0.matchesWord();
      assertTrue(boolean1);
      assertEquals('y', tokenQueue0.peek());
      assertEquals("y<MY<WzrwggY;", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchesWord();
      assertTrue(boolean2);
      assertEquals('y', tokenQueue0.peek());
      assertEquals("y<MY<WzrwggY;", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = tokenQueue0.consumeCssIdentifier();
      assertEquals("y", string5);
      assertTrue(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("<MY<WzrwggY;", tokenQueue0.toString());
      assertEquals('<', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean3 = tokenQueue0.matches("X-U22;7Ll|7RO:");
      assertFalse(boolean3);
      assertTrue(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("<MY<WzrwggY;", tokenQueue0.toString());
      assertEquals('<', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('Q', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("#yC}d9VR}");
      assertEquals("Queue did not match expected sequence", string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Queue did not match expected sequence";
      stringArray0[1] = "#yC}d9VR}";
      stringArray0[2] = "#yC}d9VR}";
      stringArray0[3] = "#yC}d9VR}";
      stringArray0[4] = "Queue did not match expected sequence";
      stringArray0[5] = "#yC}d9VR}";
      stringArray0[6] = "Queue did not match expected sequence";
      stringArray0[7] = "Queue did not match expected sequence";
      stringArray0[8] = "Queue did not match expected sequence";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      char char0 = '@';
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('@');
      assertEquals('@', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isAlphabetic(3712);
      assertFalse(boolean0);
      
      String string1 = tokenQueue0.consumeTagName();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = Character.isBmpCodePoint((-369));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Character.compare('@', '@');
      assertEquals(0, int0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('@', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("@", tokenQueue0.toString());
      
      String string2 = tokenQueue0.consumeWord();
      assertEquals("", string2);
      assertEquals('@', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("@", tokenQueue0.toString());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = tokenQueue0.chompBalanced('@', '@');
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertEquals('Q', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = "";
      String string1 = "o";
      String string2 = tokenQueue0.chompTo("o");
      assertEquals("Queue did n", string2);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('t', tokenQueue0.peek());
      assertEquals("t match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertTrue(boolean0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('t', tokenQueue0.peek());
      assertEquals("t match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string3 = tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
      assertEquals("t match expected sequence", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean1 == boolean0);
      
      String string4 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = tokenQueue0.consumeElementSelector();
      assertEquals("", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      
      boolean boolean2 = tokenQueue0.matchesStartTag();
      assertFalse(boolean2);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string6);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      boolean boolean3 = tokenQueue0.isEmpty();
      assertTrue(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      Character character0 = new Character('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      boolean boolean4 = Character.isAlphabetic(577);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('}', tokenQueue0.peek());
      assertEquals("}", tokenQueue0.toString());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume("o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "M,A~fk";
      TokenQueue tokenQueue0 = new TokenQueue("M,A~fk");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('M', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("M,A~fk", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("bA7KJ.`");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('b', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("bA7KJ.`", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('b', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("bA7KJ.`", tokenQueue0.toString());
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("bA7KJ", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      tokenQueue0.addFirst("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = tokenQueue0.consume();
      assertEquals('.', char0);
      assertEquals("`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('`', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string2);
      assertEquals("`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('`', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string3);
      assertEquals("`", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('`', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = tokenQueue0.remainder();
      assertEquals("`", string4);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = tokenQueue0.matchChomp("my,");
      assertFalse(boolean0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      Character character0 = Character.valueOf('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      assertFalse(character0.equals((Object)char0));
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean1 = Character.isIdeographic(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      tokenQueue0.addFirst(character0);
      assertEquals("+", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('+', tokenQueue0.peek());
      assertFalse(character0.equals((Object)char0));
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertEquals("+", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('+', tokenQueue0.peek());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("5?");
      assertEquals('5', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("5?", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("5?");
      assertEquals("", string0);
      assertEquals('5', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("5?", tokenQueue0.toString());
      assertNotNull(string0);
      
      char char0 = tokenQueue0.consume();
      assertEquals('5', char0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('?', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.advance();
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      boolean boolean1 = tokenQueue0.matches("5?");
      assertFalse(boolean1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchesStartTag();
      assertFalse(boolean2);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = tokenQueue0.toString();
      assertEquals("", string1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "|y]1zR>CTmAM";
      boolean boolean3 = tokenQueue0.matches("|y]1zR>CTmAM");
      assertFalse(boolean3);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string3);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      tokenQueue0.advance();
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      String string4 = tokenQueue0.chompTo("");
      assertEquals("", string4);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      String string0 = Character.getName(3856);
      assertEquals("TIBETAN MARK NYIS TSHEG SHAD", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = Character.isBmpCodePoint(3856);
      assertTrue(boolean0);
      
      boolean boolean1 = Character.isAlphabetic(23);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('l', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("l", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      String string2 = tokenQueue0.chompTo("");
      assertEquals("", string2);
      assertEquals('l', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("l", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("9pKleT");
      assertEquals("", string0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      boolean boolean1 = tokenQueue0.matchesWord();
      assertFalse(boolean1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[1];
      String string1 = tokenQueue0.consumeToIgnoreCase("9pKleT");
      assertEquals("", string1);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string1);
      
      stringArray0[0] = "";
      String string2 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string2);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("eXiH%Gw\"M^oKS[!GC>]");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("eXiH%Gw\"M^oKS[!GC>]", tokenQueue0.toString());
      assertEquals('e', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("eXiH", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("%Gw\"M^oKS[!GC>]", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('%', tokenQueue0.peek());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.chompBalanced('d', 'y');
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("Gw\"M^oKS[!GC>]", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('G', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.remainder();
      assertEquals("Gw\"M^oKS[!GC>]", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = tokenQueue0.consumeElementSelector();
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.matchChomp("e#=@y");
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchChomp("L(y ]4d:+");
      assertFalse(boolean2);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      
      String string4 = tokenQueue0.consumeWord();
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = tokenQueue0.remainder();
      assertEquals("", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = tokenQueue0.chompToIgnoreCase("L(y ]4d:+");
      assertEquals("", string6);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      
      String string7 = tokenQueue0.consumeWord();
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      
      String string8 = tokenQueue0.consumeTo("");
      assertEquals("", string8);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      
      String string9 = tokenQueue0.remainder();
      assertEquals("", string9);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      
      String string10 = tokenQueue0.chompBalanced('F', 'd');
      assertEquals("", string10);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      
      String string11 = TokenQueue.unescape("#EQ-wQKaAG7y7T2-4ln");
      assertEquals("#EQ-wQKaAG7y7T2-4ln", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      
      String string12 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string12);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string12);
      assertTrue(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertTrue(string12.equals((Object)string7));
      assertTrue(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertTrue(string12.equals((Object)string6));
      assertTrue(string12.equals((Object)string5));
      assertTrue(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string2));
      assertTrue(string12.equals((Object)string10));
      assertTrue(string12.equals((Object)string9));
      assertTrue(string12.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("A");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("A", tokenQueue0.toString());
      assertEquals('A', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("A", tokenQueue0.toString());
      assertEquals('A', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.matchesStartTag();
      assertFalse(boolean1);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("A", tokenQueue0.toString());
      assertEquals('A', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean2);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("A", tokenQueue0.toString());
      assertEquals('A', tokenQueue0.peek());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean3);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("A", tokenQueue0.toString());
      assertEquals('A', tokenQueue0.peek());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string0 = tokenQueue0.chompBalanced(';', ';');
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      boolean boolean4 = tokenQueue0.matches("@|1x|$5zv1");
      assertFalse(boolean4);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      boolean boolean5 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean5);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume("@|1x|$5zv1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompBalanced('', '');
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeTo("");
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.remainder();
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchChomp("");
      assertTrue(boolean2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ny!W)uL3skAC1|;2I|");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('n', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("ny!W)uL3skAC1|;2I|", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("ny", string0);
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("!W)uL3skAC1|;2I|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeTo("ny!W)uL3skAC1|;2I|");
      assertEquals("!W)uL3skAC1|;2I|", string1);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string2 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(",}`My4InRS8?ON5n38h");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(',', tokenQueue0.peek());
      assertEquals(",}`My4InRS8?ON5n38h", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(',', tokenQueue0.peek());
      assertEquals(",}`My4InRS8?ON5n38h", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.toString();
      assertEquals(",}`My4InRS8?ON5n38h", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(',', tokenQueue0.peek());
      assertEquals(",}`My4InRS8?ON5n38h", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("VYDQ.~yw;b8bW:(y5");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('V', tokenQueue0.peek());
      assertEquals("VYDQ.~yw;b8bW:(y5", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("org.jsoup.parser.TokenQueue");
      assertEquals("VYDQ.~yw;b8bW:(y5", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      
      tokenQueue0.consume("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      
      String string1 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeElementSelector();
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":d8wlssIBeA]CO4\"i~");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(":d8wlssIBeA]CO4\"i~", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.peek();
      assertEquals(':', char0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(":d8wlssIBeA]CO4\"i~", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("VYDQ.~yw;b8bW:(y5");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("VYDQ.~yw;b8bW:(y5", tokenQueue0.toString());
      assertEquals('V', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("VYDQ.~yw;b8bW:(y5", tokenQueue0.toString());
      assertEquals('V', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("VYDQ", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(".~yw;b8bW:(y5", tokenQueue0.toString());
      assertEquals('.', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("S}SHkgfo");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('S', tokenQueue0.peek());
      assertEquals("S}SHkgfo", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('S', tokenQueue0.peek());
      assertEquals("S}SHkgfo", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("HGe%xs<H$M6");
      assertEquals("HGe%xs<H$M6", tokenQueue0.toString());
      assertEquals('H', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = TokenQueue.unescape("HGe%xs<H$M6");
      assertEquals("HGe%xs<H$M6", string0);
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("HGe%xs<H$M6");
      assertEquals("HGe%xs<H$M6", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.chompToIgnoreCase("HGe%xs<H$M6");
      assertEquals("", string2);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.toString();
      assertEquals("", string3);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      stringArray0[1] = "";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeTagName();
      assertEquals("", string2);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      tokenQueue0.addFirst((String) null);
      assertEquals('n', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("null", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean1 = tokenQueue0.matchesCS("yCi1");
      assertFalse(boolean1);
      assertEquals('n', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("null", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.matchesStartTag();
      assertFalse(boolean2);
      assertEquals('n', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("null", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char char0 = tokenQueue0.consume();
      assertEquals('n', char0);
      assertEquals("ull", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('u', tokenQueue0.peek());
      
      String string3 = tokenQueue0.consumeWord();
      assertEquals("ull", string3);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = TokenQueue.unescape("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = tokenQueue0.matchesWord();
      assertFalse(boolean3);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean4);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6-Y9g(R'T");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('6', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('6', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '5';
      charArray0[2] = 'B';
      boolean boolean1 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('6', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertArrayEquals(new char[] {'F', '5', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "cye7";
      TokenQueue tokenQueue0 = new TokenQueue("cye7");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("cye7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('c', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("cye7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('c', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      
      String string1 = tokenQueue0.consumeAttributeKey();
      assertEquals("cye7", string1);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeTo("cye7");
      assertEquals("", string2);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals('Q', tokenQueue0.peek());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("Queue", string0);
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O^lJpI7RX`i.:");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("O^lJpI7RX`i.:", tokenQueue0.toString());
      assertEquals('O', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("vl*0?_");
      assertEquals("O^lJpI7RX`i.:", string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"wMgvc4g");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"wMgvc4g", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertTrue(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"wMgvc4g", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{yHmL5^,E{MIL$r");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('{', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("{yHmL5^,E{MIL$r", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesCS("{yHmL5^,E{MIL$r");
      assertTrue(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('{', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("{yHmL5^,E{MIL$r", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      Character character0 = Character.valueOf('c');
      assertEquals('c', (char)character0);
      assertNotNull(character0);
      
      boolean boolean1 = Character.isBmpCodePoint(0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Character.isBmpCodePoint(0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      tokenQueue0.addFirst(character0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("c{yHmL5^,E{MIL$r", tokenQueue0.toString());
      assertEquals('c', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertEquals('Q', tokenQueue0.peek());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(boolean0);
      assertEquals('Q', tokenQueue0.peek());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k$uE`h_jY*4VjXe");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("k$uE`h_jY*4VjXe", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('k', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("k$uE`h_jY*4VjXe");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('k', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("k$uE`h_jY*4VjXek$uE`h_jY*4VjXe", tokenQueue0.toString());
      
      String string0 = tokenQueue0.consumeWord();
      assertEquals("k", string0);
      assertEquals("$uE`h_jY*4VjXek$uE`h_jY*4VjXe", tokenQueue0.toString());
      assertEquals('$', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeTagName();
      assertEquals("", string1);
      assertEquals("$uE`h_jY*4VjXek$uE`h_jY*4VjXe", tokenQueue0.toString());
      assertEquals('$', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=lX7#]9,!V`A++");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=lX7#]9,!V`A++", tokenQueue0.toString());
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesCS("=lX7#]9,!V`A++");
      assertTrue(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=lX7#]9,!V`A++", tokenQueue0.toString());
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=lX7#]9,!V`A++", tokenQueue0.toString());
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("F:bgk+}\">BXIj]n");
      assertEquals("=lX7#]9,!V`A++", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matchesStartTag();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4y%!,I^[[^X`?[+bQ+8");
      assertEquals('4', tokenQueue0.peek());
      assertEquals("4y%!,I^[[^X`?[+bQ+8", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertEquals('4', tokenQueue0.peek());
      assertEquals("4y%!,I^[[^X`?[+bQ+8", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.remainder();
      assertEquals("4y%!,I^[[^X`?[+bQ+8", string0);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string0);
      
      boolean boolean1 = tokenQueue0.isEmpty();
      assertTrue(boolean1);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean1 == boolean0);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeWord();
      assertEquals("", string2);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = tokenQueue0.consumeTo("org.jsoup.parser.TokenQueue");
      assertEquals("", string3);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean2);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("sI>L>O");
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("sI>L>O", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTo("");
      assertEquals("", string0);
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("sI>L>O", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("sI", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(">L>O", tokenQueue0.toString());
      assertEquals('>', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("67R-D");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("67R-D", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "67R-D";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("67R-D", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = tokenQueue0.matches("67R-D");
      assertTrue(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("67R-D", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[cUbN9j");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[cUbN9j", tokenQueue0.toString());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("[cUbN9j");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[cUbN9j[cUbN9j", tokenQueue0.toString());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[cUbN9j[cUbN9j", tokenQueue0.toString());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[cUbN9j[cUbN9j", tokenQueue0.toString());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = TokenQueue.unescape(")lja>fc^p1<~");
      assertEquals(")lja>fc^p1<~", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char char0 = tokenQueue0.consume();
      assertEquals('[', char0);
      assertEquals("cUbN9j[cUbN9j", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('c', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume("        ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Array must not contain any null objects");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('A', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("Array must not contain any null objects", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      int int0 = Character.compare('n', 'n');
      assertEquals(0, int0);
      
      boolean boolean0 = Character.isBmpCodePoint(788);
      assertTrue(boolean0);
      
      tokenQueue0.addFirst(character0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("nArray must not contain any null objects", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('n', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean1);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("nArray must not contain any null objects", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('n', tokenQueue0.peek());
      assertFalse(boolean1 == boolean0);
      
      String string0 = tokenQueue0.consumeWord();
      assertEquals("nArray", string0);
      assertEquals(" must not contain any null objects", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("4eP'HW\u0000O|");
      assertEquals("4eP'HW\u0000O|", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nArray";
      String string2 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(" must not contain any null objects", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.remainder();
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = tokenQueue0.consumeTagName();
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = tokenQueue0.chompTo("Array must not contain any null objects");
      assertEquals("", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = tokenQueue0.toString();
      assertEquals("", string6);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      
      String string7 = tokenQueue0.chompTo("4eP'HW0O|");
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      
      boolean boolean2 = tokenQueue0.isEmpty();
      assertTrue(boolean2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string8 = tokenQueue0.consumeToIgnoreCase("y_FSCy_FSC[8+y6]Z=p");
      assertEquals("", string8);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "nArray";
      stringArray1[2] = " must not contain any null objects";
      stringArray1[3] = "";
      stringArray1[4] = " must not contain any null objects";
      stringArray1[5] = " must not contain any null objects";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = "4eP'HW\u0000O|";
      boolean boolean3 = tokenQueue0.matchesAny(stringArray1);
      assertTrue(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("6-Y9g(R'T");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      
      char[] charArray0 = new char[3];
      charArray0[1] = '5';
      charArray0[2] = 'B';
      boolean boolean1 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean1);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("6-Y9g(R'T", tokenQueue0.toString());
      assertEquals('6', tokenQueue0.peek());
      assertArrayEquals(new char[] {'\u0000', '5', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("6-Y9g", string0);
      assertEquals('(', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("(R'T", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<>-n%5y)\"X,lk7");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('<', tokenQueue0.peek());
      assertEquals("<>-n%5y)\"X,lk7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('<', tokenQueue0.peek());
      assertEquals("<>-n%5y)\"X,lk7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "<>-n%5y)\"X,lk7";
      stringArray0[2] = "<>-n%5y)\"X,lk7";
      stringArray0[3] = "";
      stringArray0[4] = "<>-n%5y)\"X,lk7";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('<', tokenQueue0.peek());
      assertEquals("<>-n%5y)\"X,lk7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(5, stringArray0.length);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('<', tokenQueue0.peek());
      assertEquals("<>-n%5y)\"X,lk7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.chompToIgnoreCase("w{v6*hv?z+)h");
      assertEquals("<>-n%5y)\"X,lk7", string2);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      tokenQueue0.consume("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      
      String string3 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string3);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = tokenQueue0.consumeTo("<>-n%5y)\"X,lk7");
      assertEquals("", string4);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = tokenQueue0.chompBalanced('W', '-');
      assertEquals("", string5);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = TokenQueue.unescape("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      
      String string7 = TokenQueue.unescape("/3Y%&Abe5F");
      assertEquals("/3Y%&Abe5F", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ev ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('e', tokenQueue0.peek());
      assertEquals("ev ", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[2];
      String string0 = tokenQueue0.chompTo("ev ");
      assertEquals("", string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchChomp("   ");
      assertFalse(boolean0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      Character character0 = Character.valueOf('Q');
      assertEquals('Q', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Q", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('Q', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      stringArray0[1] = "ev ";
      char char0 = tokenQueue0.consume();
      assertEquals('Q', char0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string1);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string2);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.remainder();
      assertEquals("", string3);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = tokenQueue0.consumeElementSelector();
      assertEquals("", string4);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = tokenQueue0.toString();
      assertEquals("", string5);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Queue did not match expected sequence", tokenQueue0.toString());
      assertEquals('Q', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("Queue", string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertTrue(boolean0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string1 = tokenQueue0.toString();
      assertEquals(" did not match expected sequence", string1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matches("");
      assertTrue(boolean1);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean1 == boolean0);
      
      char char0 = tokenQueue0.peek();
      assertEquals(' ', char0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertTrue(boolean2);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('d', tokenQueue0.peek());
      assertEquals("did not match expected sequence", tokenQueue0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      charArray0[0] = ' ';
      String string3 = tokenQueue0.consumeAttributeKey();
      assertEquals("did", string3);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charArray0[1] = '?';
      charArray0[2] = ' ';
      String string4 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string4);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      charArray0[3] = ' ';
      boolean boolean3 = tokenQueue0.matchesAny(charArray0);
      assertTrue(boolean3);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertArrayEquals(new char[] {' ', '?', ' ', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean4 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean4);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" not match expected sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      String string5 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(" not match expected sequence", string5);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string6);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      
      boolean boolean5 = tokenQueue0.matchesCS("");
      assertTrue(boolean5);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      
      String string7 = tokenQueue0.remainder();
      assertEquals("", string7);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      
      boolean boolean6 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean6);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertArrayEquals(new char[] {' ', '?', ' ', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      
      String string8 = tokenQueue0.consumeTagName();
      assertEquals("", string8);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"pjHms_-:.PT+,");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("=J='pc0&");
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertNotNull(string0);
      
      String string1 = TokenQueue.unescape("\"pjHms_-:.PT+,");
      assertEquals("\"pjHms_-:.PT+,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = tokenQueue0.matchesStartTag();
      assertFalse(boolean1);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string2);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = tokenQueue0.consumeElementSelector();
      assertEquals("", string3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      tokenQueue0.addFirst("\"pjHms_-:.PT+,");
      assertEquals("\"pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      
      boolean boolean2 = tokenQueue0.matches("Queue not long enough to consume sequence");
      assertFalse(boolean2);
      assertEquals("\"pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = tokenQueue0.chompBalanced('C', 'B');
      assertEquals("", string4);
      assertEquals('p', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("pjHms_-:.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = tokenQueue0.consumeCssIdentifier();
      assertEquals("pjHms_-", string5);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(":.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean3 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(":.PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'C';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'C';
      String string6 = tokenQueue0.consumeAttributeKey();
      assertEquals(":", string6);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean4 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean4);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".PT+,\"pjHms_-:.PT+,", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertArrayEquals(new char[] {'B', 'B', 'C', 'B', 'B', 'C'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string7 = tokenQueue0.chompToIgnoreCase("^0/D=$+4xaS");
      assertEquals(".PT+,\"pjHms_-:.PT+,", string7);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      tokenQueue0.advance();
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      
      String string8 = tokenQueue0.consumeWord();
      assertEquals("", string8);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      
      boolean boolean5 = tokenQueue0.matchesWord();
      assertFalse(boolean5);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      
      String string9 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string9);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string8));
      
      boolean boolean6 = tokenQueue0.matchChomp("[mqKA}h(>EV{Fc");
      assertFalse(boolean6);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      
      boolean boolean7 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean7);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      
      String string10 = tokenQueue0.remainder();
      assertEquals("", string10);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      
      String string11 = tokenQueue0.chompBalanced('.', '.');
      assertEquals("", string11);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string11);
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      TokenQueue tokenQueue0 = new TokenQueue("hV?Yc[AluN&mW**UE");
      assertEquals("hV?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('h', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertEquals("hV", string1);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isSurrogate('W');
      assertFalse(boolean0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean1 = tokenQueue0.matchesCS("hx.gd?{m}iU+\u0003'}?!");
      assertFalse(boolean1);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean2);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("W?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertEquals('W', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("?Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('Y', tokenQueue0.peek());
      assertEquals("Yc[AluN&mW**UE", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertEquals("Yc", string2);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[AluN&mW**UE", tokenQueue0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      tokenQueue0.addFirst("");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[AluN&mW**UE", tokenQueue0.toString());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[2] = "";
      stringArray0[3] = "hV?Yc[AluN&mW**UE";
      stringArray0[4] = "b1>";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string3 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string3);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[AluN&mW**UE", tokenQueue0.toString());
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = tokenQueue0.consumeToIgnoreCase("{qFR5Ne@Jqp/fO`m/A");
      assertEquals("[AluN&mW**UE", string4);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean3 = tokenQueue0.matchesStartTag();
      assertFalse(boolean3);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nP");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('n', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("nP", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("nP");
      assertEquals("", string0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      
      tokenQueue0.addFirst(character0);
      assertEquals('u', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("u", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(character0.equals((Object)char0));
      
      String string1 = tokenQueue0.chompTo("xd;y1+?)u-}){z+A");
      assertEquals("u", string1);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string2);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      
      boolean boolean1 = tokenQueue0.matchChomp("");
      assertTrue(boolean1);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean2);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = Character.getName(478);
      assertEquals("LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Character.isAlphabetic(478);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("IVBUDJ6\"y`0f(jH,E");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IVBUDJ6\"y`0f(jH,E";
      char char0 = '0';
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.chompBalanced('8', '0');
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume();
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('8', '8');
      tokenQueue0.consumeWord();
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.consume("");
      tokenQueue0.matchesCS("IVBUDJ6\"y`0f(jH,E");
      tokenQueue0.peek();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("))");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }
}
