/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:34:19 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[Xp4E`eK3):g]P");
      TokenQueue.unescape("[Xp4E`eK3):g]P");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[Xp4E`eK3):g]P";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.peek();
      tokenQueue0.addFirst((Character) '[');
      TokenQueue.unescape("[Xp4E`eK3):g]P");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":[t)gWW_\".h|fy");
      String string0 = TokenQueue.unescape(":[t)gWW_\".h|fy");
      tokenQueue0.addFirst(":[t)gWW_\".h|fy");
      Character character0 = Character.valueOf('\'');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('\'', '\'');
      TokenQueue.unescape(string0);
      String string1 = "{DW>q:sv|PKE&~2[";
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'-");
      tokenQueue0.addFirst("\u0001BMUI3LCB\"pJG719 &");
      Character character0 = Character.valueOf('3');
      tokenQueue0.consumeWhitespace();
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('3', '3');
      tokenQueue0.toString();
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeElementSelector();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '\\1BMUI3LCB'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.consumeToIgnoreCase("|");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consume("");
      tokenQueue0.chompTo("|");
      tokenQueue0.advance();
      tokenQueue0.consume("");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeCssIdentifier();
      char[] charArray0 = new char[5];
      tokenQueue0.addFirst("");
      TokenQueue.unescape("d=8j#");
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("d-0kd m@2,1k(");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.matchesStartTag();
      TokenQueue.unescape("d-0kd");
      TokenQueue.unescape("d-0kd");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeTagName();
      tokenQueue0.chompBalanced('r', 'U');
      tokenQueue0.chompBalanced('r', 'r');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "d-0kd";
      stringArray0[1] = "!q";
      stringArray0[2] = "         ";
      tokenQueue0.consumeToAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.addFirst("|");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":7");
      tokenQueue0.consumeTagName();
      tokenQueue0.consumeTo(":7");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Q'DDd\"0ZCKj";
      TokenQueue.unescape("Q'DDd\"0ZCKj");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("B'2Kk[O");
      tokenQueue0.advance();
      tokenQueue0.remainder();
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.peek();
      TokenQueue.unescape("B'2Kk[O");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'-");
      tokenQueue0.addFirst("'-");
      Character character0 = new Character('8');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('8', '8');
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dA_dWn7k0K@.W$dD@");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesStartTag();
      tokenQueue0.chompToIgnoreCase("dA_dWn7k0K@.W$dD@");
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "d-0kd m@2,1k2";
      TokenQueue tokenQueue0 = new TokenQueue("d-0kd m@2,1k2");
      tokenQueue0.chompToIgnoreCase("1(rH)*oh@eEUGIMVG");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.remainder();
      tokenQueue0.consumeToIgnoreCase("d-0kd m@2,1k2");
      tokenQueue0.consume("=M\",wK(~");
      tokenQueue0.consume(string0);
      String string1 = "d;0kd m$@2,1k(";
      TokenQueue.unescape(string1);
      String string2 = "          ";
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = " go";
      TokenQueue tokenQueue0 = new TokenQueue(" go");
      TokenQueue.unescape(" go");
      tokenQueue0.addFirst("x1BMUI3LCB\"pJG719 &");
      tokenQueue0.addFirst("`N'k:79ne3+Jhs7d_");
      Character character0 = new Character('T');
      Character.getName(2513);
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('T', 'T');
      String string1 = "     ";
      tokenQueue0.chompTo(string1);
      String string2 = "-";
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '`N'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("zgjD3ZI");
      Character character0 = new Character('<');
      tokenQueue0.chompBalanced('<', 'z');
      Character.isIdeographic('<');
      Character.highSurrogate('z');
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character.isSurrogate('V');
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompTo("");
      tokenQueue0.matchesCS("");
      tokenQueue0.addFirst("<gxQ(4vU)gvkf095}C");
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = Character.valueOf('5');
      Character.isAlphabetic('5');
      tokenQueue0.matchesWord();
      Character.getName(2);
      tokenQueue0.matchesStartTag();
      tokenQueue0.addFirst(character0);
      tokenQueue0.matchChomp("");
      TokenQueue.unescape("");
      tokenQueue0.addFirst("");
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeWord();
      tokenQueue0.isEmpty();
      tokenQueue0.addFirst("<xQ(4vU)gvkf05}C");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeToIgnoreCase("                    ");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("aS @UFOHlceCd[");
      tokenQueue0.consumeWord();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = new Character('[');
      tokenQueue0.addFirst(character0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.consume();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      tokenQueue0.chompBalanced('B', 'B');
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("N'k:79ne3+Jhs7d_");
      tokenQueue0.advance();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeToIgnoreCase("N'k:79ne3+Jhs7d_");
      tokenQueue0.matchesCS("'k:79ne3+Jhs7d_");
      TokenQueue.unescape("'k:79ne3+Jhs7d_");
      tokenQueue0.addFirst("'k:79ne3+Jhs7d_");
      tokenQueue0.chompBalanced('C', 'C');
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeAttributeKey();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":[tW)gWeW_\".h|fy");
      TokenQueue.unescape(":[tW)gWeW_\".h|fy");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("x1BMUI3LCB\"pJG719 &");
      Character character0 = Character.valueOf('7');
      Character.getName('7');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('7', '7');
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Yx6#m,!5w@_g'_Ux?J");
      tokenQueue0.consumeTo("Yx6#m,!5w@_g'_Ux?J");
      tokenQueue0.peek();
      tokenQueue0.advance();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("EZ U3");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 's';
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.chompBalanced('A', 'A');
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("zgjD3ZI");
      Character character0 = new Character('<');
      Character.isIdeographic(0);
      tokenQueue0.chompBalanced('<', 'z');
      Character.compare('<', '<');
      tokenQueue0.consumeTagName();
      Character.isIdeographic(0);
      Character.highSurrogate(12);
      tokenQueue0.addFirst(character0);
      tokenQueue0.toString();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'-");
      TokenQueue.unescape("'-");
      tokenQueue0.consumeWord();
      String[] stringArray0 = new String[9];
      stringArray0[4] = "";
      stringArray0[1] = "'-";
      stringArray0[4] = "'-";
      TokenQueue.unescape("'-");
      stringArray0[6] = "'-";
      stringArray0[7] = "'-";
      TokenQueue.unescape("'-");
      tokenQueue0.addFirst("'-");
      Character character0 = Character.valueOf('8');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('8', '8');
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|";
      stringArray0[1] = "|";
      stringArray0[2] = "|";
      stringArray0[3] = "|";
      stringArray0[4] = "|";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.matchesWord();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h\"xg]K1<'McLV");
      tokenQueue0.chompToIgnoreCase("_");
      tokenQueue0.consumeWord();
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("b;(,mv#\"l[");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b;(,mv#\"l[";
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[Xp4E`eK3):g]P");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[Xp4E`eK3):g]P";
      stringArray0[1] = "[Xp4E`eK3):g]P";
      stringArray0[2] = "[Xp4E`eK3):g]P";
      stringArray0[3] = "[Xp4E`eK3):g]P";
      stringArray0[4] = "[Xp4E`eK3):g]P";
      stringArray0[5] = "[Xp4E`eK3):g]P";
      stringArray0[6] = "[Xp4E`eK3):g]P";
      stringArray0[7] = "[Xp4E`eK3):g]P";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.consumeWord();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "[Xp4E`eK3):g]P";
      tokenQueue0.consumeCssIdentifier();
      stringArray1[1] = "";
      tokenQueue0.consumeToAny(stringArray1);
      tokenQueue0.peek();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchesAny(stringArray1);
      tokenQueue0.chompBalanced('[', ']');
      char[] charArray0 = new char[2];
      tokenQueue0.consumeAttributeKey();
      charArray0[0] = '[';
      charArray0[1] = '[';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.consumeAttributeKey();
      TokenQueue.unescape("[Xp4E`eK3):g]P");
      tokenQueue0.addFirst((Character) '[');
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompBalanced('[', '-');
      String string0 = null;
      tokenQueue0.consumeTo(string0);
      // Undeclared exception!
      try { 
        tokenQueue0.consumeCssIdentifier();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'-");
      TokenQueue.unescape("'-");
      tokenQueue0.consumeWord();
      String[] stringArray0 = new String[9];
      stringArray0[4] = "";
      stringArray0[1] = "'-";
      stringArray0[4] = "'-";
      TokenQueue.unescape("'-");
      stringArray0[6] = "'-";
      stringArray0[7] = "'-";
      TokenQueue.unescape("'-");
      tokenQueue0.addFirst("\u0001BMUI3LCB\"pJG719 &");
      Character character0 = Character.valueOf('3');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('3', '3');
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":[tW)gWeW_\".h|fy");
      TokenQueue.unescape(":[tW)gWeW_\".h|fy");
      tokenQueue0.consumeWord();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ":[tW)gWeW_\".h|fy";
      stringArray0[4] = ":[tW)gWeW_\".h|fy";
      TokenQueue.unescape(":[tW)gWeW_\".h|fy");
      stringArray0[4] = "";
      stringArray0[6] = ":[tW)gWeW_\".h|fy";
      stringArray0[7] = ":[tW)gWeW_\".h|fy";
      stringArray0[8] = ":[tW)gWeW_\".h|fy";
      TokenQueue.unescape(":[tW)gWeW_\".h|fy");
      char char0 = '8';
      tokenQueue0.addFirst("x1BMUI3LCB\"pJG719 &");
      Character character0 = Character.valueOf('8');
      Character.getName(2513);
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('8', '?');
      tokenQueue0.chompBalanced(char0, char0);
      tokenQueue0.toString();
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consume("");
      tokenQueue0.matchesWord();
      tokenQueue0.chompTo("/|.N` ");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("d;0kd m@2,1k(");
      tokenQueue0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "d;0kd m@2,1k(";
      stringArray0[1] = "Q'DDd\"0ZCKj";
      stringArray0[4] = "d;0kd m@2,1k(";
      stringArray0[5] = "d;0kd m@2,1k(";
      TokenQueue.unescape("d;0kd m@2,1k(");
      TokenQueue.unescape("Q'DDd\"0ZCKj");
      tokenQueue0.consumeToIgnoreCase("                 ");
      tokenQueue0.remainder();
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("B'2Kk[O");
      tokenQueue0.matchesCS("B'2Kk[O");
      tokenQueue0.advance();
      tokenQueue0.matchChomp("B'2Kk[O");
      TokenQueue.unescape("B'2Kk[O");
      tokenQueue0.chompBalanced('#', '#');
      tokenQueue0.consumeTo("B'2Kk[O");
      tokenQueue0.chompTo("2Kk[O");
      tokenQueue0.matchesCS("PpiNoBLVt?BmGl{Uf(");
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchChomp("B'2Kk[O");
      tokenQueue0.toString();
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("z+)\u0005.F4%@z6{o6uF");
      tokenQueue0.chompTo("z+)\u0005.F4%@z6{o6uF");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("        ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "        ";
      stringArray0[1] = "        ";
      stringArray0[2] = "        ";
      stringArray0[3] = "        ";
      tokenQueue0.consumeAttributeKey();
      stringArray0[4] = "        ";
      stringArray0[5] = "        ";
      stringArray0[6] = "        ";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompToIgnoreCase("        ");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = Character.valueOf('$');
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      Character.isAlphabetic('$');
      charArray0[3] = '$';
      Character.isSurrogate('V');
      charArray0[4] = '^';
      Character.getName(20);
      Character character1 = new Character('$');
      tokenQueue0.matchesStartTag();
      tokenQueue0.addFirst(character0);
      tokenQueue0.matchChomp("+(Fk7G9<");
      tokenQueue0.matchesWord();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consume("");
      tokenQueue0.chompTo("+(Fk7G9<");
      tokenQueue0.addFirst("");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesCS("");
      tokenQueue0.addFirst("<gxQ(4vU)gvkf095}C");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeToIgnoreCase("                    ");
      TokenQueue.unescape("$");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+(Fk7G9<";
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.addFirst("|");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeToIgnoreCase("|");
      tokenQueue0.peek();
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consume("");
      tokenQueue0.chompTo("|");
      tokenQueue0.advance();
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('|', '0');
      tokenQueue0.consume("");
      tokenQueue0.toString();
      Character character0 = new Character('n');
      tokenQueue0.addFirst(character0);
      tokenQueue0.consumeWord();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeElementSelector();
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'Z';
      charArray0[3] = '0';
      charArray0[4] = 'd';
      charArray0[5] = '|';
      TokenQueue.unescape("d=8j#");
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.consume((String) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = Character.valueOf(']');
      tokenQueue0.addFirst(character0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Did not find balanced marker at '";
      stringArray0[2] = "RG{A]7 &Y";
      stringArray0[3] = "";
      stringArray0[4] = "Did not find balanced marker at '";
      stringArray0[5] = "Did not find balanced marker at '";
      stringArray0[6] = "  ";
      stringArray0[7] = "Did not find balanced marker at '";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompToIgnoreCase("Did not find balanced marker at '");
      tokenQueue0.consumeWhitespace();
      Character character1 = Character.valueOf('l');
      tokenQueue0.addFirst(character1);
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesAny((char[]) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<");
      tokenQueue0.peek();
      tokenQueue0.peek();
      tokenQueue0.consumeWhitespace();
      TokenQueue.unescape("<");
      tokenQueue0.chompBalanced('L', 'L');
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[0];
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("/_'Ib*");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeCssIdentifier();
      TokenQueue.unescape("/_'Ib*");
      tokenQueue0.consume();
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = " go";
      TokenQueue tokenQueue0 = new TokenQueue(" go");
      TokenQueue.unescape(" go");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("x1BMUI3LCB\"pJG719 &");
      tokenQueue0.addFirst("`N'k:79ne3+Jhs7d_");
      Character character0 = new Character('T');
      Character.getName(2513);
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('T', 'T');
      String string1 = "     ";
      tokenQueue0.chompTo(string1);
      String string2 = "-";
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '`N'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = Character.valueOf('5');
      Character.isAlphabetic('5');
      Character.isSurrogate('V');
      Character.getName(2);
      tokenQueue0.matchesStartTag();
      tokenQueue0.addFirst(character0);
      tokenQueue0.matchChomp("");
      tokenQueue0.matchesWord();
      TokenQueue.unescape("");
      tokenQueue0.addFirst("");
      tokenQueue0.consumeWord();
      tokenQueue0.matchChomp("");
      tokenQueue0.consumeWord();
      tokenQueue0.isEmpty();
      tokenQueue0.addFirst("<xQ(4vU)gvkf05}C");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeToIgnoreCase("                    ");
      String[] stringArray0 = new String[2];
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("v98[%*U9+u4");
      tokenQueue0.advance();
      tokenQueue0.consumeTagName();
      tokenQueue0.matchesStartTag();
      tokenQueue0.matchesStartTag();
      tokenQueue0.consume("98");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "6v\"-![e~+f3@";
      TokenQueue tokenQueue0 = new TokenQueue("6v\"-![e~+f3@");
      tokenQueue0.matchesWhitespace();
      String string1 = "";
      tokenQueue0.chompTo("");
      tokenQueue0.matchesWord();
      tokenQueue0.peek();
      String string2 = "                 ";
      // Undeclared exception!
      try { 
        tokenQueue0.consume("                 ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("AnMO,*$v6w:fM");
      tokenQueue0.chompToIgnoreCase("'");
      String string0 = tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompTo("");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.advance();
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matches((String) null);
      tokenQueue0.matchesStartTag();
      TokenQueue.unescape(string0);
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("R^T+Is");
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '=';
      charArray0[2] = 'Q';
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "$c*;";
      TokenQueue tokenQueue0 = new TokenQueue("$c*;");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompTo("c");
      tokenQueue0.consume();
      tokenQueue0.addFirst("f-bfR7cp7I.o' &''QB");
      String string1 = tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeTo((String) null);
      tokenQueue0.consumeWhitespace();
      tokenQueue0.matchesStartTag();
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      char char0 = 'I';
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompToIgnoreCase((String) null);
      char char1 = '$';
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(char0, char1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "3so]>j";
      TokenQueue.unescape("3so]>j");
      TokenQueue tokenQueue0 = new TokenQueue("3so]>j");
      tokenQueue0.addFirst((Character) null);
      String[] stringArray0 = new String[5];
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("qHmOv\bl?\"g=");
      tokenQueue0.chompBalanced('9', '9');
      tokenQueue0.consumeToIgnoreCase("qHmOv\bl?\"g=");
      tokenQueue0.consumeWhitespace();
      TokenQueue.unescape("");
      tokenQueue0.consumeToIgnoreCase("qHmOv\bl?\"g=");
      TokenQueue.unescape("qHmOv\bl?\"g=");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeWord();
      tokenQueue0.chompTo("qHmOv\bl?\"g=");
      tokenQueue0.remainder();
      tokenQueue0.toString();
      tokenQueue0.matchesWord();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("HmOv\bl?\"g=");
      tokenQueue0.consumeTo("z:A!;xL9RI8");
      tokenQueue0.matches("S6G~33,");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "FJ=s%gmO";
      stringArray0[2] = "";
      tokenQueue0.matchesAny(stringArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "6v\"-![e~+f3@";
      TokenQueue tokenQueue0 = new TokenQueue("6v\"-![e~+f3@");
      tokenQueue0.consume();
      tokenQueue0.chompTo("");
      tokenQueue0.matchesWord();
      tokenQueue0.consumeTagName();
      tokenQueue0.peek();
      tokenQueue0.chompTo("6v\"-![e~+f3@");
      String string1 = "                 ";
      tokenQueue0.consume("                 ");
      String[] stringArray0 = new String[7];
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("X{)}P");
      tokenQueue0.consumeTo("X{)}P");
      char[] charArray0 = new char[0];
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.matchesWhitespace();
      tokenQueue0.chompToIgnoreCase("width must be > 0");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.matches("-");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'l';
      charArray0[2] = '(';
      tokenQueue0.matchesAny(charArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "aKlyAxf6X;A";
      TokenQueue tokenQueue0 = new TokenQueue("aKlyAxf6X;A");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesCS((String) null);
      String string1 = "mP51wYY";
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '5';
      charArray0[3] = ')';
      charArray0[4] = '@';
      charArray0[5] = '{';
      charArray0[6] = '_';
      tokenQueue0.matchesWhitespace();
      tokenQueue0.matchesAny(charArray0);
      tokenQueue0.chompBalanced(')', 'P');
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("   ");
      tokenQueue0.remainder();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.consumeToIgnoreCase((String) null);
      tokenQueue0.isEmpty();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("~(sZVn1FWa\u0006@G&RC");
      tokenQueue0.matches("~(sZVn1FWa\u0006@G&RC");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue.unescape("|6;Sq`t~&9~K>");
      TokenQueue tokenQueue0 = new TokenQueue("|6;Sq`t~&9~K>");
      tokenQueue0.consume();
      tokenQueue0.consumeElementSelector();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|6;Sq`t~&9~K>";
      stringArray0[1] = "6";
      stringArray0[2] = "|6;Sq`t~&9~K>";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompTo("|6;Sq`t~&9~K>");
      tokenQueue0.matchesWord();
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h&tA }A<M`P");
      tokenQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = TokenQueue.unescape((String) null);
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchChomp("                 ");
      tokenQueue0.addFirst("Did not find balanced marker at '");
      String string0 = tokenQueue0.chompTo((String) null);
      TokenQueue.unescape(string0);
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("wIxA=t3-W]1[RdYO+&");
      tokenQueue0.chompTo("wIxA=t3-W]1[RdYO+&");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consume("");
      tokenQueue0.matchesCS("|");
      tokenQueue0.matches("-UnFu;.J?.)>0HH{");
      tokenQueue0.matchChomp("");
      tokenQueue0.matches(",uzZ;&09-M");
      tokenQueue0.consumeTo("");
      tokenQueue0.consumeToIgnoreCase("");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeElementSelector();
      tokenQueue0.matchesWhitespace();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("&CdE=n|jzc}");
      tokenQueue0.remainder();
      tokenQueue0.consume();
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "|";
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.addFirst("|");
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeToIgnoreCase("|");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = null;
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeTagName();
      tokenQueue0.addFirst("");
      String string0 = null;
      tokenQueue0.matchChomp((String) null);
      tokenQueue0.chompTo(string0);
      char[] charArray0 = new char[5];
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      tokenQueue0.consumeTagName();
      tokenQueue0.consume();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.consumeWhitespace();
      Character character0 = new Character(' ');
      Character.lowSurrogate((-1));
      tokenQueue0.addFirst(character0);
      tokenQueue0.matchesWord();
      tokenQueue0.chompTo("                ");
      tokenQueue0.consume();
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{MN");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.isEmpty();
      tokenQueue0.consume("{MN");
      tokenQueue0.matchesCS("6.\"MskYh[(");
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|+U>~_wz&Nim=]kH7@>");
      tokenQueue0.consumeElementSelector();
      String string0 = "J";
      tokenQueue0.consumeToIgnoreCase("J");
      tokenQueue0.chompTo("|");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.chompToIgnoreCase("");
      String string1 = ".0]o@[3gLo,";
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      tokenQueue0.advance();
      tokenQueue0.matchesWhitespace();
      tokenQueue0.matchesStartTag();
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":[t)gWW_\".h|fy");
      String string0 = TokenQueue.unescape(":[t)gWW_\".h|fy");
      tokenQueue0.consumeWord();
      tokenQueue0.addFirst("qQKZzWDDVk*fgT.u");
      Character character0 = Character.valueOf('!');
      Character.getName('!');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('!', '!');
      TokenQueue.unescape(string0);
      String string1 = "{DW>q:sv|PKE&~2[";
      tokenQueue0.consume(string1);
  }
}
