/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 22:01:51 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.TreeBuilder;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("");
      parser0.parseInput((Reader) stringReader0, "");
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      pipedReader0.markSupported();
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tbody", "QkO");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Element element0 = document0.createElement("tbody");
      Parser.parseFragment("C", (Element) document0, "tbody");
      parser1.parseFragmentInput("QkO", document0, "DMie:KiD%dOOwxu");
      Document document1 = Parser.parseBodyFragment("e]&TB+jc5`:n^Ojx`~", "tbody");
      parser0.getTreeBuilder();
      ParseErrorList parseErrorList0 = parser1.getErrors();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader(677);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 100;
      intArray0[2] = 100;
      intArray0[3] = 0;
      Parser.xmlParser();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      parser0.settings((ParseSettings) null);
      Parser.parseFragment("", (Element) document1, "C", parseErrorList0);
      parser1.parseFragmentInput("E?te*", element0, "");
      Parser.parseXmlFragment("tbody", "C");
      parser0.settings();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser.parse("fQ,%2l0l;(GYj7", "fQ,%2l0l;(GYj7");
      Document document0 = new Document("fQ,%2l0l;(GYj7");
      parser0.parseFragmentInput("fQ,%2l0l;(GYj7", document0, "1dsr7*tn\"/^oAo]");
      String string0 = "";
      ParseErrorList parseErrorList0 = parser0.getErrors();
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document0, "", parseErrorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.isTrackErrors();
      Parser parser1 = parser0.setTrackErrors((-1993));
      String string0 = "";
      Parser.parseBodyFragment("", "");
      String string1 = "A9l_]|%lan.*\\=HW]s";
      StringReader stringReader0 = new StringReader("A9l_]|%lan.*=HW]s");
      Parser parser2 = parser1.setTrackErrors(43);
      String string2 = "org.jsoup.parser.ParseError";
      Parser.parseXmlFragment("org.jsoup.parser.ParseError", ">");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser2.settings(parseSettings0);
      stringReader0.close();
      Parser.unescapeEntities("", false);
      parser1.isTrackErrors();
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) stringReader0, "A9l_]|%lan.*=HW]s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1276);
      Parser.parseBodyFragmentRelaxed("open", "open");
      Document document0 = Parser.parse("RNjmD^vx(_6s4DD", "org.jsoup.parser.Parser");
      document0.getElementsByAttributeValue("RNjmD^vx(_6s4DD", "org.jsoup.parser.Parser");
      Document document1 = document0.clone();
      parser1.parseFragmentInput("org.jsoup.parser.Parser", document1, "org.jsoup.parser.Parser");
      String string0 = "";
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1276);
      parseErrorList0.clear();
      Parser.parseFragment("", (Element) document0, "RNjmD^vx(_6s4DD", parseErrorList0);
      Parser parser2 = parser1.setTrackErrors(1276);
      Parser.htmlParser();
      Parser.parseBodyFragmentRelaxed("", "nLM,jB<j");
      parser2.parseInput("org.jsoup.parser.Parser", "org.jsoup.parser.Parser");
      Parser.parseBodyFragment("org.jsoup.parser.Parser", "basefont");
      Parser.htmlParser();
      parser0.setTrackErrors(1276);
      parser0.parseInput("org.jsoup.parser.Parser", "basefont");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        parser0.parseFragmentInput("", document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.settings(parseSettings0);
      String string0 = "W";
      Parser.parseXmlFragment("W", "W");
      Parser.parse("W", "");
      parser1.setTrackErrors(0);
      Document document0 = Parser.parseBodyFragmentRelaxed("W", "xwoV3 ");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings1 = htmlTreeBuilder0.defaultSettings();
      Parser.xmlParser();
      parser1.settings(parseSettings1);
      parser2.getErrors();
      Parser.parseBodyFragment("W", "W");
      parser1.isTrackErrors();
      // Undeclared exception!
      try { 
        Parser.parseFragment("*N(uy", (Element) document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.setTrackErrors(100);
      Parser parser3 = parser2.setTreeBuilder(htmlTreeBuilder0);
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      Parser parser4 = parser3.settings(parseSettings1);
      CDataNode cDataNode0 = new CDataNode("z`r],O5usqb nIeo");
      Attributes attributes0 = cDataNode0.attributes();
      parseSettings0.normalizeAttributes(attributes0);
      Document document0 = parser3.parseInput("z`r],O5usqb nIeo", "");
      parser4.settings();
      parser1.settings(parseSettings1);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      Parser.parseFragment("", (Element) document0, "", parseErrorList0);
      Parser.unescapeEntities("iB9jJ*U[6,<dN_n<#+}", true);
      Parser.parseFragment("", (Element) document0, "");
      Parser.htmlParser();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors(984);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      // Undeclared exception!
      try { 
        Parser.parseFragment("", (Element) null, (String) null, parseErrorList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        parser0.parseInput((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser.parse("", "DoctypeSystemIdentifier_singleQuoted");
      Parser.parse("", "");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Parser parser3 = parser2.setTrackErrors(100);
      Parser.parseXmlFragment("", "");
      parser3.setTrackErrors(1794);
      Parser.parseXmlFragment("tHal", "");
      parser2.isTrackErrors();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser parser2 = parser1.setTreeBuilder(htmlTreeBuilder0);
      Parser.parse("&vI)bN3D\"k", "&vI)bN3D\"k");
      CDataNode cDataNode0 = new CDataNode("");
      parser2.setTrackErrors(3527);
      cDataNode0.ownerDocument();
      // Undeclared exception!
      try { 
        parser2.parseFragmentInput("", (Element) null, "`FU4[i\"7D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("/H'_f;", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.getTreeBuilder();
      String string0 = "Q>a^f";
      Document document0 = Document.createShell("Q>a^f");
      // Undeclared exception!
      try { 
        document0.after("Q>a^f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parser.unescapeEntities("", true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parse("", "t2Rct}1Ay{0M");
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parseError0).toString();
      ParseError parseError1 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parseError1).toString();
      parseErrorList0.add(parseError1);
      ParseError parseError2 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parseError2).toString();
      document0.clone();
      parseErrorList0.add(parseError2);
      parseErrorList0.add(parseError0);
      Parser.parseFragment("", (Element) document0, "", parseErrorList0);
      Parser.parseFragment("UdNWv]{Ww`yGb$+Bm", (Element) document0, "P^Q3Lr)5DPB,");
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1748);
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      parser1.settings(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.unescapeEntities((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(2886);
      Parser.xmlParser();
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "Should not be reachable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser.htmlParser();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("p7\"mTfe054l(QmhxiF");
      parser0.parseInput((Reader) stringReader0, "p7\"mTfe054l(QmhxiF");
      Parser.unescapeEntities("Z9!Lwh+q.QdmQ<}|y", false);
      Parser.htmlParser();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("nf `o", "nf `o");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.parent();
      Parser.parseFragment("nf `o", (Element) null, "nf `o");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Parser.parseFragment("nf `o", (Element) document0, "nf `o", parseErrorList0);
      parser0.settings();
      Parser.parseBodyFragment("x", "");
      Parser.xmlParser();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String string0 = "";
      parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parser.parseBodyFragment("", "");
      String string0 = "DLD4ABD[1%n6X@";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment("DLD4ABD[1%n6X@", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) stringReader0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "4Gr{vo;z'0I5W41SHcy";
      String string1 = "c{1";
      Parser.parseBodyFragment("4Gr{vo;z'0I5W41SHcy", "c{1");
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser0.settings(parseSettings0);
      Parser.parseBodyFragmentRelaxed("4Gr{vo;z'0I5W41SHcy", "4Gr{vo;z'0I5W41SHcy");
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "org.jsoup.parser.Parser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "embed";
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("embed", "");
      String string2 = null;
      document0.hasText();
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Document.createShell("figcaption");
      document0.nextElementSibling();
      parser0.parseFragmentInput("fQ,%2ldl;(GYj7", (Element) null, "1dsr7*tn\"/^oAo]");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.settings();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "$6'|Q0tqW3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser.unescapeEntities("7I-[@*dl;T%URo", false);
      Parser.htmlParser();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser.parseBodyFragment("org.jsoup.nodes.Entities$EscapeMode", "");
      Parser.parse("", "BeforeDoctypeName");
      Parser parser0 = Parser.htmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      parser1.isTrackErrors();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      parser1.setTrackErrors((-982));
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parser.xmlParser();
      Parser.htmlParser();
      Parser.parseBodyFragmentRelaxed("z'?:FT", "z'?:FT");
      Parser.parse("iT<)m1oQN&z|", "iT<)m1oQN&z|");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Parser parser2 = parser1.setTrackErrors(0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Parser parser3 = parser2.settings(parseSettings0);
      parser3.settings();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      int int0 = 0;
      Parser parser1 = parser0.setTrackErrors(0);
      // Undeclared exception!
      try { 
        parser1.setTreeBuilder((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("^Y\"SZ1Q", (Element) null, "^Y\"SZ1Q", parseErrorList0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      Parser.parseXmlFragment("", "");
      TreeBuilder treeBuilder0 = null;
      Parser parser0 = null;
      try {
        parser0 = new Parser((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parser.parseXmlFragment("", "");
      Parser.parseBodyFragment("", "l8kuot`<V(");
      Parser.parseBodyFragment("", "l8kuot`<V(");
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      parser0.isTrackErrors();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Parser.unescapeEntities("", false);
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser0.settings(parseSettings0);
      parser0.parseInput("", "");
      Parser.parseBodyFragmentRelaxed("", "");
      Parser.parseXmlFragment("org.jsoup.parser.Parser", "");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Parser.parseBodyFragment("kQvns50o:Wo[", "kQvns50o:Wo[");
      Parser parser0 = Parser.xmlParser();
      Parser.parse("kQvns50o:Wo[", "");
      parser0.getErrors();
      Parser.htmlParser();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment("fq>DfJ>[mK7DR)&r^//", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.parseFragment("Ai8Jx~P", (Element) null, "Ai8Jx~P");
      parser0.getTreeBuilder();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      TreeBuilder treeBuilder0 = parser0.getTreeBuilder();
      parser0.setTreeBuilder(treeBuilder0);
      Parser.xmlParser();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser parser2 = parser1.setTreeBuilder(htmlTreeBuilder0);
      Parser parser3 = parser2.setTrackErrors(100);
      // Undeclared exception!
      try { 
        parser3.parseInput((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Parser.parseBodyFragmentRelaxed("", "");
      Parser.xmlParser();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tbody", "QkO");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Element element0 = document0.createElement("tbody");
      Parser.parseFragment("C", (Element) document0, "tbody");
      parser1.parseFragmentInput("QkO", document0, "DMie:KiD%dOOwxu");
      Document document1 = Parser.parseBodyFragment("e]&TB+jc5`:n^Ojx`~", "tbody");
      TreeBuilder treeBuilder0 = parser0.getTreeBuilder();
      ParseErrorList parseErrorList0 = parser1.getErrors();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[3] = 0;
      Parser.xmlParser();
      ParseSettings parseSettings0 = treeBuilder0.settings;
      parser0.settings(parseSettings0);
      Parser.parseFragment("", (Element) document1, "C", parseErrorList0);
      parser1.parseFragmentInput("E?te*", element0, "");
      Parser.parseXmlFragment("tbody", "C");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.isTrackErrors();
      Parser parser1 = parser0.setTrackErrors((-1993));
      Parser.parseBodyFragment("", "");
      StringReader stringReader0 = new StringReader("A9l_]|%lan.*=HW]s");
      Parser parser2 = parser1.setTrackErrors(43);
      Parser.parseXmlFragment("org.jsoup.parser.ParseError", ">");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser2.settings(parseSettings0);
      stringReader0.close();
      Parser.unescapeEntities("", false);
      parser1.isTrackErrors();
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) stringReader0, "A9l_]|%lan.*=HW]s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser.parseBodyFragmentRelaxed("open", "open");
      Document document0 = Parser.parse("RNjmD^vx(_6s4DD", "org.jsoup.parser.Parser");
      document0.getElementsByAttributeValue("RNjmD^vx(_6s4DD", "org.jsoup.parser.Parser");
      Document document1 = document0.clone();
      parser0.parseFragmentInput("org.jsoup.parser.Parser", document1, "org.jsoup.parser.Parser");
      String string0 = "";
      Parser parser1 = parser0.setTrackErrors(1276);
      Parser.htmlParser();
      Parser.parseBodyFragmentRelaxed("", "n,jB<j");
      parser1.parseInput("org.jsoup.parser.Parser", "org.jsoup.parser.Parser");
      Parser.parseBodyFragment("open", "basefont");
      Parser.htmlParser();
      parser0.parseInput("org.jsoup.parser.Parser", "basefont");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, "X]usbO;(yU8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Parser.parse("", "BefopeDoct[+ypFName");
      Parser parser0 = Parser.htmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      parser1.isTrackErrors();
  }
}
