/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:26:21 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("style");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, ";N|h<r%F)B[", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      Parser parser2 = parser0.setTrackErrors(100);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      tokeniser0.createDoctypePending();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";N|h<r%F)B[", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";N|h<r%F)B[", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ZK!_[a");
      assertNotNull(stringReader0);
      
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "ZK!_[a");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = xmlTreeBuilder0.parseFragment("plaintext", document0, "ZK!_[a", parser0);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Element element0 = document0.createElement("plaintext");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = htmlTreeBuilder0.parseFragment("Pr}VU2U", element0, "ZK!_[a", parser0);
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("ZK!_[a", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(list1, list0);
      
      htmlTreeBuilder0.popStackToClose("");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("r}G", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("ZK!_[a", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("1", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertTrue(element2.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element5 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element5);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("style");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, ";N|h<r%F)B[", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      Parser parser2 = parser0.setTrackErrors(100);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      tokeniser0.createDoctypePending();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      token_StartTag0.appendTagName(";N|h<r%F)B[");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertNotNull(element0);
      assertEquals(";N|h<r%F)B[", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertEquals(";N|h<r%F)B[", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";N|h<r%F)B[", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";N|h<r%F)B[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element5 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element5);
      assertEquals(1, element5.siblingIndex());
      assertTrue(element5.hasParent());
      assertEquals(1, element5.childNodeSize());
      assertTrue(element5.isBlock());
      assertEquals("1", element5.baseUri());
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element5, element2);
      assertNotSame(element5, element1);
      assertSame(element5, element0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = Parser.xmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("D7"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean2 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("footer");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.createElement("mstyle");
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      
      stringReader0.mark(31);
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      
      boolean boolean1 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean2 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.getActiveFormattingElement("otion");
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element4 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element4);
      assertFalse(element4.isBlock());
      assertEquals("1", element4.baseUri());
      assertEquals(0, element4.childNodeSize());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.hasParent());
      assertFalse(element4.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element4, element0);
      assertNotSame(element4, element1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = Parser.xmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("1"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean1 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean2 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("footer");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("style", document0, "t5k@A[se05mFh", parser2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      
      StringReader stringReader0 = new StringReader("otion");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragment("1", "1");
      assertNotNull(document2);
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document1.html("1");
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("1", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("1", document3.location());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("1");
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      stringReader0.mark(31);
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      List<Node> list0 = Parser.parseFragment("otion", (Element) null, "otion");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<TextNode> list1 = element0.textNodes();
      assertNotNull(list1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      Element element2 = new Element("1");
      assertNotNull(element2);
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(element0, element2);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean1 = htmlTreeBuilder0.isSpecial(document1);
      assertFalse(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("1");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.insertStartTag("mstyle");
      assertNotNull(element3);
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.isBlock());
      assertEquals("1", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      
      htmlTreeBuilder0.generateImpliedEndTags("mstyle");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      Element element3 = element0.before((Node) document1);
      assertNotNull(element3);
      assertEquals("1", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.childNodeSize());
      assertEquals(2, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertNotSame(element3, element2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = new ArrayList<Node>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element4 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertEquals(3, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element5 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element5);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document2 = htmlTreeBuilder0.getDocument();
      assertNotNull(document2);
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("1", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("1", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(element1);
      assertFalse(boolean0);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "otion";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean5 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean5);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("otion");
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("X\"~MBY!<%.\"}X", attributes1);
      assertNotNull(token_StartTag1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(token_StartTag1, token_StartTag0);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("otion", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("otion");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Document document2 = Document.createShell("otion");
      assertNotNull(document2);
      assertEquals("otion", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("1");
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      Parser parser2 = parser0.settings(parseSettings0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      stringReader0.mark(31);
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      List<Node> list0 = Parser.parseFragment("otion", (Element) null, "otion");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      List<TextNode> list1 = element0.textNodes();
      assertNotNull(list1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element2 = (Element)element0.removeAttr("otion");
      assertNotNull(element2);
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("1", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element2, element0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element0, element2);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element0, element2);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean1 = htmlTreeBuilder0.isSpecial(document1);
      assertFalse(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("mstyle");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inButtonScope("body");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("otion");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Document document2 = Document.createShell("otion");
      assertNotNull(document2);
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("otion", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("otion", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.html("1");
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("1", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("1", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("1");
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      stringReader0.mark(31);
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      List<Node> list0 = Parser.parseFragment("otion", (Element) null, "otion");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<TextNode> list1 = element0.textNodes();
      assertNotNull(list1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element2 = new Element("1");
      assertNotNull(element2);
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element0, element2);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean1 = htmlTreeBuilder0.isSpecial(document1);
      assertFalse(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.insertStartTag("mstyle");
      assertNotNull(element3);
      assertEquals("1", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      
      htmlTreeBuilder0.generateImpliedEndTags("mstyle");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("tr", "html");
      assertNotNull(document0);
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "tr";
      stringArray0[3] = "tr";
      stringArray0[4] = "D7";
      stringArray0[5] = "tr";
      stringArray0[6] = "html";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inSelectScope("html");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("html");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("html", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertTrue(formElement1.isBlock());
      assertEquals(2, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("1", formElement1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(element1);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean5 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean5);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("1");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("X\"~MBY!<%.\"}X", attributes1);
      assertNotNull(token_StartTag1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(token_StartTag1, token_StartTag0);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("otion", formElement1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      document0.charset(charset0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      stringArray0[6] = "otion";
      stringArray0[7] = "D7";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("otion", document1.location());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("otion", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(boolean1 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean6);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_CData0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("1", element2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      
      ParseSettings parseSettings1 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parseSettings1, parseSettings0);
      
      ParseSettings parseSettings2 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parseSettings2, parseSettings1);
      assertSame(parseSettings2, parseSettings0);
      
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element5 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element5);
      assertEquals(1, element5.childNodeSize());
      assertTrue(element5.isBlock());
      assertEquals("1", element5.baseUri());
      assertEquals(1, element5.siblingIndex());
      assertTrue(element5.hasParent());
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element5, element2);
      assertNotSame(element5, element1);
      assertSame(element5, element0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Document document2 = (Document)htmlTreeBuilder0.getHeadElement();
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("otion", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Map<String, String> map0 = document2.dataset();
      assertNotNull(map0);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("otion", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("otion", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document2);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("otion", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean6);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("tr", "html");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "tr";
      stringArray0[3] = "tr";
      stringArray0[4] = "D7";
      stringArray0[5] = "tr";
      stringArray0[6] = "html";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("html");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("pbGVK,TX/,W\"UDZ93^", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("1", formElement1.baseUri());
      assertEquals(2, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      List<Node> list0 = parser0.parseFragmentInput("D7", document0, "6-u");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element4 = htmlTreeBuilder0.getActiveFormattingElement("D7");
      assertNull(element4);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = new Element("Bve+,@A$$c");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("Ne(toM7/)Elb[", "Ne(toM7/)Elb[");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<Node> list0 = element0.childNodes();
      assertNotNull(list0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Node> list1 = parser0.parseFragmentInput("Ne(toM7/)Elb[", document0, "Bve+,@A$$c");
      assertNotNull(list1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      Parser parser1 = parser0.setTrackErrors(40);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("colgroup");
      assertNotNull(string0);
      assertEquals("colgroup", string0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      String string1 = "$values";
      Document document1 = parser1.parseInput("ul", "$values");
      assertNotNull(document1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("$values", document1.location());
      assertEquals("$values", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      String string2 = Parser.unescapeEntities("<U'^W9\"AMM+", false);
      assertNotNull(string2);
      assertEquals("<U'^W9\"AMM+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertTrue(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(document0, document1);
      
      List<Node> list2 = htmlTreeBuilder0.parseFragment("<U'^W9\"AMM+", element0, "muted", parser1);
      assertNotNull(list2);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertSame(element1, element0);
      assertSame(element0, element1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(document0, document1);
      
      String string3 = htmlTreeBuilder0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list3 = Parser.parseFragment("mo];RN5cr'a", element0, "<U'^W9\"AMM+");
      assertNotNull(list3);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list0));
      assertSame(element0, element1);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertTrue(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(document0, document1);
      
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ne(toM7/)Elb[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ne(toM7/)Elb[", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element0, element1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(document0, document1);
      
      htmlTreeBuilder0.maybeSetBaseUri(document1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("$values", document1.location());
      assertEquals("$values", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      Token.StartTag token_StartTag0 = null;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterBody;
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeName("h3");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope(":first-of-type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "rt";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("rt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      String string0 = "nullChar";
      Token.CData token_CData0 = new Token.CData("nullChar");
      assertNotNull(token_CData0);
      
      StringBuilder stringBuilder0 = new StringBuilder(100);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_CData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("body", "body");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement("body");
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "command";
      stringArray0[1] = "command";
      stringArray0[2] = "command";
      stringArray0[3] = "command";
      stringArray0[4] = "command";
      stringArray0[5] = "command";
      stringArray0[6] = "command";
      stringArray0[7] = "command";
      stringArray0[8] = "command";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("command", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("<AJ\"0O(V~#t");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("<AJ\"0O(V~#t", tag0.toString());
      
      String string0 = "tr";
      CDataNode cDataNode0 = new CDataNode("<AJ\"0O(V~#t");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "tr", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("<AJ\"0O(V~#t", tag0.toString());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("tr", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      String string1 = tag0.getName();
      assertNotNull(string1);
      assertEquals("<AJ\"0O(V~#t", string1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("<AJ\"0O(V~#t", tag0.toString());
      assertFalse(string1.equals((Object)string0));
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      assertNotNull(tokeniser0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      htmlTreeBuilder0.tokeniser = tokeniser0;
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      attributes0.removeIgnoreCase("tr");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("u<.#Nho");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "En";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("En");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Document.createShell("iB1nK*]");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("iB1nK*]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("iB1nK*]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("iB1nK*]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("iB1nK*]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("iB1nK*]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      String string0 = "rwgJ";
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert(token_Doctype0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = ",o";
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(",o", attributes0);
      assertNotNull(token_StartTag1);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InColumnGroup;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("hgroup");
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertEquals("hgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      
      Tag tag1 = tag0.setSelfClosing();
      assertNotNull(tag1);
      assertEquals("hgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("hgroup", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag1, "hgroup", attributes1);
      assertNotNull(formElement0);
      assertEquals("hgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("hgroup", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("hgroup", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals("hgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("hgroup", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("hgroup", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = "e%xohRW`w=5f";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("_S<B>9Tiin#]=1<}j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", ".u");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".u", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".u", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("!^7q");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("!^7q", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Element element0 = new Element(tag0, "!^7q", attributes1);
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("!^7q", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("!^7q", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Document document0 = xmlTreeBuilder0.parse(":empty", ":empty");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":empty", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(":empty", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.select(":empty");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":empty", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(":empty", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":empty", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(":empty", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.tokenType();
      assertNotNull(string0);
      assertEquals("Comment", string0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "footer";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("footer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "marquee";
      htmlTreeBuilder0.setFosterInserts(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      stringArray0[1] = "MA87iC]\"z+$(j";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "&#x";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("&#x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Comment comment0 = new Comment("Bm'B]3|1A=IK");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(xmlDeclaration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CharacterReader characterReader0 = new CharacterReader("nav");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(59);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      boolean boolean0 = parseErrorList0.add((ParseError) null);
      assertTrue(boolean0);
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      
      boolean boolean1 = parseErrorList0.add((ParseError) null);
      assertTrue(boolean1);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      
      Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "egr(+oVr%";
      StringBuilder stringBuilder0 = new StringBuilder("egr(+oVr%");
      assertNotNull(stringBuilder0);
      assertEquals("egr(+oVr%", stringBuilder0.toString());
      
      String string1 = "frameset";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "frameset";
      stringArray0[1] = "egr(+oVr%";
      stringArray0[2] = "egr(+oVr%";
      stringArray0[3] = "frameset";
      stringArray0[4] = "frameset";
      stringArray0[5] = "egr(+oVr%";
      stringArray0[6] = "egr(+oVr%";
      stringArray0[7] = "egr(+oVr%";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("", "#j.z/3$9?b");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#j.z/3$9?b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#j.z/3$9?b", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#j.z/3$9?b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#j.z/3$9?b", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#j.z/3$9?b", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#j.z/3$9?b", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#j.z/3$9?b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#j.z/3$9?b", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#j.z/3$9?b", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#j.z/3$9?b", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#j.z/3$9?b", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#j.z/3$9?b", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("XIa[qTP}~yCj", document1, "XIa[qTP}~yCj", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("tfoot");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      
      Tag tag1 = tag0.setSelfClosing();
      assertNotNull(tag1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isInline());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.isSelfClosing());
      assertEquals("tfoot", tag1.toString());
      assertTrue(tag1.canContainBlock());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag1, "tfoot", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isInline());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.isSelfClosing());
      assertEquals("tfoot", tag1.toString());
      assertTrue(tag1.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals("tfoot", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("tfoot", "tfoot");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tfoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isInline());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.isSelfClosing());
      assertEquals("tfoot", tag1.toString());
      assertTrue(tag1.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals("tfoot", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tfoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("tfoot", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(formElement1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isInline());
      assertTrue(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.isSelfClosing());
      assertEquals("tfoot", tag1.toString());
      assertTrue(tag1.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals("tfoot", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tfoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("tfoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("tfoot", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.isSpecial(element0);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragment("CyB>1 7[t", ">w");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(">w", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(">w", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "header", parser1);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("header", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("header", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Document document2 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      document2.title("8j>uR9hNo5Y!fY");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("style"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.insertStartTag("otion");
      assertNotNull(element3);
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("1", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      String string0 = element0.text();
      assertNotNull(string0);
      assertEquals("D7", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("otion"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string1 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string1);
      assertEquals("1", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Parser parser2 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseErrorList parseErrorList0 = parser2.getErrors();
      assertNotNull(parseErrorList0);
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      Stream<ParseError> stream0 = parseErrorList0.stream();
      assertNotNull(stream0);
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      List<Node> list0 = Parser.parseFragment("footer", (Element) document0, "t-!2(vU9A>,u~\"f", parseErrorList0);
      assertNotNull(list0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      List<String> list1 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list1);
      assertFalse(list1.contains("style"));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("( f1nz`L;w!^z~]");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "header", parser1);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("header", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("header", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Document document2 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("D7"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Parser parser2 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseErrorList parseErrorList0 = parser2.getErrors();
      assertNotNull(parseErrorList0);
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      Stream<ParseError> stream0 = parseErrorList0.stream();
      assertNotNull(stream0);
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      List<Node> list0 = Parser.parseFragment("org.jsoup.nodes.Element", (Element) document0, "t-!2(vU9A>,u~\"f", parseErrorList0);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser2.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      List<String> list1 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list1);
      assertFalse(list1.contains("org.jsoup.nodes.Element"));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("( f1nz`L;w!^z~]");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.replaceOnStack(element0, document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "style";
      stringArray0[3] = "style";
      stringArray0[4] = "D7";
      stringArray0[5] = "style";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Document document2 = document1.parser(parser0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.insert(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("1", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragment("x0E!GvAPxa|g\"", "7Vo#J=h");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7Vo#J=h", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7Vo#J=h", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.getFromStack("otion");
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("otion");
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "style";
      stringArray0[3] = "style";
      stringArray0[4] = "D7";
      stringArray0[5] = "style";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("1"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.push(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertNotNull(parseErrorList0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      assertNotNull(tokeniser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Token.Character token_Character0 = tokeniser0.charPending;
      assertNotNull(token_Character0);
      
      htmlTreeBuilder0.currentToken = (Token) token_Character0;
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("otion");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.contains(element0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = "D7";
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      String string1 = "1";
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNotNull(element0);
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("otion"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean2 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.state();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(document1);
      assertFalse(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("1", (Element) null, "D7", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.popStackToBefore("D7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("1", (Element) null, "D7", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.popStackToBefore("D7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("otion"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean2 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("styl0");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document2 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(document2);
      assertFalse(document2.hasParent());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("1", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      Pattern pattern0 = Pattern.compile("rt");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("rt", pattern0.toString());
      assertEquals("rt", pattern0.pattern());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("1", pattern0);
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, pattern0.flags());
      assertEquals("rt", pattern0.toString());
      assertEquals("rt", pattern0.pattern());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("1", attributes0);
      assertNotNull(token_StartTag1);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      Element element3 = htmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element3);
      assertEquals(0, attributes0.size());
      assertEquals("1", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = "otion";
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string1 = "styl0";
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string2 = "D7";
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      String string3 = "1";
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "$values", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "a");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("a", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("a", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("a", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(8218);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      List<Node> list0 = Parser.parseFragment("D7", element1, "D7", parseErrorList0);
      assertNotNull(list0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("a", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("a", element1.baseUri());
      assertEquals(3, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      stringArray0[6] = "otion";
      stringArray0[7] = "a";
      boolean boolean1 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("a", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("a", element1.baseUri());
      assertEquals(3, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("a", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("a", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("a", element1.baseUri());
      assertEquals(3, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inScope("D7");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.getActiveFormattingElement((String) null);
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      String string0 = element0.tagName();
      assertNotNull(string0);
      assertEquals("body", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("styl0");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(element1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("styl0", "otion");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "otion";
      stringArray0[2] = "styl0";
      stringArray0[3] = "styl0";
      stringArray0[4] = "D7";
      stringArray0[5] = "styl0";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("styl0");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.maybeSetBaseUri(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ZK!_[a");
      assertNotNull(stringReader0);
      
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "ZK!_[a");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = xmlTreeBuilder0.parseFragment(":only-child", document0, "ZK!_[a", parser0);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Element element0 = document0.createElement(":only-child");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = htmlTreeBuilder0.parseFragment("Pr}VU2U", element0, "ZK!_[a", parser0);
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(list1, list0);
      
      htmlTreeBuilder0.popStackToClose("B");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Tag tag0 = Tag.valueOf("colgroup");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("colgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      Tag tag1 = tag0.setSelfClosing();
      assertNotNull(tag1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("colgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isBlock());
      assertEquals("colgroup", tag1.toString());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.canContainBlock());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      Element element0 = new Element(tag1, "colgroup");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("colgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isBlock());
      assertEquals("colgroup", tag1.toString());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.canContainBlock());
      assertEquals("colgroup", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      List<Node> list0 = Parser.parseFragment("<]/@a-.;5", element0, "<]/@a-.;5");
      assertNotNull(list0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("colgroup", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isBlock());
      assertEquals("colgroup", tag1.toString());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isSelfClosing());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.canContainBlock());
      assertEquals("colgroup", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "yUHQ7#2");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yUHQ7#2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yUHQ7#2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[0] = "mstyle";
      stringArray0[6] = "yUHQ7#2";
      stringArray0[7] = "1";
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isInActiveFormattingElements(document1);
      assertTrue(boolean4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "style";
      stringArray0[3] = "style";
      Parser parser2 = Parser.htmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      stringArray0[4] = "D7";
      stringArray0[5] = "style";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean1 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Document document2 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("otion", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("otion", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      List<Node> list0 = parser1.parseFragmentInput("otion", document0, "stVyl:");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("1", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      stringReader0.mark(31);
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":/?F[", parser0);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":/?F[", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":/?F[", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      Document document2 = (Document)document1.addClass("D7");
      assertNotNull(document2);
      assertFalse(document2.hasParent());
      assertEquals("1", document2.location());
      assertEquals("1", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document3 = (Document)document1.removeAttr("otion");
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("1", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("1", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors((-1747));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser2.parseInput((Reader) stringReader0, "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("-P.VsjR;z^a2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      List<Node> list0 = parser1.parseFragmentInput("1", element0, "caption");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      Parser parser2 = Parser.xmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.pop();
      assertNotNull(element3);
      assertTrue(element3.hasParent());
      assertEquals(1, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("caption", element3.baseUri());
      assertTrue(element3.isBlock());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token token0 = token_EOF0.reset();
      assertNotNull(token0);
      assertSame(token_EOF0, token0);
      assertSame(token0, token_EOF0);
      
      boolean boolean4 = htmlTreeBuilder0.process(token0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_EOF0, token0);
      assertSame(token0, token_EOF0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(document1);
      assertFalse(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("1"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("D7", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.generateImpliedEndTags((String) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      boolean boolean3 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.insertStartTag("colgroup");
      assertNotNull(element1);
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[2] = "style";
      stringArray0[3] = "style";
      stringArray0[4] = "D7";
      stringArray0[5] = "style";
      stringArray0[7] = "1";
      Element element1 = htmlTreeBuilder0.insertStartTag("D7");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      
      Tag tag0 = Tag.valueOf("~'Wryd [b");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("~'Wryd [b", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "DQ|TH<|7", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("~'Wryd [b", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("~'Wryd [b", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("DQ|TH<|7", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.setFormElement(formElement1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("~'Wryd [b", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("DQ|TH<|7", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("~'Wryd [b", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("style");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "style";
      stringArray0[2] = "style";
      stringArray0[3] = "style";
      stringArray0[4] = "style";
      stringArray0[7] = "1";
      Element element0 = htmlTreeBuilder0.insertStartTag("style");
      assertNotNull(element0);
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("~'Wryd [b");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~'Wryd [b", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "DQ|TH<|7", attributes0);
      assertNotNull(formElement0);
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~'Wryd [b", tag0.toString());
      assertEquals(0, attributes0.size());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("DQ|TH<|7", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~'Wryd [b", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.setFormElement(formElement1);
      assertEquals("DQ|TH<|7", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("DQ|TH<|7", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~'Wryd [b", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.baseUri());
      assertEquals("1", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("D7");
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document2 = Parser.parse("D7", "D7");
      assertNotNull(document2);
      assertEquals("D7", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("D7", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertFalse(boolean1);
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("D7"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("2Re");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      stringReader0.mark(100);
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "2Re", parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("2Re", "2Re");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2Re", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("2Re", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2Re", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("2Re", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("2Re", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("2Re", document1.location());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2Re", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("2Re", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("2Re", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("2Re", document1.location());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2Re", element0.baseUri());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2Re", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("2Re", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("2Re", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("2Re", document1.location());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2Re", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("2Re");
      assertNotNull(token_CData0);
      
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      parseErrorList0.clear();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Document.createShell("mstyle");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("mstyle", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mstyle", document0.location());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("1");
      assertNotNull(element0);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element2.childNodeSize());
      assertEquals("1", element2.baseUri());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(100, (-3136));
      assertNotNull(evaluator_IsNthChild0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_IsNthChild0);
      assertFalse(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringArray0[1] = "mstyle";
      Parser parser2 = parser0.settings(parseSettings0);
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[0] = "mstyle";
      Parser parser3 = Parser.xmlParser();
      assertNotNull(parser3);
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser0));
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser2);
      assertNotSame(parser3, parser0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(parser1.equals((Object)parser3));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(parser1, parser3);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean3 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element4 = htmlTreeBuilder0.pop();
      assertNotNull(element4);
      assertEquals(1, element4.siblingIndex());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals("1", element4.baseUri());
      assertFalse(element4.isBlock());
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element4, element0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token token0 = token_EOF0.reset();
      assertNotNull(token0);
      assertSame(token_EOF0, token0);
      assertSame(token0, token_EOF0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = "style";
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("style"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("1", element2.baseUri());
      assertFalse(element2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      Parser parser2 = Parser.xmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean1 = htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Node node0 = null;
      Element element4 = htmlTreeBuilder0.pop();
      assertNotNull(element4);
      assertEquals("1", element4.baseUri());
      assertTrue(element4.hasParent());
      assertEquals(1, element4.childNodeSize());
      assertEquals(1, element4.siblingIndex());
      assertTrue(element4.isBlock());
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertNotSame(element4, element1);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EOF0.type = token_TokenType0;
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      assertSame(token_EOF0, token_EOF1);
      
      String string0 = token_EOF1.tokenType();
      assertNotNull(string0);
      assertEquals("EOF", string0);
      assertSame(token_EOF1, token_EOF0);
      assertSame(token_EOF0, token_EOF1);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("tr", "otion");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "D7";
      stringArray0[3] = "tr";
      stringArray0[4] = "D7";
      stringArray0[5] = "tr";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("pbGVK,TX/,W\"UDZ93^", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertNotNull(formElement1);
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(1, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("1", formElement1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean6);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("otion");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("img");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("img");
      assertNotNull(elements0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("otion", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("1");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("img");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("1");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("ds$!c.dlC|*M%M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document("</");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.createElement(",wX{.u}");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("</", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("tr", "otion");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "D7";
      stringArray0[2] = "tr";
      stringArray0[3] = "tr";
      stringArray0[4] = "D7";
      stringArray0[5] = "tr";
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertEquals("1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("otion");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("pbGVK,TX/,W\"UDZ93^", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertEquals("1", formElement1.baseUri());
      assertEquals(1, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element2 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertNotNull(element2);
      assertEquals(0, element2.childNodeSize());
      assertEquals(2, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("1", element2.baseUri());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ZK!_[a");
      assertNotNull(stringReader0);
      
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "ZK!_[a");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = xmlTreeBuilder0.parseFragment(":only-child", document0, "ZK!_[a", parser0);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Element element0 = document0.createElement(":only-child");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = htmlTreeBuilder0.parseFragment("Pr}VU2U", element0, "ZK!_[a", parser0);
      assertNotNull(list1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ZK!_[a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(list1, list0);
      
      htmlTreeBuilder0.popStackToClose("B");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("r}G", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertNotNull(element1);
      assertEquals("ZK!_[a", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("oti}1on");
      assertNotNull(stringReader0);
      
      htmlTreeBuilder0.baseUri = "oti}1on";
      long long0 = stringReader0.skip(1810L);
      assertEquals(7L, long0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "gB~DNN4", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(1054);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document0 = parser2.parseInput("C>h5G1p6F9'gC=<", "C>h5G1p6F9'gC=<");
      assertNotNull(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C>h5G1p6F9'gC=<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C>h5G1p6F9'gC=<", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("C>h5G1p6F9'gC=<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C>h5G1p6F9'gC=<", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.ForeignContent;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Document document2 = Document.createShell("mstyle");
      assertNotNull(document2);
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("mstyle", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("mstyle", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element2 = document2.head();
      assertNotNull(element2);
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("mstyle", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("mstyle", document2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("mstyle", element2.baseUri());
      assertTrue(element2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      stringReader0.mark(31);
      List<Node> list0 = Parser.parseFragment("D7", element2, "mstyle");
      assertNotNull(list0);
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("mstyle", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("mstyle", document2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("mstyle", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<TextNode> list1 = element1.textNodes();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      Element element4 = (Element)element0.removeAttr("D7");
      assertNotNull(element4);
      assertEquals("1", element4.baseUri());
      assertEquals(1, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals(1, element4.siblingIndex());
      assertTrue(element4.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element4, element1);
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element4);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element4));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element4);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element1, element4);
      
      boolean boolean1 = htmlTreeBuilder0.inButtonScope("Bve+,@$c");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean2 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("table");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "^z%a@anw'@\">_[");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("^z%a@anw'@\">_[", document0.location());
      assertEquals("^z%a@anw'@\">_[", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("^z%a@anw'@\">_[", document0.location());
      assertEquals("^z%a@anw'@\">_[", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^z%a@anw'@\">_[", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertNotNull(element0);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string1 = element0.absUrl("JfY50[f:py");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertNotNull(parseErrorList0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertSame(parser0, parser1);
      
      boolean boolean0 = document1.hasClass("&1E|");
      assertFalse(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("^z%a@anw'@\">_[", document0.location());
      assertEquals("^z%a@anw'@\">_[", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^z%a@anw'@\">_[", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = Parser.parseFragment("TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@18, state=InBody, currentElement=<body>\n table\n</body>}", element0, "command", parseErrorList0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      List<Node> list1 = element0.childNodesCopy();
      assertNotNull(list1);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      stringReader0.close();
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean1);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^z%a@anw'@\">_[", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string2 = "noembed";
      HtmlTreeBuilder htmlTreeBuilder1 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder1);
      assertFalse(htmlTreeBuilder1.equals((Object)htmlTreeBuilder0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder1.settings;
      assertNull(parseSettings0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder1.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("1"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("vJRi=%v='", "vJRi=%v='");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("vJRi=%v='", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("vJRi=%v='", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document2.getElementsMatchingText("vJRi=%v='");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("vJRi=%v='", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("vJRi=%v='", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("vJRi=%v='", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      Element element0 = document2.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("vJRi=%v='", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("vJRi=%v='", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("vJRi=%v='", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements1 = element0.children();
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("vJRi=%v='", document0.location());
      assertEquals("vJRi=%v='", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vJRi=%v='", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vJRi=%v='", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("vJRi=%v='", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("vJRi=%v='", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("vJRi=%v='", element0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      String string0 = "";
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      PipedReader pipedReader1 = new PipedReader(100);
      assertNotNull(pipedReader1);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ZK!_[a");
      assertNotNull(stringReader0);
      
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "ZK!_[a");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = xmlTreeBuilder0.parseFragment("style", document0, "ZK!_[a", parser0);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Element element0 = document0.createElement("style");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = htmlTreeBuilder0.parseFragment("Pr}VU2U", element0, "ZK!_[a", parser0);
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZK!_[a", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZK!_[a", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ZK!_[a", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(list1, list0);
      
      htmlTreeBuilder0.popStackToClose("B");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("frameset");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "frameset", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("eL%`*0=");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("eL%`*0=", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      
      Tag tag1 = tag0.setSelfClosing();
      assertNotNull(tag1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isSelfClosing());
      assertEquals("eL%`*0=", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("eL%`*0=", tag1.toString());
      assertTrue(tag1.isSelfClosing());
      assertFalse(tag1.isData());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isBlock());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      CDataNode cDataNode0 = new CDataNode(",i'");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "tion", attributes0);
      assertNotNull(pseudoTextElement0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isSelfClosing());
      assertEquals("eL%`*0=", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("eL%`*0=", tag1.toString());
      assertTrue(tag1.isSelfClosing());
      assertFalse(tag1.isData());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("tion", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(pseudoTextElement0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("I&BKl#-", "fieldset");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("fieldset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("fieldset", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("I&BKl#-", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("style", "otion");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      String string0 = Parser.unescapeEntities("otion", false);
      assertNotNull(string0);
      assertEquals("otion", string0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("1", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("D7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("img");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      Map<String, String> map1 = element1.dataset();
      assertNotNull(map1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(map1.equals((Object)map0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(map1, map0);
      
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("img");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("otion", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.processStartTag("1");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("img");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("1");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean5 = htmlTreeBuilder0.inSelectScope("ds$!c.dlC|*M%M");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      assertNotNull(token_EndTag0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCell;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelect;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilderState$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element1.dataset();
      assertNotNull(map0);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(boolean1 == boolean0);
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      boolean boolean2 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(document1.hasParent());
      assertEquals("otion", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("otion", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("otion", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.processEndTag("otion");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("otion", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      
      boolean boolean5 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean6 = htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      assertFalse(boolean6);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("otion", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("style");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, ";N|h<r%F)B[", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      Parser parser2 = parser0.setTrackErrors(100);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      tokeniser0.createDoctypePending();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      token_StartTag0.appendTagName(";N|h<r%F)B[");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";N|h<r%F)B[", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";N|h<r%F)B[", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";N|h<r%F)B[", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";N|h<r%F)B[", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableBody;
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("tfoot");
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tfoot", tag0.toString());
      assertTrue(tag0.canContainBlock());
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("tfoot", "tfoot");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Pattern pattern0 = Pattern.compile("tfoot");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("tfoot", pattern0.toString());
      assertEquals("tfoot", pattern0.pattern());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tfoot", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tfoot", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tfoot", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tfoot", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("otion");
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      
      List<Node> list0 = parser0.parseFragmentInput("otion", document0, "6-u");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser1);
      assertNotSame(document0, document1);
      
      stringReader0.mark(31);
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element1, element0);
      
      boolean boolean1 = htmlTreeBuilder0.inButtonScope("mstyle");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      Element element3 = htmlTreeBuilder0.getActiveFormattingElement("otion");
      assertNull(element3);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.CData token_CData0 = new Token.CData("noscript");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      boolean boolean3 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("b<8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("otion", document0, "otion", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("otion", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("otion", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser2 = parser1.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("D7"));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean2 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("1", document0.location());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(element1, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("style");
      assertNull(element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack((Element) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser2 = parser1.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      Token.CData token_CData0 = new Token.CData("t5k@A[se05mFh");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      boolean boolean2 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("+K0 ;dvrh}|hZO");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean4 = htmlTreeBuilder0.inListItemScope("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("otion", "otion");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("otion", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(0L, long0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean1 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = (Element)element1.removeAttr("D7");
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("1", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list0);
      assertFalse(list0.contains("otion"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = htmlTreeBuilder0.parseFragment("z[#b}lV<", element1, "1", parser0);
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("1");
      assertNotNull(token_CData0);
      
      boolean boolean2 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      htmlTreeBuilder0.generateImpliedEndTags("footer");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser0.parseInput("otion", "otion");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertSame(parser0, parser1);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals("otion", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals("otion", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      
      stringReader0.close();
      Document document2 = (Document)htmlTreeBuilder0.getHeadElement();
      assertNotNull(document2);
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertEquals("otion", document2.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Map<String, String> map0 = document2.dataset();
      assertNotNull(map0);
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertEquals("otion", document2.baseUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertEquals("otion", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      Elements elements0 = element0.getElementsMatchingOwnText("D7");
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals("otion", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("otion", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      boolean boolean2 = htmlTreeBuilder0.inSelectScope("D7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals("otion", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("otion", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document2);
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("otion", document2.location());
      assertEquals("otion", document2.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean3 = htmlTreeBuilder0.processStartTag("otion");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("otion");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("otion", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("otion", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean4 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("otion");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parseBodyFragment("tr", "html");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document0.baseUri());
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("D7");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "tr";
      stringArray0[3] = "tr";
      stringArray0[4] = "D7";
      stringArray0[5] = "tr";
      stringArray0[6] = "html";
      stringArray0[7] = "1";
      boolean boolean1 = htmlTreeBuilder0.inSelectScope("html");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element2 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element2);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean2 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean3 = htmlTreeBuilder0.inListItemScope("html");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("pbGVK,TX/,W\"UDZ93^", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      FormElement formElement1 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertNotNull(formElement1);
      assertEquals("1", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertEquals(2, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("otion", "otion");
      htmlTreeBuilder0.setHeadElement(document0);
      StringReader stringReader0 = new StringReader("D7");
      Document document1 = htmlTreeBuilder0.getDocument();
      Element element0 = document1.body();
      stringReader0.close();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      
      element1.dataset();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[2] = "otion";
      stringArray0[3] = "otion";
      stringArray0[4] = "D7";
      stringArray0[5] = "otion";
      htmlTreeBuilder0.isInActiveFormattingElements(element1);
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      element0.getElementsMatchingOwnText("D7");
      htmlTreeBuilder0.inScope(stringArray0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element1);
      assertEquals(0, element1.siblingIndex());
      
      htmlTreeBuilder0.processStartTag("otion");
      htmlTreeBuilder0.getFormElement();
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("otion");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean1 = htmlTreeBuilder0.inTableScope("D7");
      assertFalse(boolean1 == boolean0);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      htmlTreeBuilder0.popStackToClose(stringArray0);
      htmlTreeBuilder0.inScope("ds$!c.dlC|*M%M", stringArray0);
      htmlTreeBuilder0.getBaseUri();
      htmlTreeBuilder0.inScope("1");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("X\"~MBY!<%.\"}X", attributes1);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.doc;
      StringReader stringReader0 = new StringReader("otion");
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      Element element0 = document1.body();
      Parser.parseBodyFragment("1", "1");
      document1.html("1");
      htmlTreeBuilder0.getActiveFormattingElement("1");
      stringReader0.mark(31);
      document1.text();
      Parser.parseFragment("otion", (Element) null, "otion");
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      element0.textNodes();
      Element element1 = new Element("1");
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      String string0 = "Bve+,@A$$c";
      htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      htmlTreeBuilder0.processStartTag("1");
      htmlTreeBuilder0.insertStartTag("mstyle");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      StringReader stringReader0 = new StringReader("mstyle");
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      Element element0 = document1.body();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Parser.parseFragment("styl0", element0, "tbody", parseErrorList0);
      Document.createShell("mstyle");
      htmlTreeBuilder0.getActiveFormattingElement("1");
      stringReader0.mark(31);
      document1.text();
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      ArrayList<TextNode> arrayList1 = new ArrayList<TextNode>();
      element0.removeAttr("mstyle");
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      htmlTreeBuilder0.isSpecial(document1);
      htmlTreeBuilder0.removeFromStack(document0);
      htmlTreeBuilder0.generateImpliedEndTags("mstyle");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.isFosterInserts();
      htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.markInsertionMode();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      Document document0 = Parser.parseBodyFragment("mstyle", "otion");
      StringReader stringReader0 = new StringReader("D7");
      Document document1 = parser1.parseInput((Reader) stringReader0, "1");
      Element element0 = document1.body();
      String[] stringArray0 = new String[8];
      element0.clone();
      stringArray0[0] = "D7";
      stringArray0[1] = "D7";
      stringArray0[1] = "mstyle";
      stringArray0[3] = "mstyle";
      stringArray0[4] = "D7";
      stringArray0[5] = "mstyle";
      Parser.xmlParser();
      stringArray0[6] = "otion";
      stringArray0[7] = "1";
      htmlTreeBuilder0.inScope(stringArray0);
      htmlTreeBuilder0.removeLastFormattingElement();
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      htmlTreeBuilder0.inButtonScope("Bve+,@A$$c");
      htmlTreeBuilder0.isFragmentParsing();
      htmlTreeBuilder0.toString();
      htmlTreeBuilder0.pop();
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_EOF0.type = token_TokenType0;
      Token token0 = token_EOF0.reset();
      htmlTreeBuilder0.process(token0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ZK!_[a");
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "ZK!_[a");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("ZK!_[a", document0, "ZK!_[a", parser0);
      Element element0 = document0.createElement("ZK!_[a");
      htmlTreeBuilder0.maybeSetBaseUri(element0);
      element0.html("dir");
      htmlTreeBuilder0.parseFragment("Pr}VU2U", element0, "ZK!_[a", parser0);
      htmlTreeBuilder0.popStackToClose("");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("r}G", (Attributes) null);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      htmlTreeBuilder0.defaultSettings();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
