/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 07 21:59:30 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("P");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      String string0 = token_EndTag0.name();
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertEquals("P", string0);
      
      token_EndTag1.appendAttributeName('j');
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.CData token_CData0 = new Token.CData("#");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("4NXU");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.CData token_CData2 = (Token.CData)token_CData0.data("#");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      
      Token.CData token_CData3 = (Token.CData)token_CData2.data("<=z~(^cZO\t U9");
      assertNotNull(token_CData3);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData1);
      
      String string1 = token_CData3.tokenType();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData1);
      assertEquals("CData", string1);
      assertFalse(string1.equals((Object)string0));
      
      Token.EndTag token_EndTag3 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag3, token_EndTag2);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      
      String string2 = token_EndTag0.normalName();
      assertNotNull(string2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "P");
      assertEquals("P", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((int) 'j', 'j');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeValue("RlN<~>:r");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("P");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag1.appendAttributeName('j');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      
      Token.CData token_CData0 = new Token.CData("#");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("4NXU");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      
      Token.CData token_CData2 = (Token.CData)token_CData0.data("#");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      Token.CData token_CData3 = (Token.CData)token_CData2.data("<=z~(^cZO\t U9");
      assertNotNull(token_CData3);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      
      String string0 = token_CData3.tokenType();
      assertNotNull(string0);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      assertEquals("CData", string0);
      
      Token.EndTag token_EndTag3 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag3);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag3, token_EndTag2);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag0);
      
      String string1 = token_EndTag0.normalName();
      assertNotNull(string1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag3);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "P");
      assertEquals("P", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((int) 'j', 'j');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.Comment token_Comment2 = token_Comment1.asComment();
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      
      // Undeclared exception!
      try { 
        token_Comment2.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeValue("(#T]V)xB,m");
      Token.StartTag token_StartTag1 = new Token.StartTag();
      assertNotNull(token_StartTag1);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertNotSame(token_Tag0, token_StartTag1);
      assertSame(token_Tag0, token_StartTag0);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_Tag0.equals((Object)token_StartTag1));
      
      token_StartTag1.appendTagName("R+Uq{}$7");
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      String string0 = token_StartTag1.toString();
      assertNotNull(string0);
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertEquals("<R+Uq{}$7>", string0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      token_StartTag1.finaliseTag();
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 36;
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertEquals(9, intArray0.length);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertArrayEquals(new int[] {36, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Token.StartTag token_StartTag2 = token_StartTag0.asStartTag();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertNotSame(token_StartTag2, token_StartTag1);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag2.equals((Object)token_StartTag1));
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_StartTag2.type = token_TokenType0;
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertEquals(9, intArray0.length);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertArrayEquals(new int[] {36, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = token_StartTag2.isCharacter();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertNotSame(token_StartTag2, token_StartTag1);
      assertTrue(boolean0);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag2.equals((Object)token_StartTag1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      token_EndTag1.appendAttributeValue(charArray0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {',', 'B', '2'}, charArray0);
      
      Attributes attributes0 = token_EndTag1.getAttributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_EndTag1.attributes = attributes1;
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, token_EndTag1.attributes.size());
      
      token_EndTag1.appendAttributeName("Y?Fm]JeSs4~r");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      
      boolean boolean0 = token_Doctype1.isDoctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      String string0 = token_Doctype1.tokenType();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertEquals("Doctype", string0);
      
      String string1 = token_CData0.toString();
      assertNotNull(string1);
      assertEquals("<![CDATA[]]>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = token_CData0.toString();
      assertNotNull(string2);
      assertEquals("<![CDATA[]]>", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string3 = token_CData1.tokenType();
      assertNotNull(string3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertEquals("CData", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendTagName("");
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag1.newAttribute();
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      Token.StartTag token_StartTag2 = token_StartTag1.nameAttr((String) null, (Attributes) null);
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      
      String string4 = token_Doctype0.getName();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(string4);
      assertSame(token_Doctype0, token_Doctype1);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        token_StartTag2.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertFalse(boolean0);
      
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      String string0 = token_Doctype1.tokenType();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertEquals("Doctype", string0);
      
      String string1 = token_CData0.toString();
      assertNotNull(string1);
      assertEquals("<![CDATA[]]>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = token_CData0.toString();
      assertNotNull(string2);
      assertEquals("<![CDATA[]]>", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string3 = token_CData1.tokenType();
      assertNotNull(string3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertEquals("CData", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendTagName("");
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = token_StartTag1.nameAttr((String) null, (Attributes) null);
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      String string4 = token_Doctype0.getName();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(string4);
      assertSame(token_Doctype0, token_Doctype1);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        token_StartTag2.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeName("");
      token_EndTag0.appendTagName("FB{M9KV@O}`%EkTnV+");
      token_EndTag0.finaliseTag();
      token_EndTag0.normalName = "";
      token_EndTag0.appendAttributeValue('}');
      token_EndTag0.tagName = "vbua4+kw{jiG@@S";
      token_EndTag0.appendAttributeValue("U\"dx__N");
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      String string0 = token_EndTag0.tokenType();
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertEquals("EndTag", string0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      assertEquals(Token.TokenType.Doctype, token_TokenType0);
      
      Token.CData token_CData0 = new Token.CData("$'*xxN./d0\"kt]8");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertSame(token_CData0, token_CData1);
      assertEquals("CData", string0);
      
      String string1 = token_CData0.toString();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData1);
      assertEquals("<![CDATA[]]>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = token_CData0.getData();
      assertNotNull(string2);
      assertSame(token_CData0, token_CData1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      String string3 = token_CData0.toString();
      assertNotNull(string3);
      assertSame(token_CData0, token_CData1);
      assertEquals("<![CDATA[]]>", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.tagName = "";
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag0.name("$'*xxN./d0\"kt]8");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '~';
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      token_StartTag0.appendAttributeValue(charArray0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      Token.StartTag token_StartTag3 = (Token.StartTag)token_StartTag1.reset();
      assertNotNull(token_StartTag3);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag3, token_StartTag0);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      
      token_StartTag0.finaliseTag();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      token_StartTag1.appendTagName('~');
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag0.finaliseTag();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      boolean boolean0 = token_StartTag1.isComment();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_StartTag1.isDoctype();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = (int) '~';
      intArray0[2] = (int) '~';
      token_StartTag0.appendAttributeValue("oX#W'sC(16k<y0>.?<");
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '~';
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 126, 126, 126, 126, 126, 126}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("~v@=[G_lM enjC_", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("~v@=[G_lM enjC_", "~v@=[G_lM enjC_");
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("~v@=[G_lM enjC_", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      
      Attributes attributes4 = attributes3.clone();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("~v@=[G_lM enjC_", attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      
      token_StartTag0.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag0.tagName = "VoFH|-]Aa";
      char[] charArray0 = new char[5];
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      
      charArray0[0] = 'B';
      charArray0[1] = 'h';
      charArray0[2] = 'v';
      charArray0[3] = 'i';
      charArray0[4] = 'N';
      token_StartTag0.appendAttributeValue(charArray0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', 'h', 'v', 'i', 'N'}, charArray0);
      
      String string0 = token_StartTag0.toString();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals("<VoFH|-]Aa  ~v@=[G_lM enjC_=\"\">", string0);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      String string1 = token_StartTag1.toString();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertNotNull(string1);
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("<VoFH|-]Aa  ~v@=[G_lM enjC_=\"\">", string1);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      
      String string2 = token_StartTag1.normalName();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals(1, attributes4.size());
      assertNotNull(string2);
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes4);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes4);
      assertNotSame(attributes4, attributes0);
      assertNotSame(attributes4, attributes3);
      assertNotSame(attributes4, attributes1);
      assertNotSame(attributes4, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("~v@=[g_lm enjc_", string2);
      assertFalse(attributes0.equals((Object)attributes4));
      assertFalse(attributes1.equals((Object)attributes4));
      assertFalse(attributes2.equals((Object)attributes4));
      assertFalse(attributes3.equals((Object)attributes4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(attributes4.equals((Object)attributes0));
      assertFalse(attributes4.equals((Object)attributes3));
      assertFalse(attributes4.equals((Object)attributes1));
      assertFalse(attributes4.equals((Object)attributes2));
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      String string3 = token_Doctype0.getName();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      token_Doctype0.pubSysKey = null;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      token_Doctype0.pubSysKey = null;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      String string0 = token_Doctype0.getPubSysKey();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNull(string0);
      
      boolean boolean0 = token_Doctype0.isDoctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(boolean0);
      
      boolean boolean1 = token_Doctype0.isComment();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_Doctype0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(" =\"\"", string0);
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.reset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      attributes2.remove("");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, attributes2.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      token_StartTag2.attributes = attributes2;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals(0, token_StartTag2.attributes.size());
      
      token_StartTag2.appendAttributeValue('B');
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, attributes2.size());
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      boolean boolean0 = token_StartTag2.isStartTag();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, attributes2.size());
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertTrue(boolean0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      // Undeclared exception!
      try { 
        token_StartTag1.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("(-24i3Kn%fX");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag0.toString();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals("<(-24i3Kn%fX>", string0);
      
      token_StartTag0.appendAttributeValue('U');
      assertSame(token_StartTag0, token_StartTag1);
      
      token_EndTag0.appendTagName("=4E92^");
      boolean boolean0 = token_StartTag0.isComment();
      assertSame(token_StartTag0, token_StartTag1);
      assertFalse(boolean0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      token_Doctype0.forceQuirks = false;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      boolean boolean0 = token_Doctype0.isCData();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertFalse(boolean0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.CData token_CData0 = new Token.CData("R<k$>xd");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("R<k$>xd");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.data("q*Xg=dg46eAR6");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      
      Token.TokenType token_TokenType1 = Token.TokenType.StartTag;
      token_CData1.type = token_TokenType1;
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = (-1143);
      int int1 = 32;
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-1143), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1143
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.setEmptyAttributeValue();
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendTagName((String) null);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeValue((String) null);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag1.normalName();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("", string0);
      
      Token.CData token_CData0 = new Token.CData((String) null);
      assertNotNull(token_CData0);
      
      String string1 = token_CData0.tokenType();
      assertNotNull(string1);
      assertEquals("CData", string1);
      assertFalse(string1.equals((Object)string0));
      
      token_StartTag1.appendTagName('B');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_CData0.type = token_TokenType0;
      Token.CData token_CData1 = (Token.CData)token_CData0.data("");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string2 = token_CData1.tokenType();
      assertNotNull(string2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertEquals("CData", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Token.CData token_CData2 = (Token.CData)token_CData1.data("");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(boolean0);
      
      Attributes attributes0 = token_StartTag0.getAttributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(token_StartTag0, token_StartTag1);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype0, token_Doctype1);
      
      String string3 = token_StartTag0.tokenType();
      assertNotNull(string3);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals("StartTag", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Token.StartTag token_StartTag2 = token_StartTag0.asStartTag();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      String string4 = token_CData0.tokenType();
      assertNotNull(string4);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertEquals("CData", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'B';
      intArray0[1] = 3420;
      intArray0[2] = (int) 'B';
      intArray0[3] = (int) 'B';
      intArray0[4] = (int) 'B';
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) 'B';
      intArray0[7] = (int) 'B';
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66, 3420, 66, 66, 66, 66, 66, 66}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = '`';
      charArray0[2] = 'a';
      charArray0[3] = 'c';
      charArray0[4] = 'w';
      charArray0[5] = 'E';
      charArray0[6] = '3';
      charArray0[7] = '^';
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', '`', 'a', 'c', 'w', 'E', '3', '^'}, charArray0);
      
      token_EndTag0.newAttribute();
      Token.Tag token_Tag0 = token_EndTag0.name("ZSI.I8RYVTavSz");
      assertNotNull(token_Tag0);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_Tag0, token_EndTag0);
      
      String string0 = token_EndTag0.toString();
      assertNotNull(string0);
      assertSame(token_EndTag0, token_Tag0);
      assertEquals("</ZSI.I8RYVTavSz>", string0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.toString();
      assertNull(string0);
      
      String string1 = token_Character0.getData();
      assertNull(string1);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      boolean boolean0 = token_StartTag0.isSelfClosing();
      assertFalse(boolean0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_StartTag0.type = token_TokenType0;
      token_StartTag0.newAttribute();
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = "P";
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("P");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag1.appendAttributeName('j');
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.CData token_CData0 = new Token.CData("#");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("4NXU");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.CData token_CData2 = (Token.CData)token_CData0.data("#");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      Token.CData token_CData3 = (Token.CData)token_CData2.data("<=z~(^cZO\t U9");
      assertNotNull(token_CData3);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      
      String string1 = token_CData3.tokenType();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      assertEquals("CData", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      Token.EndTag token_EndTag3 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      assertSame(token_EndTag3, token_EndTag0);
      
      String string3 = token_EndTag0.normalName();
      assertNotNull(string3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag1);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "P");
      assertEquals("P", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(238, 'j');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      boolean boolean0 = token_EOF0.isEOF();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        token_EOF0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      token_Doctype0.pubSysKey = "";
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      token_Doctype0.forceQuirks = true;
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.TokenType token_TokenType0 = Token.TokenType.EOF;
      token_Doctype0.type = token_TokenType0;
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.TokenType token_TokenType1 = Token.TokenType.Doctype;
      token_Doctype1.type = token_TokenType1;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertEquals("", string0);
      
      Token.CData token_CData0 = new Token.CData("= +]x//|>^>IP0");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string1 = token_CData1.getData();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData(";wvZX");
      assertNotNull(token_CData0);
      
      boolean boolean0 = token_CData0.isCData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.getData();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        token_StartTag0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      String string0 = token_EndTag0.tokenType();
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertEquals("EndTag", string0);
      
      token_EndTag1.appendAttributeValue("");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      
      token_EndTag2.appendAttributeName('!');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      token_EndTag1.appendAttributeName('S');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      token_EndTag0.appendAttributeValue("@3M>");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      char[] charArray0 = new char[7];
      Token.Tag token_Tag0 = token_EndTag0.name("5N%}VmMa");
      assertNotNull(token_Tag0);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_Tag0, token_EndTag0);
      
      charArray0[0] = '=';
      charArray0[1] = ';';
      charArray0[2] = '>';
      token_EndTag0.appendTagName(']');
      assertSame(token_EndTag0, token_Tag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EndTag0.type = token_TokenType0;
      token_EndTag0.finaliseTag();
      assertSame(token_EndTag0, token_Tag0);
      
      charArray0[3] = '+';
      charArray0[4] = '6';
      charArray0[5] = ' ';
      charArray0[6] = ':';
      token_EndTag0.appendAttributeValue(charArray0);
      assertSame(token_EndTag0, token_Tag0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'=', ';', '>', '+', '6', ' ', ':'}, charArray0);
      
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[]]>", string0);
      
      boolean boolean0 = token_EndTag0.isSelfClosing();
      assertSame(token_EndTag0, token_Tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Comment0.type = token_TokenType0;
      String string0 = token_Comment0.toString();
      assertNotNull(string0);
      assertEquals("<!---->", string0);
      
      boolean boolean0 = token_Comment0.isComment();
      assertTrue(boolean0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      boolean boolean1 = token_Comment0.isEndTag();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.selfClosing = false;
      token_EndTag0.setEmptyAttributeValue();
      token_EndTag0.selfClosing = true;
      String string1 = token_EndTag0.normalName();
      assertNull(string1);
      
      boolean boolean2 = token_EndTag0.isStartTag();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      token_EndTag0.appendAttributeName((String) null);
      // Undeclared exception!
      try { 
        Token.TokenType.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      String string0 = token_Doctype0.tokenType();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string0);
      assertEquals("Doctype", string0);
      
      token_Doctype0.type = token_TokenType0;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean0 = token_Doctype1.isComment();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertFalse(boolean0);
      
      String string1 = token_Doctype0.getName();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string1);
      assertSame(token_Doctype0, token_Doctype1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = token_Doctype0.getPubSysKey();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNull(string2);
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.Doctype token_Doctype2 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertNotNull(token_Doctype2);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_Doctype2.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      token_Doctype0.pubSysKey = null;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string0 = token_Doctype0.getSystemIdentifier();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = token_Doctype0.isEOF();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 1254;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1709;
      // Undeclared exception!
      try { 
        token_StartTag0.appendAttributeValue(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.tagName = "I1/@";
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.reset();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      Token.StartTag token_StartTag3 = (Token.StartTag)token_StartTag1.reset();
      assertNotNull(token_StartTag3);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag0);
      
      Token.StartTag token_StartTag4 = token_StartTag3.asStartTag();
      assertNotNull(token_StartTag4);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag4);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag4);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag4);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag0);
      assertSame(token_StartTag4, token_StartTag3);
      assertSame(token_StartTag4, token_StartTag1);
      assertSame(token_StartTag4, token_StartTag2);
      assertSame(token_StartTag4, token_StartTag0);
      
      token_StartTag4.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag4);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag4);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag4);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag0);
      assertSame(token_StartTag4, token_StartTag3);
      assertSame(token_StartTag4, token_StartTag1);
      assertSame(token_StartTag4, token_StartTag2);
      assertSame(token_StartTag4, token_StartTag0);
      
      Token.StartTag token_StartTag5 = token_StartTag4.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag5);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag4);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag5);
      assertSame(token_StartTag1, token_StartTag4);
      assertSame(token_StartTag1, token_StartTag5);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag5);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag4);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag0);
      assertSame(token_StartTag4, token_StartTag3);
      assertSame(token_StartTag4, token_StartTag5);
      assertSame(token_StartTag4, token_StartTag1);
      assertSame(token_StartTag4, token_StartTag2);
      assertSame(token_StartTag4, token_StartTag0);
      assertSame(token_StartTag5, token_StartTag1);
      assertSame(token_StartTag5, token_StartTag3);
      assertSame(token_StartTag5, token_StartTag4);
      assertSame(token_StartTag5, token_StartTag2);
      assertSame(token_StartTag5, token_StartTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      String string0 = token_Doctype0.getName();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Token.StartTag token_StartTag6 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag6);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag6);
      assertSame(token_StartTag0, token_StartTag4);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag5);
      assertSame(token_StartTag6, token_StartTag1);
      assertSame(token_StartTag6, token_StartTag2);
      assertSame(token_StartTag6, token_StartTag0);
      assertSame(token_StartTag6, token_StartTag4);
      assertSame(token_StartTag6, token_StartTag3);
      assertSame(token_StartTag6, token_StartTag5);
      
      Attributes attributes1 = token_StartTag2.getAttributes();
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag6);
      assertSame(token_StartTag0, token_StartTag4);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag5);
      assertSame(token_StartTag1, token_StartTag4);
      assertSame(token_StartTag1, token_StartTag6);
      assertSame(token_StartTag1, token_StartTag5);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag5);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag4);
      assertSame(token_StartTag2, token_StartTag6);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag3);
      
      // Undeclared exception!
      try { 
        token_StartTag6.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.asCharacter();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      // Undeclared exception!
      try { 
        token_CData2.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '`';
      intArray0[1] = (int) '`';
      intArray0[2] = 1452;
      intArray0[3] = (int) '`';
      token_StartTag0.appendAttributeValue(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {96, 96, 1452, 96}, intArray0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("+OFHK#%-?cS.");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      token_StartTag0.appendAttributeValue('`');
      assertSame(token_StartTag0, token_Tag0);
      
      boolean boolean0 = token_StartTag0.isEndTag();
      assertSame(token_StartTag0, token_Tag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_StartTag0.isEndTag();
      assertSame(token_StartTag0, token_Tag0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      // Undeclared exception!
      try { 
        token_StartTag0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isDoctype();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("C~!I?");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("C~!I?");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.reset((StringBuilder) null);
      // Undeclared exception!
      try { 
        token_CData1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      Attributes attributes2 = attributes1.put("-->", true);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      Attribute attribute0 = new Attribute("-->", "{OIz?K", attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertNotNull(attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      
      Attribute attribute1 = attribute0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertEquals("-->", attribute1.getKey());
      assertEquals("{OIz?K", attribute1.getValue());
      assertNotNull(attribute1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertTrue(attribute1.equals((Object)attribute0));
      
      Attributes attributes3 = attributes2.put(attribute1);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertEquals("-->", attribute1.getKey());
      assertEquals("{OIz?K", attribute1.getValue());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("-->", attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertEquals("-->", attribute1.getKey());
      assertEquals("{OIz?K", attribute1.getValue());
      assertEquals(1, attributes3.size());
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      
      token_StartTag1.setEmptyAttributeValue();
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertEquals("-->", attribute1.getKey());
      assertEquals("{OIz?K", attribute1.getValue());
      assertEquals(1, attributes3.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      
      token_StartTag1.appendTagName('N');
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("-->", attribute0.getKey());
      assertEquals("{OIz?K", attribute0.getValue());
      assertEquals("-->", attribute1.getKey());
      assertEquals("{OIz?K", attribute1.getValue());
      assertEquals(1, attributes3.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attributes3.equals((Object)attributes0));
      
      boolean boolean0 = token_StartTag0.isStartTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0L);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      
      token_Doctype0.forceQuirks = false;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype0.type = token_TokenType0;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      token_Doctype0.forceQuirks = false;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean0 = token_Doctype1.isComment();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      String string0 = token_EOF1.tokenType();
      assertNotNull(string0);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      assertEquals("EOF", string0);
      
      // Undeclared exception!
      try { 
        token_EOF1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.normalName = "";
      // Undeclared exception!
      try { 
        token_EndTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("br");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.name();
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertEquals("br", string0);
      
      String string1 = token_EndTag1.normalName();
      assertNotNull(string1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertEquals("br", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.Doctype token_Doctype2 = token_Doctype1.asDoctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertNotNull(token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      String string0 = token_Doctype2.getSystemIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      assertEquals("", string0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string1 = token_EndTag0.normalName();
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean0 = token_EndTag1.isSelfClosing();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isEndTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      token_EndTag0.appendTagName('c');
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendTagName('F');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.toString();
      assertNull(string0);
      
      Token.Character token_Character1 = token_Character0.data((String) null);
      assertNotNull(token_Character1);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_Character0.type = token_TokenType0;
      boolean boolean0 = token_Character0.isEndTag();
      assertSame(token_Character0, token_Character1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.CData token_CData0 = new Token.CData("M%)NVw/E@m");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[M%)NVw/E@m]]>", string0);
      
      // Undeclared exception!
      try { 
        token_CData0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData(">");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[>]]>", string0);
      
      // Undeclared exception!
      try { 
        token_CData0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = token_EndTag0.tokenType();
      assertNotNull(string0);
      assertEquals("EndTag", string0);
      
      Token.Tag token_Tag0 = token_EndTag0.name("");
      assertNotNull(token_Tag0);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_Tag0, token_EndTag0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_Tag0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean0 = token_EndTag1.isSelfClosing();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isEndTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      token_EndTag0.appendTagName('c');
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendTagName('R');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = token_EndTag0.tokenType();
      assertNotNull(string0);
      assertEquals("EndTag", string0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("qq!X9{");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      // Undeclared exception!
      try { 
        token_CData1.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.setEmptyAttributeValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '>';
      token_StartTag0.appendAttributeValue(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', '>'}, charArray0);
      
      token_StartTag0.finaliseTag();
      token_StartTag0.appendAttributeValue('v');
      boolean boolean0 = token_StartTag0.isSelfClosing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", attributes0);
      assertEquals(0, attributes0.size());
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag0.normalName();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals("", string0);
      
      Attributes attributes1 = new Attributes();
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      
      Token.StartTag token_StartTag2 = token_StartTag0.nameAttr("", attributes1);
      assertEquals(0, attributes1.size());
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertNotSame(attributes1, attributes0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_StartTag0.appendAttributeName('B');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        token_Character0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_Doctype0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      String string0 = token_EOF0.tokenType();
      assertNotNull(string0);
      assertEquals("EOF", string0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_EOF0.type = token_TokenType0;
      Token.TokenType token_TokenType1 = Token.TokenType.Character;
      token_EOF0.type = token_TokenType1;
      // Undeclared exception!
      try { 
        token_EOF0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("1so\"xlPD");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data((String) null);
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      // Undeclared exception!
      try { 
        token_CData1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("kg");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertEquals("CData", string0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      String string1 = token_CData1.tokenType();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertEquals("CData", string1);
      assertTrue(string1.equals((Object)string0));
      
      token_CData0.type = token_TokenType0;
      String string2 = token_CData0.getData();
      assertNull(string2);
      assertSame(token_CData0, token_CData1);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      int[] intArray0 = new int[0];
      token_EndTag0.appendAttributeValue(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = token_EndTag0.isSelfClosing();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName("fHM^?");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag1.appendAttributeValue(';');
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("head", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = token_StartTag1.isCharacter();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_Doctype1.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = token_EndTag0.tokenType();
      assertNotNull(string0);
      assertEquals("EndTag", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145);
      // Undeclared exception!
      try { 
        token_EndTag0.appendAttributeValue(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      char char0 = '%';
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = "";
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag1.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      token_EndTag1.appendAttributeValue(charArray0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {',', 'B', '2'}, charArray0);
      
      Attributes attributes0 = token_EndTag1.getAttributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_EndTag1.attributes = attributes1;
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, token_EndTag1.attributes.size());
      
      token_EndTag1.appendAttributeName("Y?Fm]JeSs4~r");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isSelfClosing();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      token_EndTag0.appendAttributeName("");
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      token_EndTag1.appendAttributeValue(charArray0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {',', 'B', '2'}, charArray0);
      
      Attributes attributes0 = token_EndTag1.getAttributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_EndTag1.attributes = attributes1;
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, token_EndTag1.attributes.size());
      
      attributes1.removeIgnoreCase("512\nFXa5o)Z");
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_EndTag1.appendAttributeName("Y?Fm]JeSs4~r");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      Attributes attributes0 = token_EndTag1.getAttributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      token_EndTag1.attributes = attributes1;
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, token_EndTag1.attributes.size());
      
      token_EndTag1.appendAttributeName("Y?Fm]JeSs4~r");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.isCharacter();
      assertSame(token_EndTag0, token_EndTag1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeValue("(T]V)xB,m");
      Token.StartTag token_StartTag1 = token_StartTag0.asStartTag();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_Tag0, token_StartTag0);
      assertSame(token_Tag0, token_StartTag1);
      
      token_StartTag1.appendTagName("(T]V)xB,m");
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeValue('}');
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeValue("(T]V)xB,m");
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.tagName = "d4-";
      String string0 = token_StartTag1.toString();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("<d4->", string0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_StartTag0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 36;
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {36}, intArray0);
      
      Token.StartTag token_StartTag2 = token_StartTag0.asStartTag();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      
      Token.Tag token_Tag1 = token_StartTag2.reset();
      assertNotNull(token_Tag1);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_Tag1);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      assertSame(token_Tag1, token_StartTag0);
      assertSame(token_Tag1, token_StartTag2);
      assertSame(token_Tag1, token_StartTag1);
      assertSame(token_Tag1, token_Tag0);
      
      Token.Tag token_Tag2 = token_StartTag2.name("L@7Msv6/A}<ZNKNzm");
      assertNotNull(token_Tag2);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_Tag1);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      assertSame(token_StartTag2, token_Tag2);
      assertSame(token_Tag2, token_StartTag1);
      assertSame(token_Tag2, token_Tag1);
      assertSame(token_Tag2, token_Tag0);
      assertSame(token_Tag2, token_StartTag2);
      assertSame(token_Tag2, token_StartTag0);
      
      token_StartTag2.appendAttributeValue("]>");
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_Tag1);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_Tag0);
      assertSame(token_StartTag2, token_Tag2);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EOF;
      token_StartTag2.type = token_TokenType0;
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {36}, intArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.getData();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      String string1 = token_Doctype0.getSystemIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Token.CData token_CData0 = new Token.CData("multiple");
      assertNotNull(token_CData0);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(4278.871592347789);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("4278.871592347789", token_Doctype0.getSystemIdentifier());
      assertEquals("4278.871592347789", stringBuilder0.toString());
      assertEquals("4278.871592347789", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append('!');
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("4278.871592347789!", token_Doctype0.getSystemIdentifier());
      assertEquals("4278.871592347789!", stringBuilder0.toString());
      assertEquals("4278.871592347789!", stringBuilder1.toString());
      assertEquals("4278.871592347789!", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      Token.reset(stringBuilder2);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      Token.Character token_Character0 = token_CData0.data("multiple");
      assertNotNull(token_Character0);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      
      StringBuilder stringBuilder3 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      
      StringBuilder stringBuilder4 = stringBuilder3.delete(0, 0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder3.toString());
      assertEquals("", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      
      String string2 = token_Comment0.tokenType();
      assertNotNull(string2);
      assertEquals("Comment", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Token.reset(stringBuilder3);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder3.toString());
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_Character0.type = token_TokenType0;
      String string3 = token_Character0.toString();
      assertNotNull(string3);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      assertEquals("<![CDATA[multiple]]>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = token_Character0.toString();
      assertNotNull(string4);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      assertEquals("<![CDATA[multiple]]>", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        token_Comment0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("~v@=[G_lM enjC_", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("~v@=[G_lM enjC_", "~v@=[G_lM enjC_");
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("~v@=[G_lM enjC_", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      Attributes attributes4 = attributes2.put("~v@=[G_lM enjC_", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertNotNull(attributes4);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("~v@=[G_lM enjC_", attributes4);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag0.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag0.tagName = "VoFH|-]Aa";
      char[] charArray0 = new char[5];
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      charArray0[0] = 'B';
      charArray0[1] = 'h';
      charArray0[2] = 'v';
      charArray0[3] = 'i';
      charArray0[3] = 'N';
      token_StartTag0.appendAttributeValue(charArray0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', 'h', 'v', 'N', '\u0000'}, charArray0);
      
      String string0 = token_StartTag0.toString();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals("<VoFH|-]Aa  ~v@=[G_lM enjC_=\"\">", string0);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      String string1 = token_StartTag1.toString();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertNotNull(string1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("<VoFH|-]Aa  ~v@=[G_lM enjC_=\"\">", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = token_StartTag1.normalName();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertNotNull(string2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("~v@=[g_lm enjc_", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      String string3 = token_Doctype0.getName();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'B';
      intArray0[1] = (int) 'v';
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) 'h';
      intArray0[4] = 4;
      intArray0[5] = (int) 'v';
      intArray0[6] = (int) 'B';
      token_StartTag1.appendAttributeValue(intArray0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("~v@=[G_lM enjC_", attribute0.getValue());
      assertEquals("~v@=[G_lM enjC_", attribute0.getKey());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes4.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes4);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes4);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes4);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes4, attributes0);
      assertSame(attributes4, attributes1);
      assertSame(attributes4, attributes2);
      assertSame(attributes4, attributes3);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {66, 118, 104, 104, 4, 118, 66}, intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = new Token.StartTag();
      assertNotNull(token_StartTag1);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '~';
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertNotNull(token_Tag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_Tag0, token_StartTag1);
      assertSame(token_Tag0, token_StartTag0);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_Tag0.equals((Object)token_StartTag1));
      
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      token_StartTag0.appendAttributeValue(charArray0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertEquals(7, charArray0.length);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertArrayEquals(new char[] {'~', '~', '~', '~', '\u0000', '~', '~'}, charArray0);
      
      Token.Tag token_Tag1 = token_StartTag1.reset();
      assertNotNull(token_Tag1);
      assertSame(token_StartTag1, token_Tag1);
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertNotSame(token_Tag1, token_StartTag0);
      assertSame(token_Tag1, token_StartTag1);
      assertNotSame(token_Tag1, token_Tag0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      assertFalse(token_Tag1.equals((Object)token_StartTag0));
      assertFalse(token_Tag1.equals((Object)token_Tag0));
      
      token_StartTag0.finaliseTag();
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_Tag1);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag0.equals((Object)token_Tag1));
      
      token_StartTag1.appendTagName('~');
      assertSame(token_StartTag1, token_Tag1);
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      token_StartTag0.finaliseTag();
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_Tag1);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag0.equals((Object)token_Tag1));
      
      boolean boolean0 = token_StartTag1.isComment();
      assertSame(token_StartTag1, token_Tag1);
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertFalse(boolean0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      boolean boolean1 = token_StartTag1.isDoctype();
      assertSame(token_StartTag1, token_Tag1);
      assertNotSame(token_StartTag1, token_StartTag0);
      assertNotSame(token_StartTag1, token_Tag0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      assertFalse(token_StartTag1.equals((Object)token_Tag0));
      
      token_StartTag0.newAttribute();
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_Tag1);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag0.equals((Object)token_Tag1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '~';
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '\u0000';
      token_StartTag0.appendAttributeValue(intArray0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertNotSame(token_StartTag0, token_Tag1);
      assertEquals(7, intArray0.length);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag0.equals((Object)token_Tag1));
      assertArrayEquals(new int[] {126, 0, 126, 126, 126, 126, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      charArray0[0] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      token_StartTag0.appendAttributeValue(charArray0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '~', '~', '~', '~'}, charArray0);
      
      token_StartTag0.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag1.appendTagName('~');
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag0.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      
      boolean boolean0 = token_StartTag1.isComment();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(boolean0);
      
      boolean boolean1 = token_StartTag1.isDoctype();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '~';
      intArray0[1] = (int) '~';
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '\u0000';
      intArray0[6] = (int) '~';
      token_StartTag0.appendAttributeValue(intArray0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {126, 126, 126, 126, 126, 0, 126}, intArray0);
      
      String string0 = token_StartTag2.name();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.reset((StringBuilder) null);
      boolean boolean0 = token_Doctype0.isEndTag();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertSame(token_Doctype0, token_Doctype1);
      assertFalse(boolean0);
      
      Token.CData token_CData0 = new Token.CData("D9~|_XB:CZ~?FX;50");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertEquals("CData", string0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("D9~|_XB:CZ~?FX;50");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.reset();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      String string1 = token_CData2.tokenType();
      assertNotNull(string1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      assertEquals("CData", string1);
      assertTrue(string1.equals((Object)string0));
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendTagName("CData");
      token_StartTag0.appendAttributeName('8');
      token_StartTag0.appendTagName('q');
      String string2 = token_Doctype1.tokenType();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(string2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertEquals("Doctype", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag1.newAttribute();
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag0, token_StartTag1);
      
      String string3 = token_Doctype0.getPublicIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(string3);
      assertSame(token_Doctype0, token_Doctype1);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = token_Doctype1.isEndTag();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('j');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.CData token_CData0 = new Token.CData("#");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("4NXU");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.CData token_CData2 = (Token.CData)token_CData0.data("#");
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      Token.CData token_CData3 = (Token.CData)token_CData2.data("<=z~(^cZO\t U9");
      assertNotNull(token_CData3);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      
      String string0 = token_CData3.tokenType();
      assertNotNull(string0);
      assertSame(token_CData0, token_CData3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData3);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData3, token_CData2);
      assertSame(token_CData3, token_CData0);
      assertSame(token_CData3, token_CData1);
      assertEquals("CData", string0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Attributes attributes1 = token_StartTag0.getAttributes();
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      boolean boolean0 = token_EndTag0.isStartTag();
      assertFalse(boolean0);
      
      Token.CData token_CData0 = new Token.CData("(ydt~IVn");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertEquals("CData", string0);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("_%z", attributes0);
      Token.StartTag token_StartTag2 = token_StartTag1.asStartTag();
      int[] intArray0 = new int[5];
      intArray0[0] = 3293;
      token_StartTag1.appendAttributeValue('\'');
      intArray0[1] = 1;
      intArray0[2] = 1177;
      intArray0[3] = 1154;
      intArray0[4] = 144;
      token_StartTag1.appendAttributeValue(intArray0);
      Token.StartTag token_StartTag3 = (Token.StartTag)token_StartTag2.reset();
      token_StartTag3.getAttributes();
      Token.EOF token_EOF0 = new Token.EOF();
      token_EOF0.tokenType();
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      token_EOF1.tokenType();
      Token.TokenType.values();
      token_StartTag3.getAttributes();
      StringBuilder stringBuilder0 = new StringBuilder("=2Wd9/XA=,7");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.append('\'');
      StringBuilder stringBuilder3 = stringBuilder2.insert(1, (CharSequence) stringBuilder0);
      token_StartTag2.name("_%z");
      // Undeclared exception!
      try { 
        stringBuilder3.delete(34, (-262));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
